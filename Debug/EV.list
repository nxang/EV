
EV.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009098  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000045c  08009238  08009238  00019238  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009694  08009694  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08009694  08009694  00019694  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800969c  0800969c  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800969c  0800969c  0001969c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080096a0  080096a0  000196a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  080096a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000364  200001e0  08009880  000201e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000544  08009880  00020544  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001213a  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002650  00000000  00000000  00032346  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fe8  00000000  00000000  00034998  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ef0  00000000  00000000  00035980  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000192db  00000000  00000000  00036870  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012602  00000000  00000000  0004fb4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a0753  00000000  00000000  0006214d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001028a0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000054e0  00000000  00000000  001028f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e0 	.word	0x200001e0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009220 	.word	0x08009220

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e4 	.word	0x200001e4
 80001dc:	08009220 	.word	0x08009220

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c6c:	f000 b974 	b.w	8000f58 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	4604      	mov	r4, r0
 8000c90:	468e      	mov	lr, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d14d      	bne.n	8000d32 <__udivmoddi4+0xaa>
 8000c96:	428a      	cmp	r2, r1
 8000c98:	4694      	mov	ip, r2
 8000c9a:	d969      	bls.n	8000d70 <__udivmoddi4+0xe8>
 8000c9c:	fab2 f282 	clz	r2, r2
 8000ca0:	b152      	cbz	r2, 8000cb8 <__udivmoddi4+0x30>
 8000ca2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ca6:	f1c2 0120 	rsb	r1, r2, #32
 8000caa:	fa20 f101 	lsr.w	r1, r0, r1
 8000cae:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cb6:	4094      	lsls	r4, r2
 8000cb8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cbc:	0c21      	lsrs	r1, r4, #16
 8000cbe:	fbbe f6f8 	udiv	r6, lr, r8
 8000cc2:	fa1f f78c 	uxth.w	r7, ip
 8000cc6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cca:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cce:	fb06 f107 	mul.w	r1, r6, r7
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	d90a      	bls.n	8000cec <__udivmoddi4+0x64>
 8000cd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cda:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000cde:	f080 811f 	bcs.w	8000f20 <__udivmoddi4+0x298>
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	f240 811c 	bls.w	8000f20 <__udivmoddi4+0x298>
 8000ce8:	3e02      	subs	r6, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	1a5b      	subs	r3, r3, r1
 8000cee:	b2a4      	uxth	r4, r4
 8000cf0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cfc:	fb00 f707 	mul.w	r7, r0, r7
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	d90a      	bls.n	8000d1a <__udivmoddi4+0x92>
 8000d04:	eb1c 0404 	adds.w	r4, ip, r4
 8000d08:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d0c:	f080 810a 	bcs.w	8000f24 <__udivmoddi4+0x29c>
 8000d10:	42a7      	cmp	r7, r4
 8000d12:	f240 8107 	bls.w	8000f24 <__udivmoddi4+0x29c>
 8000d16:	4464      	add	r4, ip
 8000d18:	3802      	subs	r0, #2
 8000d1a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d1e:	1be4      	subs	r4, r4, r7
 8000d20:	2600      	movs	r6, #0
 8000d22:	b11d      	cbz	r5, 8000d2c <__udivmoddi4+0xa4>
 8000d24:	40d4      	lsrs	r4, r2
 8000d26:	2300      	movs	r3, #0
 8000d28:	e9c5 4300 	strd	r4, r3, [r5]
 8000d2c:	4631      	mov	r1, r6
 8000d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d909      	bls.n	8000d4a <__udivmoddi4+0xc2>
 8000d36:	2d00      	cmp	r5, #0
 8000d38:	f000 80ef 	beq.w	8000f1a <__udivmoddi4+0x292>
 8000d3c:	2600      	movs	r6, #0
 8000d3e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d42:	4630      	mov	r0, r6
 8000d44:	4631      	mov	r1, r6
 8000d46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4a:	fab3 f683 	clz	r6, r3
 8000d4e:	2e00      	cmp	r6, #0
 8000d50:	d14a      	bne.n	8000de8 <__udivmoddi4+0x160>
 8000d52:	428b      	cmp	r3, r1
 8000d54:	d302      	bcc.n	8000d5c <__udivmoddi4+0xd4>
 8000d56:	4282      	cmp	r2, r0
 8000d58:	f200 80f9 	bhi.w	8000f4e <__udivmoddi4+0x2c6>
 8000d5c:	1a84      	subs	r4, r0, r2
 8000d5e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d62:	2001      	movs	r0, #1
 8000d64:	469e      	mov	lr, r3
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	d0e0      	beq.n	8000d2c <__udivmoddi4+0xa4>
 8000d6a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d6e:	e7dd      	b.n	8000d2c <__udivmoddi4+0xa4>
 8000d70:	b902      	cbnz	r2, 8000d74 <__udivmoddi4+0xec>
 8000d72:	deff      	udf	#255	; 0xff
 8000d74:	fab2 f282 	clz	r2, r2
 8000d78:	2a00      	cmp	r2, #0
 8000d7a:	f040 8092 	bne.w	8000ea2 <__udivmoddi4+0x21a>
 8000d7e:	eba1 010c 	sub.w	r1, r1, ip
 8000d82:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d86:	fa1f fe8c 	uxth.w	lr, ip
 8000d8a:	2601      	movs	r6, #1
 8000d8c:	0c20      	lsrs	r0, r4, #16
 8000d8e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d92:	fb07 1113 	mls	r1, r7, r3, r1
 8000d96:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d9a:	fb0e f003 	mul.w	r0, lr, r3
 8000d9e:	4288      	cmp	r0, r1
 8000da0:	d908      	bls.n	8000db4 <__udivmoddi4+0x12c>
 8000da2:	eb1c 0101 	adds.w	r1, ip, r1
 8000da6:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000daa:	d202      	bcs.n	8000db2 <__udivmoddi4+0x12a>
 8000dac:	4288      	cmp	r0, r1
 8000dae:	f200 80cb 	bhi.w	8000f48 <__udivmoddi4+0x2c0>
 8000db2:	4643      	mov	r3, r8
 8000db4:	1a09      	subs	r1, r1, r0
 8000db6:	b2a4      	uxth	r4, r4
 8000db8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dbc:	fb07 1110 	mls	r1, r7, r0, r1
 8000dc0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000dc4:	fb0e fe00 	mul.w	lr, lr, r0
 8000dc8:	45a6      	cmp	lr, r4
 8000dca:	d908      	bls.n	8000dde <__udivmoddi4+0x156>
 8000dcc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd0:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000dd4:	d202      	bcs.n	8000ddc <__udivmoddi4+0x154>
 8000dd6:	45a6      	cmp	lr, r4
 8000dd8:	f200 80bb 	bhi.w	8000f52 <__udivmoddi4+0x2ca>
 8000ddc:	4608      	mov	r0, r1
 8000dde:	eba4 040e 	sub.w	r4, r4, lr
 8000de2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000de6:	e79c      	b.n	8000d22 <__udivmoddi4+0x9a>
 8000de8:	f1c6 0720 	rsb	r7, r6, #32
 8000dec:	40b3      	lsls	r3, r6
 8000dee:	fa22 fc07 	lsr.w	ip, r2, r7
 8000df2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000df6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dfa:	fa01 f306 	lsl.w	r3, r1, r6
 8000dfe:	431c      	orrs	r4, r3
 8000e00:	40f9      	lsrs	r1, r7
 8000e02:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e06:	fa00 f306 	lsl.w	r3, r0, r6
 8000e0a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e0e:	0c20      	lsrs	r0, r4, #16
 8000e10:	fa1f fe8c 	uxth.w	lr, ip
 8000e14:	fb09 1118 	mls	r1, r9, r8, r1
 8000e18:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e1c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e20:	4288      	cmp	r0, r1
 8000e22:	fa02 f206 	lsl.w	r2, r2, r6
 8000e26:	d90b      	bls.n	8000e40 <__udivmoddi4+0x1b8>
 8000e28:	eb1c 0101 	adds.w	r1, ip, r1
 8000e2c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e30:	f080 8088 	bcs.w	8000f44 <__udivmoddi4+0x2bc>
 8000e34:	4288      	cmp	r0, r1
 8000e36:	f240 8085 	bls.w	8000f44 <__udivmoddi4+0x2bc>
 8000e3a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e3e:	4461      	add	r1, ip
 8000e40:	1a09      	subs	r1, r1, r0
 8000e42:	b2a4      	uxth	r4, r4
 8000e44:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e48:	fb09 1110 	mls	r1, r9, r0, r1
 8000e4c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e50:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e54:	458e      	cmp	lr, r1
 8000e56:	d908      	bls.n	8000e6a <__udivmoddi4+0x1e2>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000e60:	d26c      	bcs.n	8000f3c <__udivmoddi4+0x2b4>
 8000e62:	458e      	cmp	lr, r1
 8000e64:	d96a      	bls.n	8000f3c <__udivmoddi4+0x2b4>
 8000e66:	3802      	subs	r0, #2
 8000e68:	4461      	add	r1, ip
 8000e6a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e6e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e72:	eba1 010e 	sub.w	r1, r1, lr
 8000e76:	42a1      	cmp	r1, r4
 8000e78:	46c8      	mov	r8, r9
 8000e7a:	46a6      	mov	lr, r4
 8000e7c:	d356      	bcc.n	8000f2c <__udivmoddi4+0x2a4>
 8000e7e:	d053      	beq.n	8000f28 <__udivmoddi4+0x2a0>
 8000e80:	b15d      	cbz	r5, 8000e9a <__udivmoddi4+0x212>
 8000e82:	ebb3 0208 	subs.w	r2, r3, r8
 8000e86:	eb61 010e 	sbc.w	r1, r1, lr
 8000e8a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e8e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e92:	40f1      	lsrs	r1, r6
 8000e94:	431f      	orrs	r7, r3
 8000e96:	e9c5 7100 	strd	r7, r1, [r5]
 8000e9a:	2600      	movs	r6, #0
 8000e9c:	4631      	mov	r1, r6
 8000e9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ea2:	f1c2 0320 	rsb	r3, r2, #32
 8000ea6:	40d8      	lsrs	r0, r3
 8000ea8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eac:	fa21 f303 	lsr.w	r3, r1, r3
 8000eb0:	4091      	lsls	r1, r2
 8000eb2:	4301      	orrs	r1, r0
 8000eb4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eb8:	fa1f fe8c 	uxth.w	lr, ip
 8000ebc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ec0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ec4:	0c0b      	lsrs	r3, r1, #16
 8000ec6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eca:	fb00 f60e 	mul.w	r6, r0, lr
 8000ece:	429e      	cmp	r6, r3
 8000ed0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ed4:	d908      	bls.n	8000ee8 <__udivmoddi4+0x260>
 8000ed6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eda:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000ede:	d22f      	bcs.n	8000f40 <__udivmoddi4+0x2b8>
 8000ee0:	429e      	cmp	r6, r3
 8000ee2:	d92d      	bls.n	8000f40 <__udivmoddi4+0x2b8>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4463      	add	r3, ip
 8000ee8:	1b9b      	subs	r3, r3, r6
 8000eea:	b289      	uxth	r1, r1
 8000eec:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ef0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ef4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef8:	fb06 f30e 	mul.w	r3, r6, lr
 8000efc:	428b      	cmp	r3, r1
 8000efe:	d908      	bls.n	8000f12 <__udivmoddi4+0x28a>
 8000f00:	eb1c 0101 	adds.w	r1, ip, r1
 8000f04:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000f08:	d216      	bcs.n	8000f38 <__udivmoddi4+0x2b0>
 8000f0a:	428b      	cmp	r3, r1
 8000f0c:	d914      	bls.n	8000f38 <__udivmoddi4+0x2b0>
 8000f0e:	3e02      	subs	r6, #2
 8000f10:	4461      	add	r1, ip
 8000f12:	1ac9      	subs	r1, r1, r3
 8000f14:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f18:	e738      	b.n	8000d8c <__udivmoddi4+0x104>
 8000f1a:	462e      	mov	r6, r5
 8000f1c:	4628      	mov	r0, r5
 8000f1e:	e705      	b.n	8000d2c <__udivmoddi4+0xa4>
 8000f20:	4606      	mov	r6, r0
 8000f22:	e6e3      	b.n	8000cec <__udivmoddi4+0x64>
 8000f24:	4618      	mov	r0, r3
 8000f26:	e6f8      	b.n	8000d1a <__udivmoddi4+0x92>
 8000f28:	454b      	cmp	r3, r9
 8000f2a:	d2a9      	bcs.n	8000e80 <__udivmoddi4+0x1f8>
 8000f2c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f30:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f34:	3801      	subs	r0, #1
 8000f36:	e7a3      	b.n	8000e80 <__udivmoddi4+0x1f8>
 8000f38:	4646      	mov	r6, r8
 8000f3a:	e7ea      	b.n	8000f12 <__udivmoddi4+0x28a>
 8000f3c:	4620      	mov	r0, r4
 8000f3e:	e794      	b.n	8000e6a <__udivmoddi4+0x1e2>
 8000f40:	4640      	mov	r0, r8
 8000f42:	e7d1      	b.n	8000ee8 <__udivmoddi4+0x260>
 8000f44:	46d0      	mov	r8, sl
 8000f46:	e77b      	b.n	8000e40 <__udivmoddi4+0x1b8>
 8000f48:	3b02      	subs	r3, #2
 8000f4a:	4461      	add	r1, ip
 8000f4c:	e732      	b.n	8000db4 <__udivmoddi4+0x12c>
 8000f4e:	4630      	mov	r0, r6
 8000f50:	e709      	b.n	8000d66 <__udivmoddi4+0xde>
 8000f52:	4464      	add	r4, ip
 8000f54:	3802      	subs	r0, #2
 8000f56:	e742      	b.n	8000dde <__udivmoddi4+0x156>

08000f58 <__aeabi_idiv0>:
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop

08000f5c <initMovingAverage>:
    MovingAverage OUTPUT_MA;

} Input;

// Initialize the Moving Average structure
void initMovingAverage(MovingAverage* ma,uint8_t frame) {
 8000f5c:	b480      	push	{r7}
 8000f5e:	b085      	sub	sp, #20
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
 8000f64:	460b      	mov	r3, r1
 8000f66:	70fb      	strb	r3, [r7, #3]
    for (int i = 0; i < frame; i++) {
 8000f68:	2300      	movs	r3, #0
 8000f6a:	60fb      	str	r3, [r7, #12]
 8000f6c:	e00c      	b.n	8000f88 <initMovingAverage+0x2c>
        ma->buffer[i] = 0;
 8000f6e:	687a      	ldr	r2, [r7, #4]
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	00db      	lsls	r3, r3, #3
 8000f74:	18d1      	adds	r1, r2, r3
 8000f76:	f04f 0200 	mov.w	r2, #0
 8000f7a:	f04f 0300 	mov.w	r3, #0
 8000f7e:	e9c1 2300 	strd	r2, r3, [r1]
    for (int i = 0; i < frame; i++) {
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	3301      	adds	r3, #1
 8000f86:	60fb      	str	r3, [r7, #12]
 8000f88:	78fb      	ldrb	r3, [r7, #3]
 8000f8a:	68fa      	ldr	r2, [r7, #12]
 8000f8c:	429a      	cmp	r2, r3
 8000f8e:	dbee      	blt.n	8000f6e <initMovingAverage+0x12>
    }
    ma->index = 0;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	2200      	movs	r2, #0
 8000f94:	629a      	str	r2, [r3, #40]	; 0x28
    ma->count = 0;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	2200      	movs	r2, #0
 8000f9a:	62da      	str	r2, [r3, #44]	; 0x2c
    ma->sum = 0;
 8000f9c:	6879      	ldr	r1, [r7, #4]
 8000f9e:	f04f 0200 	mov.w	r2, #0
 8000fa2:	f04f 0300 	mov.w	r3, #0
 8000fa6:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
}
 8000faa:	bf00      	nop
 8000fac:	3714      	adds	r7, #20
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr
	...

08000fb8 <addValue>:

// Add a new value to the moving average
double addValue(MovingAverage* ma, float value) {
 8000fb8:	b5b0      	push	{r4, r5, r7, lr}
 8000fba:	b082      	sub	sp, #8
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
 8000fc0:	ed87 0a00 	vstr	s0, [r7]
    // Subtract the oldest value from the sum
    ma->sum -= ma->buffer[ma->index];
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fce:	687a      	ldr	r2, [r7, #4]
 8000fd0:	00db      	lsls	r3, r3, #3
 8000fd2:	4413      	add	r3, r2
 8000fd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fd8:	f7ff f95e 	bl	8000298 <__aeabi_dsub>
 8000fdc:	4602      	mov	r2, r0
 8000fde:	460b      	mov	r3, r1
 8000fe0:	6879      	ldr	r1, [r7, #4]
 8000fe2:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    // Replace it with the new value
    ma->buffer[ma->index] = value;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 8000fea:	6838      	ldr	r0, [r7, #0]
 8000fec:	f7ff fab4 	bl	8000558 <__aeabi_f2d>
 8000ff0:	4602      	mov	r2, r0
 8000ff2:	460b      	mov	r3, r1
 8000ff4:	6878      	ldr	r0, [r7, #4]
 8000ff6:	00e1      	lsls	r1, r4, #3
 8000ff8:	4401      	add	r1, r0
 8000ffa:	e9c1 2300 	strd	r2, r3, [r1]
    // Add the new value to the sum
    ma->sum += value;
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8001004:	6838      	ldr	r0, [r7, #0]
 8001006:	f7ff faa7 	bl	8000558 <__aeabi_f2d>
 800100a:	4602      	mov	r2, r0
 800100c:	460b      	mov	r3, r1
 800100e:	4620      	mov	r0, r4
 8001010:	4629      	mov	r1, r5
 8001012:	f7ff f943 	bl	800029c <__adddf3>
 8001016:	4602      	mov	r2, r0
 8001018:	460b      	mov	r3, r1
 800101a:	6879      	ldr	r1, [r7, #4]
 800101c:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30

    // Move the index in a circular manner
    ma->index = (ma->index + 1) % N;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001024:	1c59      	adds	r1, r3, #1
 8001026:	4b17      	ldr	r3, [pc, #92]	; (8001084 <addValue+0xcc>)
 8001028:	fb83 2301 	smull	r2, r3, r3, r1
 800102c:	105a      	asrs	r2, r3, #1
 800102e:	17cb      	asrs	r3, r1, #31
 8001030:	1ad2      	subs	r2, r2, r3
 8001032:	4613      	mov	r3, r2
 8001034:	009b      	lsls	r3, r3, #2
 8001036:	4413      	add	r3, r2
 8001038:	1aca      	subs	r2, r1, r3
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	629a      	str	r2, [r3, #40]	; 0x28

    // Keep track of the number of values added (up to N)
    if (ma->count < N) {
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001042:	2b04      	cmp	r3, #4
 8001044:	dc04      	bgt.n	8001050 <addValue+0x98>
        ma->count++;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800104a:	1c5a      	adds	r2, r3, #1
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	62da      	str	r2, [r3, #44]	; 0x2c
    }

    // Return the current moving average
    return ma->sum / ma->count;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800105a:	4618      	mov	r0, r3
 800105c:	f7ff fa6a 	bl	8000534 <__aeabi_i2d>
 8001060:	4602      	mov	r2, r0
 8001062:	460b      	mov	r3, r1
 8001064:	4620      	mov	r0, r4
 8001066:	4629      	mov	r1, r5
 8001068:	f7ff fbf8 	bl	800085c <__aeabi_ddiv>
 800106c:	4602      	mov	r2, r0
 800106e:	460b      	mov	r3, r1
 8001070:	ec43 2b17 	vmov	d7, r2, r3
}
 8001074:	eeb0 0a47 	vmov.f32	s0, s14
 8001078:	eef0 0a67 	vmov.f32	s1, s15
 800107c:	3708      	adds	r7, #8
 800107e:	46bd      	mov	sp, r7
 8001080:	bdb0      	pop	{r4, r5, r7, pc}
 8001082:	bf00      	nop
 8001084:	66666667 	.word	0x66666667

08001088 <v_to_c>:
double resultt;
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
double v_to_c(double V){
 8001088:	b5b0      	push	{r4, r5, r7, lr}
 800108a:	b08a      	sub	sp, #40	; 0x28
 800108c:	af00      	add	r7, sp, #0
 800108e:	ed87 0b00 	vstr	d0, [r7]
	double a= -0.21694;
 8001092:	a32e      	add	r3, pc, #184	; (adr r3, 800114c <v_to_c+0xc4>)
 8001094:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001098:	e9c7 2306 	strd	r2, r3, [r7, #24]
	double b= 8.57057;
 800109c:	a32d      	add	r3, pc, #180	; (adr r3, 8001154 <v_to_c+0xcc>)
 800109e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010a2:	e9c7 2304 	strd	r2, r3, [r7, #16]
	double c= -0.31640;
 80010a6:	a32d      	add	r3, pc, #180	; (adr r3, 800115c <v_to_c+0xd4>)
 80010a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010ac:	e9c7 2302 	strd	r2, r3, [r7, #8]

	double I= a*V*V+b*V+c;
 80010b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80010b4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80010b8:	f7ff faa6 	bl	8000608 <__aeabi_dmul>
 80010bc:	4602      	mov	r2, r0
 80010be:	460b      	mov	r3, r1
 80010c0:	4610      	mov	r0, r2
 80010c2:	4619      	mov	r1, r3
 80010c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80010c8:	f7ff fa9e 	bl	8000608 <__aeabi_dmul>
 80010cc:	4602      	mov	r2, r0
 80010ce:	460b      	mov	r3, r1
 80010d0:	4614      	mov	r4, r2
 80010d2:	461d      	mov	r5, r3
 80010d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80010d8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80010dc:	f7ff fa94 	bl	8000608 <__aeabi_dmul>
 80010e0:	4602      	mov	r2, r0
 80010e2:	460b      	mov	r3, r1
 80010e4:	4620      	mov	r0, r4
 80010e6:	4629      	mov	r1, r5
 80010e8:	f7ff f8d8 	bl	800029c <__adddf3>
 80010ec:	4602      	mov	r2, r0
 80010ee:	460b      	mov	r3, r1
 80010f0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80010f4:	f7ff f8d2 	bl	800029c <__adddf3>
 80010f8:	4602      	mov	r2, r0
 80010fa:	460b      	mov	r3, r1
 80010fc:	e9c7 2308 	strd	r2, r3, [r7, #32]
	if(I<0){
 8001100:	f04f 0200 	mov.w	r2, #0
 8001104:	f04f 0300 	mov.w	r3, #0
 8001108:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800110c:	f7ff fcee 	bl	8000aec <__aeabi_dcmplt>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d005      	beq.n	8001122 <v_to_c+0x9a>
		I=0;
 8001116:	f04f 0200 	mov.w	r2, #0
 800111a:	f04f 0300 	mov.w	r3, #0
 800111e:	e9c7 2308 	strd	r2, r3, [r7, #32]
	}
	return I*7;
 8001122:	f04f 0200 	mov.w	r2, #0
 8001126:	4b08      	ldr	r3, [pc, #32]	; (8001148 <v_to_c+0xc0>)
 8001128:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800112c:	f7ff fa6c 	bl	8000608 <__aeabi_dmul>
 8001130:	4602      	mov	r2, r0
 8001132:	460b      	mov	r3, r1
 8001134:	ec43 2b17 	vmov	d7, r2, r3
}
 8001138:	eeb0 0a47 	vmov.f32	s0, s14
 800113c:	eef0 0a67 	vmov.f32	s1, s15
 8001140:	3728      	adds	r7, #40	; 0x28
 8001142:	46bd      	mov	sp, r7
 8001144:	bdb0      	pop	{r4, r5, r7, pc}
 8001146:	bf00      	nop
 8001148:	401c0000 	.word	0x401c0000
 800114c:	9e98dcdb 	.word	0x9e98dcdb
 8001150:	bfcbc4b0 	.word	0xbfcbc4b0
 8001154:	c044284e 	.word	0xc044284e
 8001158:	40212421 	.word	0x40212421
 800115c:	c91d14e4 	.word	0xc91d14e4
 8001160:	bfd43fe5 	.word	0xbfd43fe5
 8001164:	00000000 	.word	0x00000000

08001168 <v_to_v>:

double v_to_v(double V){
 8001168:	b580      	push	{r7, lr}
 800116a:	b086      	sub	sp, #24
 800116c:	af00      	add	r7, sp, #0
 800116e:	ed87 0b00 	vstr	d0, [r7]
	double m= 150.0/(2.641);
 8001172:	a313      	add	r3, pc, #76	; (adr r3, 80011c0 <v_to_v+0x58>)
 8001174:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001178:	e9c7 2304 	strd	r2, r3, [r7, #16]
	double c= 0;
 800117c:	f04f 0200 	mov.w	r2, #0
 8001180:	f04f 0300 	mov.w	r3, #0
 8001184:	e9c7 2302 	strd	r2, r3, [r7, #8]
	return (m*(V)+c);
 8001188:	e9d7 2300 	ldrd	r2, r3, [r7]
 800118c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001190:	f7ff fa3a 	bl	8000608 <__aeabi_dmul>
 8001194:	4602      	mov	r2, r0
 8001196:	460b      	mov	r3, r1
 8001198:	4610      	mov	r0, r2
 800119a:	4619      	mov	r1, r3
 800119c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80011a0:	f7ff f87c 	bl	800029c <__adddf3>
 80011a4:	4602      	mov	r2, r0
 80011a6:	460b      	mov	r3, r1
 80011a8:	ec43 2b17 	vmov	d7, r2, r3
}
 80011ac:	eeb0 0a47 	vmov.f32	s0, s14
 80011b0:	eef0 0a67 	vmov.f32	s1, s15
 80011b4:	3718      	adds	r7, #24
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	f3af 8000 	nop.w
 80011c0:	36f60412 	.word	0x36f60412
 80011c4:	404c65f9 	.word	0x404c65f9

080011c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80011cc:	b08d      	sub	sp, #52	; 0x34
 80011ce:	af0a      	add	r7, sp, #40	; 0x28
  /* USER CODE BEGIN 1 */
	initMovingAverage(& I1.OUTPUT_MA,20);
 80011d0:	2114      	movs	r1, #20
 80011d2:	4841      	ldr	r0, [pc, #260]	; (80012d8 <main+0x110>)
 80011d4:	f7ff fec2 	bl	8000f5c <initMovingAverage>
	initMovingAverage(& V1.OUTPUT_MA,20);
 80011d8:	2114      	movs	r1, #20
 80011da:	4840      	ldr	r0, [pc, #256]	; (80012dc <main+0x114>)
 80011dc:	f7ff febe 	bl	8000f5c <initMovingAverage>
	initMovingAverage(& V1.ADC_MA,5);
 80011e0:	2105      	movs	r1, #5
 80011e2:	483f      	ldr	r0, [pc, #252]	; (80012e0 <main+0x118>)
 80011e4:	f7ff feba 	bl	8000f5c <initMovingAverage>
	initMovingAverage(& I1.ADC_MA,5);
 80011e8:	2105      	movs	r1, #5
 80011ea:	483e      	ldr	r0, [pc, #248]	; (80012e4 <main+0x11c>)
 80011ec:	f7ff feb6 	bl	8000f5c <initMovingAverage>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011f0:	f000 fe60 	bl	8001eb4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011f4:	f000 f892 	bl	800131c <SystemClock_Config>
//	uint8_t data[] = "Hello world\n";

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011f8:	f000 fa88 	bl	800170c <MX_GPIO_Init>
  MX_DMA_Init();
 80011fc:	f000 fa66 	bl	80016cc <MX_DMA_Init>
  MX_USART1_UART_Init();
 8001200:	f000 fa3a 	bl	8001678 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8001204:	f000 f8f6 	bl	80013f4 <MX_ADC1_Init>
  MX_RTC_Init();
 8001208:	f000 f98a 	bl	8001520 <MX_RTC_Init>
  MX_TIM1_Init();
 800120c:	f000 f9e2 	bl	80015d4 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim1);
 8001210:	4835      	ldr	r0, [pc, #212]	; (80012e8 <main+0x120>)
 8001212:	f003 fce7 	bl	8004be4 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
//	HAL_ADC_Start_DMA(&hadc1, (uint32_t *) adc_dma_result , 1);
	HAL_ADC_Start_DMA(&hadc1, (uint32_t *) adc_dma_result , 2);
 8001216:	2202      	movs	r2, #2
 8001218:	4934      	ldr	r1, [pc, #208]	; (80012ec <main+0x124>)
 800121a:	4835      	ldr	r0, [pc, #212]	; (80012f0 <main+0x128>)
 800121c:	f001 f834 	bl	8002288 <HAL_ADC_Start_DMA>
//	HAL_ADC_Start_DMA(&hadc1, (uint32_t *) adc_dma_result , adc_channel_count);
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8001220:	2200      	movs	r2, #0
 8001222:	4934      	ldr	r1, [pc, #208]	; (80012f4 <main+0x12c>)
 8001224:	4834      	ldr	r0, [pc, #208]	; (80012f8 <main+0x130>)
 8001226:	f003 fa9f 	bl	8004768 <HAL_RTC_GetTime>
		HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 800122a:	2200      	movs	r2, #0
 800122c:	4933      	ldr	r1, [pc, #204]	; (80012fc <main+0x134>)
 800122e:	4832      	ldr	r0, [pc, #200]	; (80012f8 <main+0x130>)
 8001230:	f003 fb7c 	bl	800492c <HAL_RTC_GetDate>

		sprintf(buffer, "DTime: %02d:%02d:%02d:%02ld, ", sTime.Hours,sTime.Minutes, sTime.Seconds, abs(sTime.SubSeconds-255));
 8001234:	4b2f      	ldr	r3, [pc, #188]	; (80012f4 <main+0x12c>)
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	4619      	mov	r1, r3
 800123a:	4b2e      	ldr	r3, [pc, #184]	; (80012f4 <main+0x12c>)
 800123c:	785b      	ldrb	r3, [r3, #1]
 800123e:	4618      	mov	r0, r3
 8001240:	4b2c      	ldr	r3, [pc, #176]	; (80012f4 <main+0x12c>)
 8001242:	789b      	ldrb	r3, [r3, #2]
 8001244:	461a      	mov	r2, r3
 8001246:	4b2b      	ldr	r3, [pc, #172]	; (80012f4 <main+0x12c>)
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	3bff      	subs	r3, #255	; 0xff
 800124c:	2b00      	cmp	r3, #0
 800124e:	bfb8      	it	lt
 8001250:	425b      	neglt	r3, r3
 8001252:	9301      	str	r3, [sp, #4]
 8001254:	9200      	str	r2, [sp, #0]
 8001256:	4603      	mov	r3, r0
 8001258:	460a      	mov	r2, r1
 800125a:	4929      	ldr	r1, [pc, #164]	; (8001300 <main+0x138>)
 800125c:	4829      	ldr	r0, [pc, #164]	; (8001304 <main+0x13c>)
 800125e:	f005 fd67 	bl	8006d30 <siprintf>

		// Transmit the string over UART
		HAL_UART_Transmit(&huart1, (uint8_t*) buffer, strlen(buffer), HAL_MAX_DELAY);
 8001262:	4828      	ldr	r0, [pc, #160]	; (8001304 <main+0x13c>)
 8001264:	f7fe ffbc 	bl	80001e0 <strlen>
 8001268:	4603      	mov	r3, r0
 800126a:	b29a      	uxth	r2, r3
 800126c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001270:	4924      	ldr	r1, [pc, #144]	; (8001304 <main+0x13c>)
 8001272:	4825      	ldr	r0, [pc, #148]	; (8001308 <main+0x140>)
 8001274:	f004 f8f9 	bl	800546a <HAL_UART_Transmit>
//	         // that means DMA conversion is completed
//	         if(adc_conv_complete_flag == 1){
//	  	  // this snprintf function helps to convert the adc_dma_result array
//	  	  // into string and store in dma_result_buffer character array

		 sprintf(dma_result_buffer, "CH_1: %d, CH_2: %.2f, CH_3: %.2f, CH_4: %d, CH5: %.2f, CH6: %.2f\r\n",adc_dma_result[0],V1.adc_result,V1.actual,adc_dma_result[1],I1.adc_result,I1.actual);
 8001278:	4b1c      	ldr	r3, [pc, #112]	; (80012ec <main+0x124>)
 800127a:	881b      	ldrh	r3, [r3, #0]
 800127c:	469c      	mov	ip, r3
 800127e:	4b23      	ldr	r3, [pc, #140]	; (800130c <main+0x144>)
 8001280:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001284:	4921      	ldr	r1, [pc, #132]	; (800130c <main+0x144>)
 8001286:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 800128a:	4c18      	ldr	r4, [pc, #96]	; (80012ec <main+0x124>)
 800128c:	8864      	ldrh	r4, [r4, #2]
 800128e:	607c      	str	r4, [r7, #4]
 8001290:	4c1f      	ldr	r4, [pc, #124]	; (8001310 <main+0x148>)
 8001292:	e9d4 4502 	ldrd	r4, r5, [r4, #8]
 8001296:	4e1e      	ldr	r6, [pc, #120]	; (8001310 <main+0x148>)
 8001298:	e9d6 8904 	ldrd	r8, r9, [r6, #16]
 800129c:	e9cd 8908 	strd	r8, r9, [sp, #32]
 80012a0:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80012a4:	687c      	ldr	r4, [r7, #4]
 80012a6:	9404      	str	r4, [sp, #16]
 80012a8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80012ac:	e9cd 2300 	strd	r2, r3, [sp]
 80012b0:	4662      	mov	r2, ip
 80012b2:	4918      	ldr	r1, [pc, #96]	; (8001314 <main+0x14c>)
 80012b4:	4818      	ldr	r0, [pc, #96]	; (8001318 <main+0x150>)
 80012b6:	f005 fd3b 	bl	8006d30 <siprintf>
//	  	  // we just send the dma_result_buffer character array with ADC values
//	  	  // to our computer serial terminal software (Tera Term) using UART peripheral of STM32
	  	  HAL_UART_Transmit(&huart1, (uint8_t *) dma_result_buffer, strlen(dma_result_buffer), HAL_MAX_DELAY);
 80012ba:	4817      	ldr	r0, [pc, #92]	; (8001318 <main+0x150>)
 80012bc:	f7fe ff90 	bl	80001e0 <strlen>
 80012c0:	4603      	mov	r3, r0
 80012c2:	b29a      	uxth	r2, r3
 80012c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80012c8:	4913      	ldr	r1, [pc, #76]	; (8001318 <main+0x150>)
 80012ca:	480f      	ldr	r0, [pc, #60]	; (8001308 <main+0x140>)
 80012cc:	f004 f8cd 	bl	800546a <HAL_UART_Transmit>
//	  	  // adc_conv_complete_flag variable is set to 0, because,
//	           // we alert this flag variable for new DMA conversion completion
//	  	 adc_conv_complete_flag = 0;
//	  	 HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
//	          // delay for 500 Milliseconds
	          HAL_Delay(50);
 80012d0:	2032      	movs	r0, #50	; 0x32
 80012d2:	f000 fe61 	bl	8001f98 <HAL_Delay>
	while (1) {
 80012d6:	e7a3      	b.n	8001220 <main+0x58>
 80012d8:	200004f0 	.word	0x200004f0
 80012dc:	20000460 	.word	0x20000460
 80012e0:	20000428 	.word	0x20000428
 80012e4:	200004b8 	.word	0x200004b8
 80012e8:	200002c4 	.word	0x200002c4
 80012ec:	20000368 	.word	0x20000368
 80012f0:	200001fc 	.word	0x200001fc
 80012f4:	20000350 	.word	0x20000350
 80012f8:	200002a4 	.word	0x200002a4
 80012fc:	20000364 	.word	0x20000364
 8001300:	08009238 	.word	0x08009238
 8001304:	200003d4 	.word	0x200003d4
 8001308:	2000030c 	.word	0x2000030c
 800130c:	20000408 	.word	0x20000408
 8001310:	20000498 	.word	0x20000498
 8001314:	08009258 	.word	0x08009258
 8001318:	20000370 	.word	0x20000370

0800131c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b094      	sub	sp, #80	; 0x50
 8001320:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001322:	f107 0320 	add.w	r3, r7, #32
 8001326:	2230      	movs	r2, #48	; 0x30
 8001328:	2100      	movs	r1, #0
 800132a:	4618      	mov	r0, r3
 800132c:	f005 f88e 	bl	800644c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001330:	f107 030c 	add.w	r3, r7, #12
 8001334:	2200      	movs	r2, #0
 8001336:	601a      	str	r2, [r3, #0]
 8001338:	605a      	str	r2, [r3, #4]
 800133a:	609a      	str	r2, [r3, #8]
 800133c:	60da      	str	r2, [r3, #12]
 800133e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001340:	2300      	movs	r3, #0
 8001342:	60bb      	str	r3, [r7, #8]
 8001344:	4b29      	ldr	r3, [pc, #164]	; (80013ec <SystemClock_Config+0xd0>)
 8001346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001348:	4a28      	ldr	r2, [pc, #160]	; (80013ec <SystemClock_Config+0xd0>)
 800134a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800134e:	6413      	str	r3, [r2, #64]	; 0x40
 8001350:	4b26      	ldr	r3, [pc, #152]	; (80013ec <SystemClock_Config+0xd0>)
 8001352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001354:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001358:	60bb      	str	r3, [r7, #8]
 800135a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800135c:	2300      	movs	r3, #0
 800135e:	607b      	str	r3, [r7, #4]
 8001360:	4b23      	ldr	r3, [pc, #140]	; (80013f0 <SystemClock_Config+0xd4>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001368:	4a21      	ldr	r2, [pc, #132]	; (80013f0 <SystemClock_Config+0xd4>)
 800136a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800136e:	6013      	str	r3, [r2, #0]
 8001370:	4b1f      	ldr	r3, [pc, #124]	; (80013f0 <SystemClock_Config+0xd4>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001378:	607b      	str	r3, [r7, #4]
 800137a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 800137c:	230a      	movs	r3, #10
 800137e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001380:	2301      	movs	r3, #1
 8001382:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001384:	2310      	movs	r3, #16
 8001386:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001388:	2301      	movs	r3, #1
 800138a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800138c:	2302      	movs	r3, #2
 800138e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001390:	2300      	movs	r3, #0
 8001392:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001394:	2308      	movs	r3, #8
 8001396:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8001398:	2354      	movs	r3, #84	; 0x54
 800139a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800139c:	2302      	movs	r3, #2
 800139e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80013a0:	2304      	movs	r3, #4
 80013a2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013a4:	f107 0320 	add.w	r3, r7, #32
 80013a8:	4618      	mov	r0, r3
 80013aa:	f002 fb87 	bl	8003abc <HAL_RCC_OscConfig>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d001      	beq.n	80013b8 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80013b4:	f000 fac6 	bl	8001944 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013b8:	230f      	movs	r3, #15
 80013ba:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013bc:	2302      	movs	r3, #2
 80013be:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013c0:	2300      	movs	r3, #0
 80013c2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80013c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013c8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013ca:	2300      	movs	r3, #0
 80013cc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80013ce:	f107 030c 	add.w	r3, r7, #12
 80013d2:	2102      	movs	r1, #2
 80013d4:	4618      	mov	r0, r3
 80013d6:	f002 fde9 	bl	8003fac <HAL_RCC_ClockConfig>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d001      	beq.n	80013e4 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80013e0:	f000 fab0 	bl	8001944 <Error_Handler>
  }
}
 80013e4:	bf00      	nop
 80013e6:	3750      	adds	r7, #80	; 0x50
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	40023800 	.word	0x40023800
 80013f0:	40007000 	.word	0x40007000

080013f4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b08c      	sub	sp, #48	; 0x30
 80013f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80013fa:	f107 0320 	add.w	r3, r7, #32
 80013fe:	2200      	movs	r2, #0
 8001400:	601a      	str	r2, [r3, #0]
 8001402:	605a      	str	r2, [r3, #4]
 8001404:	609a      	str	r2, [r3, #8]
 8001406:	60da      	str	r2, [r3, #12]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8001408:	463b      	mov	r3, r7
 800140a:	2220      	movs	r2, #32
 800140c:	2100      	movs	r1, #0
 800140e:	4618      	mov	r0, r3
 8001410:	f005 f81c 	bl	800644c <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001414:	4b3e      	ldr	r3, [pc, #248]	; (8001510 <MX_ADC1_Init+0x11c>)
 8001416:	4a3f      	ldr	r2, [pc, #252]	; (8001514 <MX_ADC1_Init+0x120>)
 8001418:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800141a:	4b3d      	ldr	r3, [pc, #244]	; (8001510 <MX_ADC1_Init+0x11c>)
 800141c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001420:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001422:	4b3b      	ldr	r3, [pc, #236]	; (8001510 <MX_ADC1_Init+0x11c>)
 8001424:	2200      	movs	r2, #0
 8001426:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001428:	4b39      	ldr	r3, [pc, #228]	; (8001510 <MX_ADC1_Init+0x11c>)
 800142a:	2201      	movs	r2, #1
 800142c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800142e:	4b38      	ldr	r3, [pc, #224]	; (8001510 <MX_ADC1_Init+0x11c>)
 8001430:	2201      	movs	r2, #1
 8001432:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001434:	4b36      	ldr	r3, [pc, #216]	; (8001510 <MX_ADC1_Init+0x11c>)
 8001436:	2200      	movs	r2, #0
 8001438:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800143c:	4b34      	ldr	r3, [pc, #208]	; (8001510 <MX_ADC1_Init+0x11c>)
 800143e:	2200      	movs	r2, #0
 8001440:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001442:	4b33      	ldr	r3, [pc, #204]	; (8001510 <MX_ADC1_Init+0x11c>)
 8001444:	4a34      	ldr	r2, [pc, #208]	; (8001518 <MX_ADC1_Init+0x124>)
 8001446:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001448:	4b31      	ldr	r3, [pc, #196]	; (8001510 <MX_ADC1_Init+0x11c>)
 800144a:	2200      	movs	r2, #0
 800144c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 800144e:	4b30      	ldr	r3, [pc, #192]	; (8001510 <MX_ADC1_Init+0x11c>)
 8001450:	2202      	movs	r2, #2
 8001452:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001454:	4b2e      	ldr	r3, [pc, #184]	; (8001510 <MX_ADC1_Init+0x11c>)
 8001456:	2201      	movs	r2, #1
 8001458:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800145c:	4b2c      	ldr	r3, [pc, #176]	; (8001510 <MX_ADC1_Init+0x11c>)
 800145e:	2201      	movs	r2, #1
 8001460:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001462:	482b      	ldr	r0, [pc, #172]	; (8001510 <MX_ADC1_Init+0x11c>)
 8001464:	f000 fdbc 	bl	8001fe0 <HAL_ADC_Init>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d001      	beq.n	8001472 <MX_ADC1_Init+0x7e>
  {
    Error_Handler();
 800146e:	f000 fa69 	bl	8001944 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001472:	2300      	movs	r3, #0
 8001474:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 1;
 8001476:	2301      	movs	r3, #1
 8001478:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 800147a:	2307      	movs	r3, #7
 800147c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800147e:	f107 0320 	add.w	r3, r7, #32
 8001482:	4619      	mov	r1, r3
 8001484:	4822      	ldr	r0, [pc, #136]	; (8001510 <MX_ADC1_Init+0x11c>)
 8001486:	f001 f80d 	bl	80024a4 <HAL_ADC_ConfigChannel>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	d001      	beq.n	8001494 <MX_ADC1_Init+0xa0>
  {
    Error_Handler();
 8001490:	f000 fa58 	bl	8001944 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001494:	2301      	movs	r3, #1
 8001496:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 2;
 8001498:	2302      	movs	r3, #2
 800149a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800149c:	f107 0320 	add.w	r3, r7, #32
 80014a0:	4619      	mov	r1, r3
 80014a2:	481b      	ldr	r0, [pc, #108]	; (8001510 <MX_ADC1_Init+0x11c>)
 80014a4:	f000 fffe 	bl	80024a4 <HAL_ADC_ConfigChannel>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d001      	beq.n	80014b2 <MX_ADC1_Init+0xbe>
  {
    Error_Handler();
 80014ae:	f000 fa49 	bl	8001944 <Error_Handler>
  }

  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_0;
 80014b2:	2300      	movs	r3, #0
 80014b4:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 1;
 80014b6:	2301      	movs	r3, #1
 80014b8:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedNbrOfConversion = 2;
 80014ba:	2302      	movs	r3, #2
 80014bc:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_480CYCLES;
 80014be:	2307      	movs	r3, #7
 80014c0:	60bb      	str	r3, [r7, #8]
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONVEDGE_NONE;
 80014c2:	2300      	movs	r3, #0
 80014c4:	61fb      	str	r3, [r7, #28]
  sConfigInjected.ExternalTrigInjecConv = ADC_INJECTED_SOFTWARE_START;
 80014c6:	4b15      	ldr	r3, [pc, #84]	; (800151c <MX_ADC1_Init+0x128>)
 80014c8:	61bb      	str	r3, [r7, #24]
  sConfigInjected.AutoInjectedConv = DISABLE;
 80014ca:	2300      	movs	r3, #0
 80014cc:	757b      	strb	r3, [r7, #21]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 80014ce:	2300      	movs	r3, #0
 80014d0:	753b      	strb	r3, [r7, #20]
  sConfigInjected.InjectedOffset = 0;
 80014d2:	2300      	movs	r3, #0
 80014d4:	60fb      	str	r3, [r7, #12]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 80014d6:	463b      	mov	r3, r7
 80014d8:	4619      	mov	r1, r3
 80014da:	480d      	ldr	r0, [pc, #52]	; (8001510 <MX_ADC1_Init+0x11c>)
 80014dc:	f001 fa8c 	bl	80029f8 <HAL_ADCEx_InjectedConfigChannel>
 80014e0:	4603      	mov	r3, r0
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d001      	beq.n	80014ea <MX_ADC1_Init+0xf6>
  {
    Error_Handler();
 80014e6:	f000 fa2d 	bl	8001944 <Error_Handler>
  }

  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_1;
 80014ea:	2301      	movs	r3, #1
 80014ec:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 2;
 80014ee:	2302      	movs	r3, #2
 80014f0:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 80014f2:	463b      	mov	r3, r7
 80014f4:	4619      	mov	r1, r3
 80014f6:	4806      	ldr	r0, [pc, #24]	; (8001510 <MX_ADC1_Init+0x11c>)
 80014f8:	f001 fa7e 	bl	80029f8 <HAL_ADCEx_InjectedConfigChannel>
 80014fc:	4603      	mov	r3, r0
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d001      	beq.n	8001506 <MX_ADC1_Init+0x112>
  {
    Error_Handler();
 8001502:	f000 fa1f 	bl	8001944 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001506:	bf00      	nop
 8001508:	3730      	adds	r7, #48	; 0x30
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	200001fc 	.word	0x200001fc
 8001514:	40012000 	.word	0x40012000
 8001518:	0f000001 	.word	0x0f000001
 800151c:	000f0001 	.word	0x000f0001

08001520 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b086      	sub	sp, #24
 8001524:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001526:	1d3b      	adds	r3, r7, #4
 8001528:	2200      	movs	r2, #0
 800152a:	601a      	str	r2, [r3, #0]
 800152c:	605a      	str	r2, [r3, #4]
 800152e:	609a      	str	r2, [r3, #8]
 8001530:	60da      	str	r2, [r3, #12]
 8001532:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001534:	2300      	movs	r3, #0
 8001536:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001538:	4b24      	ldr	r3, [pc, #144]	; (80015cc <MX_RTC_Init+0xac>)
 800153a:	4a25      	ldr	r2, [pc, #148]	; (80015d0 <MX_RTC_Init+0xb0>)
 800153c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800153e:	4b23      	ldr	r3, [pc, #140]	; (80015cc <MX_RTC_Init+0xac>)
 8001540:	2200      	movs	r2, #0
 8001542:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001544:	4b21      	ldr	r3, [pc, #132]	; (80015cc <MX_RTC_Init+0xac>)
 8001546:	227f      	movs	r2, #127	; 0x7f
 8001548:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800154a:	4b20      	ldr	r3, [pc, #128]	; (80015cc <MX_RTC_Init+0xac>)
 800154c:	22ff      	movs	r2, #255	; 0xff
 800154e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001550:	4b1e      	ldr	r3, [pc, #120]	; (80015cc <MX_RTC_Init+0xac>)
 8001552:	2200      	movs	r2, #0
 8001554:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001556:	4b1d      	ldr	r3, [pc, #116]	; (80015cc <MX_RTC_Init+0xac>)
 8001558:	2200      	movs	r2, #0
 800155a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800155c:	4b1b      	ldr	r3, [pc, #108]	; (80015cc <MX_RTC_Init+0xac>)
 800155e:	2200      	movs	r2, #0
 8001560:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001562:	481a      	ldr	r0, [pc, #104]	; (80015cc <MX_RTC_Init+0xac>)
 8001564:	f002 fff0 	bl	8004548 <HAL_RTC_Init>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	d001      	beq.n	8001572 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 800156e:	f000 f9e9 	bl	8001944 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001572:	2300      	movs	r3, #0
 8001574:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8001576:	2300      	movs	r3, #0
 8001578:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 800157a:	2300      	movs	r3, #0
 800157c:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800157e:	2300      	movs	r3, #0
 8001580:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001582:	2300      	movs	r3, #0
 8001584:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001586:	1d3b      	adds	r3, r7, #4
 8001588:	2201      	movs	r2, #1
 800158a:	4619      	mov	r1, r3
 800158c:	480f      	ldr	r0, [pc, #60]	; (80015cc <MX_RTC_Init+0xac>)
 800158e:	f003 f851 	bl	8004634 <HAL_RTC_SetTime>
 8001592:	4603      	mov	r3, r0
 8001594:	2b00      	cmp	r3, #0
 8001596:	d001      	beq.n	800159c <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8001598:	f000 f9d4 	bl	8001944 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800159c:	2301      	movs	r3, #1
 800159e:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 80015a0:	2301      	movs	r3, #1
 80015a2:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 80015a4:	2301      	movs	r3, #1
 80015a6:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 80015a8:	2300      	movs	r3, #0
 80015aa:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80015ac:	463b      	mov	r3, r7
 80015ae:	2201      	movs	r2, #1
 80015b0:	4619      	mov	r1, r3
 80015b2:	4806      	ldr	r0, [pc, #24]	; (80015cc <MX_RTC_Init+0xac>)
 80015b4:	f003 f936 	bl	8004824 <HAL_RTC_SetDate>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d001      	beq.n	80015c2 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 80015be:	f000 f9c1 	bl	8001944 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80015c2:	bf00      	nop
 80015c4:	3718      	adds	r7, #24
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	200002a4 	.word	0x200002a4
 80015d0:	40002800 	.word	0x40002800

080015d4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b086      	sub	sp, #24
 80015d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015da:	f107 0308 	add.w	r3, r7, #8
 80015de:	2200      	movs	r2, #0
 80015e0:	601a      	str	r2, [r3, #0]
 80015e2:	605a      	str	r2, [r3, #4]
 80015e4:	609a      	str	r2, [r3, #8]
 80015e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015e8:	463b      	mov	r3, r7
 80015ea:	2200      	movs	r2, #0
 80015ec:	601a      	str	r2, [r3, #0]
 80015ee:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80015f0:	4b1f      	ldr	r3, [pc, #124]	; (8001670 <MX_TIM1_Init+0x9c>)
 80015f2:	4a20      	ldr	r2, [pc, #128]	; (8001674 <MX_TIM1_Init+0xa0>)
 80015f4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 839;
 80015f6:	4b1e      	ldr	r3, [pc, #120]	; (8001670 <MX_TIM1_Init+0x9c>)
 80015f8:	f240 3247 	movw	r2, #839	; 0x347
 80015fc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015fe:	4b1c      	ldr	r3, [pc, #112]	; (8001670 <MX_TIM1_Init+0x9c>)
 8001600:	2200      	movs	r2, #0
 8001602:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 499;
 8001604:	4b1a      	ldr	r3, [pc, #104]	; (8001670 <MX_TIM1_Init+0x9c>)
 8001606:	f240 12f3 	movw	r2, #499	; 0x1f3
 800160a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800160c:	4b18      	ldr	r3, [pc, #96]	; (8001670 <MX_TIM1_Init+0x9c>)
 800160e:	2200      	movs	r2, #0
 8001610:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001612:	4b17      	ldr	r3, [pc, #92]	; (8001670 <MX_TIM1_Init+0x9c>)
 8001614:	2200      	movs	r2, #0
 8001616:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001618:	4b15      	ldr	r3, [pc, #84]	; (8001670 <MX_TIM1_Init+0x9c>)
 800161a:	2200      	movs	r2, #0
 800161c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800161e:	4814      	ldr	r0, [pc, #80]	; (8001670 <MX_TIM1_Init+0x9c>)
 8001620:	f003 fa90 	bl	8004b44 <HAL_TIM_Base_Init>
 8001624:	4603      	mov	r3, r0
 8001626:	2b00      	cmp	r3, #0
 8001628:	d001      	beq.n	800162e <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800162a:	f000 f98b 	bl	8001944 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800162e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001632:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001634:	f107 0308 	add.w	r3, r7, #8
 8001638:	4619      	mov	r1, r3
 800163a:	480d      	ldr	r0, [pc, #52]	; (8001670 <MX_TIM1_Init+0x9c>)
 800163c:	f003 fc3c 	bl	8004eb8 <HAL_TIM_ConfigClockSource>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d001      	beq.n	800164a <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8001646:	f000 f97d 	bl	8001944 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800164a:	2300      	movs	r3, #0
 800164c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800164e:	2300      	movs	r3, #0
 8001650:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001652:	463b      	mov	r3, r7
 8001654:	4619      	mov	r1, r3
 8001656:	4806      	ldr	r0, [pc, #24]	; (8001670 <MX_TIM1_Init+0x9c>)
 8001658:	f003 fe38 	bl	80052cc <HAL_TIMEx_MasterConfigSynchronization>
 800165c:	4603      	mov	r3, r0
 800165e:	2b00      	cmp	r3, #0
 8001660:	d001      	beq.n	8001666 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8001662:	f000 f96f 	bl	8001944 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001666:	bf00      	nop
 8001668:	3718      	adds	r7, #24
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	200002c4 	.word	0x200002c4
 8001674:	40010000 	.word	0x40010000

08001678 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800167c:	4b11      	ldr	r3, [pc, #68]	; (80016c4 <MX_USART1_UART_Init+0x4c>)
 800167e:	4a12      	ldr	r2, [pc, #72]	; (80016c8 <MX_USART1_UART_Init+0x50>)
 8001680:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 921600;
 8001682:	4b10      	ldr	r3, [pc, #64]	; (80016c4 <MX_USART1_UART_Init+0x4c>)
 8001684:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8001688:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800168a:	4b0e      	ldr	r3, [pc, #56]	; (80016c4 <MX_USART1_UART_Init+0x4c>)
 800168c:	2200      	movs	r2, #0
 800168e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001690:	4b0c      	ldr	r3, [pc, #48]	; (80016c4 <MX_USART1_UART_Init+0x4c>)
 8001692:	2200      	movs	r2, #0
 8001694:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001696:	4b0b      	ldr	r3, [pc, #44]	; (80016c4 <MX_USART1_UART_Init+0x4c>)
 8001698:	2200      	movs	r2, #0
 800169a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800169c:	4b09      	ldr	r3, [pc, #36]	; (80016c4 <MX_USART1_UART_Init+0x4c>)
 800169e:	220c      	movs	r2, #12
 80016a0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016a2:	4b08      	ldr	r3, [pc, #32]	; (80016c4 <MX_USART1_UART_Init+0x4c>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80016a8:	4b06      	ldr	r3, [pc, #24]	; (80016c4 <MX_USART1_UART_Init+0x4c>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80016ae:	4805      	ldr	r0, [pc, #20]	; (80016c4 <MX_USART1_UART_Init+0x4c>)
 80016b0:	f003 fe8e 	bl	80053d0 <HAL_UART_Init>
 80016b4:	4603      	mov	r3, r0
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d001      	beq.n	80016be <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80016ba:	f000 f943 	bl	8001944 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80016be:	bf00      	nop
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	2000030c 	.word	0x2000030c
 80016c8:	40011000 	.word	0x40011000

080016cc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b082      	sub	sp, #8
 80016d0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80016d2:	2300      	movs	r3, #0
 80016d4:	607b      	str	r3, [r7, #4]
 80016d6:	4b0c      	ldr	r3, [pc, #48]	; (8001708 <MX_DMA_Init+0x3c>)
 80016d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016da:	4a0b      	ldr	r2, [pc, #44]	; (8001708 <MX_DMA_Init+0x3c>)
 80016dc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80016e0:	6313      	str	r3, [r2, #48]	; 0x30
 80016e2:	4b09      	ldr	r3, [pc, #36]	; (8001708 <MX_DMA_Init+0x3c>)
 80016e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016ea:	607b      	str	r3, [r7, #4]
 80016ec:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80016ee:	2200      	movs	r2, #0
 80016f0:	2100      	movs	r1, #0
 80016f2:	2038      	movs	r0, #56	; 0x38
 80016f4:	f001 fbf1 	bl	8002eda <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80016f8:	2038      	movs	r0, #56	; 0x38
 80016fa:	f001 fc0a 	bl	8002f12 <HAL_NVIC_EnableIRQ>

}
 80016fe:	bf00      	nop
 8001700:	3708      	adds	r7, #8
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	40023800 	.word	0x40023800

0800170c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b088      	sub	sp, #32
 8001710:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001712:	f107 030c 	add.w	r3, r7, #12
 8001716:	2200      	movs	r2, #0
 8001718:	601a      	str	r2, [r3, #0]
 800171a:	605a      	str	r2, [r3, #4]
 800171c:	609a      	str	r2, [r3, #8]
 800171e:	60da      	str	r2, [r3, #12]
 8001720:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001722:	2300      	movs	r3, #0
 8001724:	60bb      	str	r3, [r7, #8]
 8001726:	4b19      	ldr	r3, [pc, #100]	; (800178c <MX_GPIO_Init+0x80>)
 8001728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800172a:	4a18      	ldr	r2, [pc, #96]	; (800178c <MX_GPIO_Init+0x80>)
 800172c:	f043 0304 	orr.w	r3, r3, #4
 8001730:	6313      	str	r3, [r2, #48]	; 0x30
 8001732:	4b16      	ldr	r3, [pc, #88]	; (800178c <MX_GPIO_Init+0x80>)
 8001734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001736:	f003 0304 	and.w	r3, r3, #4
 800173a:	60bb      	str	r3, [r7, #8]
 800173c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800173e:	2300      	movs	r3, #0
 8001740:	607b      	str	r3, [r7, #4]
 8001742:	4b12      	ldr	r3, [pc, #72]	; (800178c <MX_GPIO_Init+0x80>)
 8001744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001746:	4a11      	ldr	r2, [pc, #68]	; (800178c <MX_GPIO_Init+0x80>)
 8001748:	f043 0301 	orr.w	r3, r3, #1
 800174c:	6313      	str	r3, [r2, #48]	; 0x30
 800174e:	4b0f      	ldr	r3, [pc, #60]	; (800178c <MX_GPIO_Init+0x80>)
 8001750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001752:	f003 0301 	and.w	r3, r3, #1
 8001756:	607b      	str	r3, [r7, #4]
 8001758:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800175a:	2200      	movs	r2, #0
 800175c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001760:	480b      	ldr	r0, [pc, #44]	; (8001790 <MX_GPIO_Init+0x84>)
 8001762:	f002 f977 	bl	8003a54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001766:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800176a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800176c:	2301      	movs	r3, #1
 800176e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001770:	2300      	movs	r3, #0
 8001772:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001774:	2300      	movs	r3, #0
 8001776:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001778:	f107 030c 	add.w	r3, r7, #12
 800177c:	4619      	mov	r1, r3
 800177e:	4804      	ldr	r0, [pc, #16]	; (8001790 <MX_GPIO_Init+0x84>)
 8001780:	f001 ffe4 	bl	800374c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001784:	bf00      	nop
 8001786:	3720      	adds	r7, #32
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}
 800178c:	40023800 	.word	0x40023800
 8001790:	40020800 	.word	0x40020800
 8001794:	00000000 	.word	0x00000000

08001798 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8001798:	b580      	push	{r7, lr}
 800179a:	b082      	sub	sp, #8
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
	// I set adc_conv_complete_flag variable to 1 when,
	// HAL_ADC_ConvCpltCallback function is call.
		V1.average = addValue(&V1.ADC_MA, adc_dma_result[0]);
 80017a0:	4b2b      	ldr	r3, [pc, #172]	; (8001850 <HAL_ADC_ConvCpltCallback+0xb8>)
 80017a2:	881b      	ldrh	r3, [r3, #0]
 80017a4:	ee07 3a90 	vmov	s15, r3
 80017a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80017ac:	eeb0 0a67 	vmov.f32	s0, s15
 80017b0:	4828      	ldr	r0, [pc, #160]	; (8001854 <HAL_ADC_ConvCpltCallback+0xbc>)
 80017b2:	f7ff fc01 	bl	8000fb8 <addValue>
 80017b6:	eeb0 7a40 	vmov.f32	s14, s0
 80017ba:	eef0 7a60 	vmov.f32	s15, s1
 80017be:	4b26      	ldr	r3, [pc, #152]	; (8001858 <HAL_ADC_ConvCpltCallback+0xc0>)
 80017c0:	ed83 7b00 	vstr	d7, [r3]
		V1.adc_result = (V1.average / 4095.0) * 3.0;
 80017c4:	4b24      	ldr	r3, [pc, #144]	; (8001858 <HAL_ADC_ConvCpltCallback+0xc0>)
 80017c6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80017ca:	a31f      	add	r3, pc, #124	; (adr r3, 8001848 <HAL_ADC_ConvCpltCallback+0xb0>)
 80017cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017d0:	f7ff f844 	bl	800085c <__aeabi_ddiv>
 80017d4:	4602      	mov	r2, r0
 80017d6:	460b      	mov	r3, r1
 80017d8:	4610      	mov	r0, r2
 80017da:	4619      	mov	r1, r3
 80017dc:	f04f 0200 	mov.w	r2, #0
 80017e0:	4b1e      	ldr	r3, [pc, #120]	; (800185c <HAL_ADC_ConvCpltCallback+0xc4>)
 80017e2:	f7fe ff11 	bl	8000608 <__aeabi_dmul>
 80017e6:	4602      	mov	r2, r0
 80017e8:	460b      	mov	r3, r1
 80017ea:	491b      	ldr	r1, [pc, #108]	; (8001858 <HAL_ADC_ConvCpltCallback+0xc0>)
 80017ec:	e9c1 2302 	strd	r2, r3, [r1, #8]
		I1.average = addValue(&I1.ADC_MA, adc_dma_result[1]);
 80017f0:	4b17      	ldr	r3, [pc, #92]	; (8001850 <HAL_ADC_ConvCpltCallback+0xb8>)
 80017f2:	885b      	ldrh	r3, [r3, #2]
 80017f4:	ee07 3a90 	vmov	s15, r3
 80017f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80017fc:	eeb0 0a67 	vmov.f32	s0, s15
 8001800:	4817      	ldr	r0, [pc, #92]	; (8001860 <HAL_ADC_ConvCpltCallback+0xc8>)
 8001802:	f7ff fbd9 	bl	8000fb8 <addValue>
 8001806:	eeb0 7a40 	vmov.f32	s14, s0
 800180a:	eef0 7a60 	vmov.f32	s15, s1
 800180e:	4b15      	ldr	r3, [pc, #84]	; (8001864 <HAL_ADC_ConvCpltCallback+0xcc>)
 8001810:	ed83 7b00 	vstr	d7, [r3]
		I1.adc_result = (I1.average / 4095.0) * 3.0;
 8001814:	4b13      	ldr	r3, [pc, #76]	; (8001864 <HAL_ADC_ConvCpltCallback+0xcc>)
 8001816:	e9d3 0100 	ldrd	r0, r1, [r3]
 800181a:	a30b      	add	r3, pc, #44	; (adr r3, 8001848 <HAL_ADC_ConvCpltCallback+0xb0>)
 800181c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001820:	f7ff f81c 	bl	800085c <__aeabi_ddiv>
 8001824:	4602      	mov	r2, r0
 8001826:	460b      	mov	r3, r1
 8001828:	4610      	mov	r0, r2
 800182a:	4619      	mov	r1, r3
 800182c:	f04f 0200 	mov.w	r2, #0
 8001830:	4b0a      	ldr	r3, [pc, #40]	; (800185c <HAL_ADC_ConvCpltCallback+0xc4>)
 8001832:	f7fe fee9 	bl	8000608 <__aeabi_dmul>
 8001836:	4602      	mov	r2, r0
 8001838:	460b      	mov	r3, r1
 800183a:	490a      	ldr	r1, [pc, #40]	; (8001864 <HAL_ADC_ConvCpltCallback+0xcc>)
 800183c:	e9c1 2302 	strd	r2, r3, [r1, #8]

}
 8001840:	bf00      	nop
 8001842:	3708      	adds	r7, #8
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}
 8001848:	00000000 	.word	0x00000000
 800184c:	40affe00 	.word	0x40affe00
 8001850:	20000368 	.word	0x20000368
 8001854:	20000428 	.word	0x20000428
 8001858:	20000408 	.word	0x20000408
 800185c:	40080000 	.word	0x40080000
 8001860:	200004b8 	.word	0x200004b8
 8001864:	20000498 	.word	0x20000498

08001868 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) { //5ms
 8001868:	b580      	push	{r7, lr}
 800186a:	b082      	sub	sp, #8
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]

	static uint8_t count;
	count++;
 8001870:	4b2e      	ldr	r3, [pc, #184]	; (800192c <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8001872:	781b      	ldrb	r3, [r3, #0]
 8001874:	3301      	adds	r3, #1
 8001876:	b2da      	uxtb	r2, r3
 8001878:	4b2c      	ldr	r3, [pc, #176]	; (800192c <HAL_TIM_PeriodElapsedCallback+0xc4>)
 800187a:	701a      	strb	r2, [r3, #0]
	I1.raw= v_to_c(I1.adc_result);
 800187c:	4b2c      	ldr	r3, [pc, #176]	; (8001930 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 800187e:	ed93 7b02 	vldr	d7, [r3, #8]
 8001882:	eeb0 0a47 	vmov.f32	s0, s14
 8001886:	eef0 0a67 	vmov.f32	s1, s15
 800188a:	f7ff fbfd 	bl	8001088 <v_to_c>
 800188e:	eeb0 7a40 	vmov.f32	s14, s0
 8001892:	eef0 7a60 	vmov.f32	s15, s1
 8001896:	4b26      	ldr	r3, [pc, #152]	; (8001930 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8001898:	ed83 7b06 	vstr	d7, [r3, #24]
	V1.raw=v_to_v(V1.adc_result);
 800189c:	4b25      	ldr	r3, [pc, #148]	; (8001934 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 800189e:	ed93 7b02 	vldr	d7, [r3, #8]
 80018a2:	eeb0 0a47 	vmov.f32	s0, s14
 80018a6:	eef0 0a67 	vmov.f32	s1, s15
 80018aa:	f7ff fc5d 	bl	8001168 <v_to_v>
 80018ae:	eeb0 7a40 	vmov.f32	s14, s0
 80018b2:	eef0 7a60 	vmov.f32	s15, s1
 80018b6:	4b1f      	ldr	r3, [pc, #124]	; (8001934 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 80018b8:	ed83 7b06 	vstr	d7, [r3, #24]
	V1.actual=addValue(&V1.OUTPUT_MA, V1.raw);
 80018bc:	4b1d      	ldr	r3, [pc, #116]	; (8001934 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 80018be:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80018c2:	4610      	mov	r0, r2
 80018c4:	4619      	mov	r1, r3
 80018c6:	f7ff f977 	bl	8000bb8 <__aeabi_d2f>
 80018ca:	4603      	mov	r3, r0
 80018cc:	ee00 3a10 	vmov	s0, r3
 80018d0:	4819      	ldr	r0, [pc, #100]	; (8001938 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 80018d2:	f7ff fb71 	bl	8000fb8 <addValue>
 80018d6:	eeb0 7a40 	vmov.f32	s14, s0
 80018da:	eef0 7a60 	vmov.f32	s15, s1
 80018de:	4b15      	ldr	r3, [pc, #84]	; (8001934 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 80018e0:	ed83 7b04 	vstr	d7, [r3, #16]
	I1.actual = addValue(&I1.OUTPUT_MA, I1.raw);
 80018e4:	4b12      	ldr	r3, [pc, #72]	; (8001930 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 80018e6:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80018ea:	4610      	mov	r0, r2
 80018ec:	4619      	mov	r1, r3
 80018ee:	f7ff f963 	bl	8000bb8 <__aeabi_d2f>
 80018f2:	4603      	mov	r3, r0
 80018f4:	ee00 3a10 	vmov	s0, r3
 80018f8:	4810      	ldr	r0, [pc, #64]	; (800193c <HAL_TIM_PeriodElapsedCallback+0xd4>)
 80018fa:	f7ff fb5d 	bl	8000fb8 <addValue>
 80018fe:	eeb0 7a40 	vmov.f32	s14, s0
 8001902:	eef0 7a60 	vmov.f32	s15, s1
 8001906:	4b0a      	ldr	r3, [pc, #40]	; (8001930 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8001908:	ed83 7b04 	vstr	d7, [r3, #16]

	if (count >= 200) {
 800190c:	4b07      	ldr	r3, [pc, #28]	; (800192c <HAL_TIM_PeriodElapsedCallback+0xc4>)
 800190e:	781b      	ldrb	r3, [r3, #0]
 8001910:	2bc7      	cmp	r3, #199	; 0xc7
 8001912:	d907      	bls.n	8001924 <HAL_TIM_PeriodElapsedCallback+0xbc>
//		adc_count2=adc_count;
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001914:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001918:	4809      	ldr	r0, [pc, #36]	; (8001940 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 800191a:	f002 f8b4 	bl	8003a86 <HAL_GPIO_TogglePin>
//		adc_count=0;
		count = 0;
 800191e:	4b03      	ldr	r3, [pc, #12]	; (800192c <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8001920:	2200      	movs	r2, #0
 8001922:	701a      	strb	r2, [r3, #0]
//	adc_dma_result[0]+=3;
//	adc_dma_result[1]+=2;
//	adc_dma_result[2]++;
//		adc_dma_result[3]+=5;

}
 8001924:	bf00      	nop
 8001926:	3708      	adds	r7, #8
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}
 800192c:	20000528 	.word	0x20000528
 8001930:	20000498 	.word	0x20000498
 8001934:	20000408 	.word	0x20000408
 8001938:	20000460 	.word	0x20000460
 800193c:	200004f0 	.word	0x200004f0
 8001940:	40020800 	.word	0x40020800

08001944 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001944:	b480      	push	{r7}
 8001946:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001948:	b672      	cpsid	i
}
 800194a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800194c:	e7fe      	b.n	800194c <Error_Handler+0x8>
	...

08001950 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001950:	b480      	push	{r7}
 8001952:	b083      	sub	sp, #12
 8001954:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001956:	2300      	movs	r3, #0
 8001958:	607b      	str	r3, [r7, #4]
 800195a:	4b10      	ldr	r3, [pc, #64]	; (800199c <HAL_MspInit+0x4c>)
 800195c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800195e:	4a0f      	ldr	r2, [pc, #60]	; (800199c <HAL_MspInit+0x4c>)
 8001960:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001964:	6453      	str	r3, [r2, #68]	; 0x44
 8001966:	4b0d      	ldr	r3, [pc, #52]	; (800199c <HAL_MspInit+0x4c>)
 8001968:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800196a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800196e:	607b      	str	r3, [r7, #4]
 8001970:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001972:	2300      	movs	r3, #0
 8001974:	603b      	str	r3, [r7, #0]
 8001976:	4b09      	ldr	r3, [pc, #36]	; (800199c <HAL_MspInit+0x4c>)
 8001978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800197a:	4a08      	ldr	r2, [pc, #32]	; (800199c <HAL_MspInit+0x4c>)
 800197c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001980:	6413      	str	r3, [r2, #64]	; 0x40
 8001982:	4b06      	ldr	r3, [pc, #24]	; (800199c <HAL_MspInit+0x4c>)
 8001984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001986:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800198a:	603b      	str	r3, [r7, #0]
 800198c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800198e:	bf00      	nop
 8001990:	370c      	adds	r7, #12
 8001992:	46bd      	mov	sp, r7
 8001994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001998:	4770      	bx	lr
 800199a:	bf00      	nop
 800199c:	40023800 	.word	0x40023800

080019a0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b08a      	sub	sp, #40	; 0x28
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019a8:	f107 0314 	add.w	r3, r7, #20
 80019ac:	2200      	movs	r2, #0
 80019ae:	601a      	str	r2, [r3, #0]
 80019b0:	605a      	str	r2, [r3, #4]
 80019b2:	609a      	str	r2, [r3, #8]
 80019b4:	60da      	str	r2, [r3, #12]
 80019b6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a33      	ldr	r2, [pc, #204]	; (8001a8c <HAL_ADC_MspInit+0xec>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d15f      	bne.n	8001a82 <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80019c2:	2300      	movs	r3, #0
 80019c4:	613b      	str	r3, [r7, #16]
 80019c6:	4b32      	ldr	r3, [pc, #200]	; (8001a90 <HAL_ADC_MspInit+0xf0>)
 80019c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ca:	4a31      	ldr	r2, [pc, #196]	; (8001a90 <HAL_ADC_MspInit+0xf0>)
 80019cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019d0:	6453      	str	r3, [r2, #68]	; 0x44
 80019d2:	4b2f      	ldr	r3, [pc, #188]	; (8001a90 <HAL_ADC_MspInit+0xf0>)
 80019d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019da:	613b      	str	r3, [r7, #16]
 80019dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019de:	2300      	movs	r3, #0
 80019e0:	60fb      	str	r3, [r7, #12]
 80019e2:	4b2b      	ldr	r3, [pc, #172]	; (8001a90 <HAL_ADC_MspInit+0xf0>)
 80019e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e6:	4a2a      	ldr	r2, [pc, #168]	; (8001a90 <HAL_ADC_MspInit+0xf0>)
 80019e8:	f043 0301 	orr.w	r3, r3, #1
 80019ec:	6313      	str	r3, [r2, #48]	; 0x30
 80019ee:	4b28      	ldr	r3, [pc, #160]	; (8001a90 <HAL_ADC_MspInit+0xf0>)
 80019f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f2:	f003 0301 	and.w	r3, r3, #1
 80019f6:	60fb      	str	r3, [r7, #12]
 80019f8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80019fa:	2303      	movs	r3, #3
 80019fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019fe:	2303      	movs	r3, #3
 8001a00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a02:	2300      	movs	r3, #0
 8001a04:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a06:	f107 0314 	add.w	r3, r7, #20
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	4821      	ldr	r0, [pc, #132]	; (8001a94 <HAL_ADC_MspInit+0xf4>)
 8001a0e:	f001 fe9d 	bl	800374c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001a12:	4b21      	ldr	r3, [pc, #132]	; (8001a98 <HAL_ADC_MspInit+0xf8>)
 8001a14:	4a21      	ldr	r2, [pc, #132]	; (8001a9c <HAL_ADC_MspInit+0xfc>)
 8001a16:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001a18:	4b1f      	ldr	r3, [pc, #124]	; (8001a98 <HAL_ADC_MspInit+0xf8>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001a1e:	4b1e      	ldr	r3, [pc, #120]	; (8001a98 <HAL_ADC_MspInit+0xf8>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a24:	4b1c      	ldr	r3, [pc, #112]	; (8001a98 <HAL_ADC_MspInit+0xf8>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001a2a:	4b1b      	ldr	r3, [pc, #108]	; (8001a98 <HAL_ADC_MspInit+0xf8>)
 8001a2c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a30:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001a32:	4b19      	ldr	r3, [pc, #100]	; (8001a98 <HAL_ADC_MspInit+0xf8>)
 8001a34:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001a38:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001a3a:	4b17      	ldr	r3, [pc, #92]	; (8001a98 <HAL_ADC_MspInit+0xf8>)
 8001a3c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a40:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001a42:	4b15      	ldr	r3, [pc, #84]	; (8001a98 <HAL_ADC_MspInit+0xf8>)
 8001a44:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a48:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001a4a:	4b13      	ldr	r3, [pc, #76]	; (8001a98 <HAL_ADC_MspInit+0xf8>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001a50:	4b11      	ldr	r3, [pc, #68]	; (8001a98 <HAL_ADC_MspInit+0xf8>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001a56:	4810      	ldr	r0, [pc, #64]	; (8001a98 <HAL_ADC_MspInit+0xf8>)
 8001a58:	f001 fa76 	bl	8002f48 <HAL_DMA_Init>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d001      	beq.n	8001a66 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8001a62:	f7ff ff6f 	bl	8001944 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	4a0b      	ldr	r2, [pc, #44]	; (8001a98 <HAL_ADC_MspInit+0xf8>)
 8001a6a:	639a      	str	r2, [r3, #56]	; 0x38
 8001a6c:	4a0a      	ldr	r2, [pc, #40]	; (8001a98 <HAL_ADC_MspInit+0xf8>)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001a72:	2200      	movs	r2, #0
 8001a74:	2100      	movs	r1, #0
 8001a76:	2012      	movs	r0, #18
 8001a78:	f001 fa2f 	bl	8002eda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001a7c:	2012      	movs	r0, #18
 8001a7e:	f001 fa48 	bl	8002f12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001a82:	bf00      	nop
 8001a84:	3728      	adds	r7, #40	; 0x28
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	40012000 	.word	0x40012000
 8001a90:	40023800 	.word	0x40023800
 8001a94:	40020000 	.word	0x40020000
 8001a98:	20000244 	.word	0x20000244
 8001a9c:	40026410 	.word	0x40026410

08001aa0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b088      	sub	sp, #32
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001aa8:	f107 030c 	add.w	r3, r7, #12
 8001aac:	2200      	movs	r2, #0
 8001aae:	601a      	str	r2, [r3, #0]
 8001ab0:	605a      	str	r2, [r3, #4]
 8001ab2:	609a      	str	r2, [r3, #8]
 8001ab4:	60da      	str	r2, [r3, #12]
 8001ab6:	611a      	str	r2, [r3, #16]
  if(hrtc->Instance==RTC)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a0c      	ldr	r2, [pc, #48]	; (8001af0 <HAL_RTC_MspInit+0x50>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d111      	bne.n	8001ae6 <HAL_RTC_MspInit+0x46>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001ac2:	2302      	movs	r3, #2
 8001ac4:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001ac6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001aca:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001acc:	f107 030c 	add.w	r3, r7, #12
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f002 fc4b 	bl	800436c <HAL_RCCEx_PeriphCLKConfig>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d001      	beq.n	8001ae0 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8001adc:	f7ff ff32 	bl	8001944 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001ae0:	4b04      	ldr	r3, [pc, #16]	; (8001af4 <HAL_RTC_MspInit+0x54>)
 8001ae2:	2201      	movs	r2, #1
 8001ae4:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001ae6:	bf00      	nop
 8001ae8:	3720      	adds	r7, #32
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	40002800 	.word	0x40002800
 8001af4:	42470e3c 	.word	0x42470e3c

08001af8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b084      	sub	sp, #16
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a12      	ldr	r2, [pc, #72]	; (8001b50 <HAL_TIM_Base_MspInit+0x58>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d11d      	bne.n	8001b46 <HAL_TIM_Base_MspInit+0x4e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	60fb      	str	r3, [r7, #12]
 8001b0e:	4b11      	ldr	r3, [pc, #68]	; (8001b54 <HAL_TIM_Base_MspInit+0x5c>)
 8001b10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b12:	4a10      	ldr	r2, [pc, #64]	; (8001b54 <HAL_TIM_Base_MspInit+0x5c>)
 8001b14:	f043 0301 	orr.w	r3, r3, #1
 8001b18:	6453      	str	r3, [r2, #68]	; 0x44
 8001b1a:	4b0e      	ldr	r3, [pc, #56]	; (8001b54 <HAL_TIM_Base_MspInit+0x5c>)
 8001b1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b1e:	f003 0301 	and.w	r3, r3, #1
 8001b22:	60fb      	str	r3, [r7, #12]
 8001b24:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8001b26:	2200      	movs	r2, #0
 8001b28:	2100      	movs	r1, #0
 8001b2a:	2018      	movs	r0, #24
 8001b2c:	f001 f9d5 	bl	8002eda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001b30:	2018      	movs	r0, #24
 8001b32:	f001 f9ee 	bl	8002f12 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001b36:	2200      	movs	r2, #0
 8001b38:	2100      	movs	r1, #0
 8001b3a:	2019      	movs	r0, #25
 8001b3c:	f001 f9cd 	bl	8002eda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001b40:	2019      	movs	r0, #25
 8001b42:	f001 f9e6 	bl	8002f12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001b46:	bf00      	nop
 8001b48:	3710      	adds	r7, #16
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	40010000 	.word	0x40010000
 8001b54:	40023800 	.word	0x40023800

08001b58 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b08a      	sub	sp, #40	; 0x28
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b60:	f107 0314 	add.w	r3, r7, #20
 8001b64:	2200      	movs	r2, #0
 8001b66:	601a      	str	r2, [r3, #0]
 8001b68:	605a      	str	r2, [r3, #4]
 8001b6a:	609a      	str	r2, [r3, #8]
 8001b6c:	60da      	str	r2, [r3, #12]
 8001b6e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a1d      	ldr	r2, [pc, #116]	; (8001bec <HAL_UART_MspInit+0x94>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d134      	bne.n	8001be4 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	613b      	str	r3, [r7, #16]
 8001b7e:	4b1c      	ldr	r3, [pc, #112]	; (8001bf0 <HAL_UART_MspInit+0x98>)
 8001b80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b82:	4a1b      	ldr	r2, [pc, #108]	; (8001bf0 <HAL_UART_MspInit+0x98>)
 8001b84:	f043 0310 	orr.w	r3, r3, #16
 8001b88:	6453      	str	r3, [r2, #68]	; 0x44
 8001b8a:	4b19      	ldr	r3, [pc, #100]	; (8001bf0 <HAL_UART_MspInit+0x98>)
 8001b8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b8e:	f003 0310 	and.w	r3, r3, #16
 8001b92:	613b      	str	r3, [r7, #16]
 8001b94:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b96:	2300      	movs	r3, #0
 8001b98:	60fb      	str	r3, [r7, #12]
 8001b9a:	4b15      	ldr	r3, [pc, #84]	; (8001bf0 <HAL_UART_MspInit+0x98>)
 8001b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b9e:	4a14      	ldr	r2, [pc, #80]	; (8001bf0 <HAL_UART_MspInit+0x98>)
 8001ba0:	f043 0301 	orr.w	r3, r3, #1
 8001ba4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ba6:	4b12      	ldr	r3, [pc, #72]	; (8001bf0 <HAL_UART_MspInit+0x98>)
 8001ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001baa:	f003 0301 	and.w	r3, r3, #1
 8001bae:	60fb      	str	r3, [r7, #12]
 8001bb0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001bb2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001bb6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bb8:	2302      	movs	r3, #2
 8001bba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bc0:	2303      	movs	r3, #3
 8001bc2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001bc4:	2307      	movs	r3, #7
 8001bc6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bc8:	f107 0314 	add.w	r3, r7, #20
 8001bcc:	4619      	mov	r1, r3
 8001bce:	4809      	ldr	r0, [pc, #36]	; (8001bf4 <HAL_UART_MspInit+0x9c>)
 8001bd0:	f001 fdbc 	bl	800374c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	2100      	movs	r1, #0
 8001bd8:	2025      	movs	r0, #37	; 0x25
 8001bda:	f001 f97e 	bl	8002eda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001bde:	2025      	movs	r0, #37	; 0x25
 8001be0:	f001 f997 	bl	8002f12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001be4:	bf00      	nop
 8001be6:	3728      	adds	r7, #40	; 0x28
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}
 8001bec:	40011000 	.word	0x40011000
 8001bf0:	40023800 	.word	0x40023800
 8001bf4:	40020000 	.word	0x40020000

08001bf8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001bfc:	e7fe      	b.n	8001bfc <NMI_Handler+0x4>

08001bfe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bfe:	b480      	push	{r7}
 8001c00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c02:	e7fe      	b.n	8001c02 <HardFault_Handler+0x4>

08001c04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c04:	b480      	push	{r7}
 8001c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c08:	e7fe      	b.n	8001c08 <MemManage_Handler+0x4>

08001c0a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c0a:	b480      	push	{r7}
 8001c0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c0e:	e7fe      	b.n	8001c0e <BusFault_Handler+0x4>

08001c10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c10:	b480      	push	{r7}
 8001c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c14:	e7fe      	b.n	8001c14 <UsageFault_Handler+0x4>

08001c16 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c16:	b480      	push	{r7}
 8001c18:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c1a:	bf00      	nop
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c22:	4770      	bx	lr

08001c24 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c24:	b480      	push	{r7}
 8001c26:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c28:	bf00      	nop
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c30:	4770      	bx	lr

08001c32 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c32:	b480      	push	{r7}
 8001c34:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c36:	bf00      	nop
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3e:	4770      	bx	lr

08001c40 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c44:	f000 f988 	bl	8001f58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c48:	bf00      	nop
 8001c4a:	bd80      	pop	{r7, pc}

08001c4c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001c50:	4802      	ldr	r0, [pc, #8]	; (8001c5c <ADC_IRQHandler+0x10>)
 8001c52:	f000 fa08 	bl	8002066 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001c56:	bf00      	nop
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	200001fc 	.word	0x200001fc

08001c60 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001c64:	4802      	ldr	r0, [pc, #8]	; (8001c70 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8001c66:	f003 f81f 	bl	8004ca8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8001c6a:	bf00      	nop
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	200002c4 	.word	0x200002c4

08001c74 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001c78:	4802      	ldr	r0, [pc, #8]	; (8001c84 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001c7a:	f003 f815 	bl	8004ca8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001c7e:	bf00      	nop
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	bf00      	nop
 8001c84:	200002c4 	.word	0x200002c4

08001c88 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001c8c:	4802      	ldr	r0, [pc, #8]	; (8001c98 <USART1_IRQHandler+0x10>)
 8001c8e:	f003 fc7f 	bl	8005590 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001c92:	bf00      	nop
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	2000030c 	.word	0x2000030c

08001c9c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001ca0:	4802      	ldr	r0, [pc, #8]	; (8001cac <DMA2_Stream0_IRQHandler+0x10>)
 8001ca2:	f001 fae9 	bl	8003278 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001ca6:	bf00      	nop
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	20000244 	.word	0x20000244

08001cb0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	af00      	add	r7, sp, #0
  return 1;
 8001cb4:	2301      	movs	r3, #1
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbe:	4770      	bx	lr

08001cc0 <_kill>:

int _kill(int pid, int sig)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b082      	sub	sp, #8
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
 8001cc8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001cca:	f004 fb95 	bl	80063f8 <__errno>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	2216      	movs	r2, #22
 8001cd2:	601a      	str	r2, [r3, #0]
  return -1;
 8001cd4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001cd8:	4618      	mov	r0, r3
 8001cda:	3708      	adds	r7, #8
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bd80      	pop	{r7, pc}

08001ce0 <_exit>:

void _exit (int status)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b082      	sub	sp, #8
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001ce8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001cec:	6878      	ldr	r0, [r7, #4]
 8001cee:	f7ff ffe7 	bl	8001cc0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001cf2:	e7fe      	b.n	8001cf2 <_exit+0x12>

08001cf4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b086      	sub	sp, #24
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	60f8      	str	r0, [r7, #12]
 8001cfc:	60b9      	str	r1, [r7, #8]
 8001cfe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d00:	2300      	movs	r3, #0
 8001d02:	617b      	str	r3, [r7, #20]
 8001d04:	e00a      	b.n	8001d1c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001d06:	f3af 8000 	nop.w
 8001d0a:	4601      	mov	r1, r0
 8001d0c:	68bb      	ldr	r3, [r7, #8]
 8001d0e:	1c5a      	adds	r2, r3, #1
 8001d10:	60ba      	str	r2, [r7, #8]
 8001d12:	b2ca      	uxtb	r2, r1
 8001d14:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d16:	697b      	ldr	r3, [r7, #20]
 8001d18:	3301      	adds	r3, #1
 8001d1a:	617b      	str	r3, [r7, #20]
 8001d1c:	697a      	ldr	r2, [r7, #20]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	429a      	cmp	r2, r3
 8001d22:	dbf0      	blt.n	8001d06 <_read+0x12>
  }

  return len;
 8001d24:	687b      	ldr	r3, [r7, #4]
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	3718      	adds	r7, #24
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}

08001d2e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001d2e:	b580      	push	{r7, lr}
 8001d30:	b086      	sub	sp, #24
 8001d32:	af00      	add	r7, sp, #0
 8001d34:	60f8      	str	r0, [r7, #12]
 8001d36:	60b9      	str	r1, [r7, #8]
 8001d38:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	617b      	str	r3, [r7, #20]
 8001d3e:	e009      	b.n	8001d54 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001d40:	68bb      	ldr	r3, [r7, #8]
 8001d42:	1c5a      	adds	r2, r3, #1
 8001d44:	60ba      	str	r2, [r7, #8]
 8001d46:	781b      	ldrb	r3, [r3, #0]
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d4e:	697b      	ldr	r3, [r7, #20]
 8001d50:	3301      	adds	r3, #1
 8001d52:	617b      	str	r3, [r7, #20]
 8001d54:	697a      	ldr	r2, [r7, #20]
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	429a      	cmp	r2, r3
 8001d5a:	dbf1      	blt.n	8001d40 <_write+0x12>
  }
  return len;
 8001d5c:	687b      	ldr	r3, [r7, #4]
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	3718      	adds	r7, #24
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}

08001d66 <_close>:

int _close(int file)
{
 8001d66:	b480      	push	{r7}
 8001d68:	b083      	sub	sp, #12
 8001d6a:	af00      	add	r7, sp, #0
 8001d6c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001d6e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001d72:	4618      	mov	r0, r3
 8001d74:	370c      	adds	r7, #12
 8001d76:	46bd      	mov	sp, r7
 8001d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7c:	4770      	bx	lr

08001d7e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d7e:	b480      	push	{r7}
 8001d80:	b083      	sub	sp, #12
 8001d82:	af00      	add	r7, sp, #0
 8001d84:	6078      	str	r0, [r7, #4]
 8001d86:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d8e:	605a      	str	r2, [r3, #4]
  return 0;
 8001d90:	2300      	movs	r3, #0
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	370c      	adds	r7, #12
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr

08001d9e <_isatty>:

int _isatty(int file)
{
 8001d9e:	b480      	push	{r7}
 8001da0:	b083      	sub	sp, #12
 8001da2:	af00      	add	r7, sp, #0
 8001da4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001da6:	2301      	movs	r3, #1
}
 8001da8:	4618      	mov	r0, r3
 8001daa:	370c      	adds	r7, #12
 8001dac:	46bd      	mov	sp, r7
 8001dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db2:	4770      	bx	lr

08001db4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b085      	sub	sp, #20
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	60f8      	str	r0, [r7, #12]
 8001dbc:	60b9      	str	r1, [r7, #8]
 8001dbe:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001dc0:	2300      	movs	r3, #0
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	3714      	adds	r7, #20
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dcc:	4770      	bx	lr
	...

08001dd0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b086      	sub	sp, #24
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001dd8:	4a14      	ldr	r2, [pc, #80]	; (8001e2c <_sbrk+0x5c>)
 8001dda:	4b15      	ldr	r3, [pc, #84]	; (8001e30 <_sbrk+0x60>)
 8001ddc:	1ad3      	subs	r3, r2, r3
 8001dde:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001de4:	4b13      	ldr	r3, [pc, #76]	; (8001e34 <_sbrk+0x64>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d102      	bne.n	8001df2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001dec:	4b11      	ldr	r3, [pc, #68]	; (8001e34 <_sbrk+0x64>)
 8001dee:	4a12      	ldr	r2, [pc, #72]	; (8001e38 <_sbrk+0x68>)
 8001df0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001df2:	4b10      	ldr	r3, [pc, #64]	; (8001e34 <_sbrk+0x64>)
 8001df4:	681a      	ldr	r2, [r3, #0]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	4413      	add	r3, r2
 8001dfa:	693a      	ldr	r2, [r7, #16]
 8001dfc:	429a      	cmp	r2, r3
 8001dfe:	d207      	bcs.n	8001e10 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e00:	f004 fafa 	bl	80063f8 <__errno>
 8001e04:	4603      	mov	r3, r0
 8001e06:	220c      	movs	r2, #12
 8001e08:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e0a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001e0e:	e009      	b.n	8001e24 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e10:	4b08      	ldr	r3, [pc, #32]	; (8001e34 <_sbrk+0x64>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e16:	4b07      	ldr	r3, [pc, #28]	; (8001e34 <_sbrk+0x64>)
 8001e18:	681a      	ldr	r2, [r3, #0]
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	4413      	add	r3, r2
 8001e1e:	4a05      	ldr	r2, [pc, #20]	; (8001e34 <_sbrk+0x64>)
 8001e20:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e22:	68fb      	ldr	r3, [r7, #12]
}
 8001e24:	4618      	mov	r0, r3
 8001e26:	3718      	adds	r7, #24
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}
 8001e2c:	20010000 	.word	0x20010000
 8001e30:	00000400 	.word	0x00000400
 8001e34:	2000052c 	.word	0x2000052c
 8001e38:	20000548 	.word	0x20000548

08001e3c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e40:	4b06      	ldr	r3, [pc, #24]	; (8001e5c <SystemInit+0x20>)
 8001e42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e46:	4a05      	ldr	r2, [pc, #20]	; (8001e5c <SystemInit+0x20>)
 8001e48:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e4c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e50:	bf00      	nop
 8001e52:	46bd      	mov	sp, r7
 8001e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e58:	4770      	bx	lr
 8001e5a:	bf00      	nop
 8001e5c:	e000ed00 	.word	0xe000ed00

08001e60 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001e60:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e98 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001e64:	480d      	ldr	r0, [pc, #52]	; (8001e9c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001e66:	490e      	ldr	r1, [pc, #56]	; (8001ea0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001e68:	4a0e      	ldr	r2, [pc, #56]	; (8001ea4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001e6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e6c:	e002      	b.n	8001e74 <LoopCopyDataInit>

08001e6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e72:	3304      	adds	r3, #4

08001e74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e78:	d3f9      	bcc.n	8001e6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e7a:	4a0b      	ldr	r2, [pc, #44]	; (8001ea8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001e7c:	4c0b      	ldr	r4, [pc, #44]	; (8001eac <LoopFillZerobss+0x26>)
  movs r3, #0
 8001e7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e80:	e001      	b.n	8001e86 <LoopFillZerobss>

08001e82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e84:	3204      	adds	r2, #4

08001e86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e88:	d3fb      	bcc.n	8001e82 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001e8a:	f7ff ffd7 	bl	8001e3c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e8e:	f004 fab9 	bl	8006404 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e92:	f7ff f999 	bl	80011c8 <main>
  bx  lr    
 8001e96:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001e98:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001e9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ea0:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001ea4:	080096a4 	.word	0x080096a4
  ldr r2, =_sbss
 8001ea8:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001eac:	20000544 	.word	0x20000544

08001eb0 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001eb0:	e7fe      	b.n	8001eb0 <DMA1_Stream0_IRQHandler>
	...

08001eb4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001eb8:	4b0e      	ldr	r3, [pc, #56]	; (8001ef4 <HAL_Init+0x40>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a0d      	ldr	r2, [pc, #52]	; (8001ef4 <HAL_Init+0x40>)
 8001ebe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ec2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ec4:	4b0b      	ldr	r3, [pc, #44]	; (8001ef4 <HAL_Init+0x40>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a0a      	ldr	r2, [pc, #40]	; (8001ef4 <HAL_Init+0x40>)
 8001eca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ece:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ed0:	4b08      	ldr	r3, [pc, #32]	; (8001ef4 <HAL_Init+0x40>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a07      	ldr	r2, [pc, #28]	; (8001ef4 <HAL_Init+0x40>)
 8001ed6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001eda:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001edc:	2003      	movs	r0, #3
 8001ede:	f000 fff1 	bl	8002ec4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ee2:	200f      	movs	r0, #15
 8001ee4:	f000 f808 	bl	8001ef8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ee8:	f7ff fd32 	bl	8001950 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001eec:	2300      	movs	r3, #0
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	bd80      	pop	{r7, pc}
 8001ef2:	bf00      	nop
 8001ef4:	40023c00 	.word	0x40023c00

08001ef8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b082      	sub	sp, #8
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f00:	4b12      	ldr	r3, [pc, #72]	; (8001f4c <HAL_InitTick+0x54>)
 8001f02:	681a      	ldr	r2, [r3, #0]
 8001f04:	4b12      	ldr	r3, [pc, #72]	; (8001f50 <HAL_InitTick+0x58>)
 8001f06:	781b      	ldrb	r3, [r3, #0]
 8001f08:	4619      	mov	r1, r3
 8001f0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f12:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f16:	4618      	mov	r0, r3
 8001f18:	f001 f809 	bl	8002f2e <HAL_SYSTICK_Config>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d001      	beq.n	8001f26 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f22:	2301      	movs	r3, #1
 8001f24:	e00e      	b.n	8001f44 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2b0f      	cmp	r3, #15
 8001f2a:	d80a      	bhi.n	8001f42 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	6879      	ldr	r1, [r7, #4]
 8001f30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001f34:	f000 ffd1 	bl	8002eda <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f38:	4a06      	ldr	r2, [pc, #24]	; (8001f54 <HAL_InitTick+0x5c>)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	e000      	b.n	8001f44 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f42:	2301      	movs	r3, #1
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	3708      	adds	r7, #8
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bd80      	pop	{r7, pc}
 8001f4c:	20000000 	.word	0x20000000
 8001f50:	20000008 	.word	0x20000008
 8001f54:	20000004 	.word	0x20000004

08001f58 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f5c:	4b06      	ldr	r3, [pc, #24]	; (8001f78 <HAL_IncTick+0x20>)
 8001f5e:	781b      	ldrb	r3, [r3, #0]
 8001f60:	461a      	mov	r2, r3
 8001f62:	4b06      	ldr	r3, [pc, #24]	; (8001f7c <HAL_IncTick+0x24>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4413      	add	r3, r2
 8001f68:	4a04      	ldr	r2, [pc, #16]	; (8001f7c <HAL_IncTick+0x24>)
 8001f6a:	6013      	str	r3, [r2, #0]
}
 8001f6c:	bf00      	nop
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f74:	4770      	bx	lr
 8001f76:	bf00      	nop
 8001f78:	20000008 	.word	0x20000008
 8001f7c:	20000530 	.word	0x20000530

08001f80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f80:	b480      	push	{r7}
 8001f82:	af00      	add	r7, sp, #0
  return uwTick;
 8001f84:	4b03      	ldr	r3, [pc, #12]	; (8001f94 <HAL_GetTick+0x14>)
 8001f86:	681b      	ldr	r3, [r3, #0]
}
 8001f88:	4618      	mov	r0, r3
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f90:	4770      	bx	lr
 8001f92:	bf00      	nop
 8001f94:	20000530 	.word	0x20000530

08001f98 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b084      	sub	sp, #16
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001fa0:	f7ff ffee 	bl	8001f80 <HAL_GetTick>
 8001fa4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001fb0:	d005      	beq.n	8001fbe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001fb2:	4b0a      	ldr	r3, [pc, #40]	; (8001fdc <HAL_Delay+0x44>)
 8001fb4:	781b      	ldrb	r3, [r3, #0]
 8001fb6:	461a      	mov	r2, r3
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	4413      	add	r3, r2
 8001fbc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001fbe:	bf00      	nop
 8001fc0:	f7ff ffde 	bl	8001f80 <HAL_GetTick>
 8001fc4:	4602      	mov	r2, r0
 8001fc6:	68bb      	ldr	r3, [r7, #8]
 8001fc8:	1ad3      	subs	r3, r2, r3
 8001fca:	68fa      	ldr	r2, [r7, #12]
 8001fcc:	429a      	cmp	r2, r3
 8001fce:	d8f7      	bhi.n	8001fc0 <HAL_Delay+0x28>
  {
  }
}
 8001fd0:	bf00      	nop
 8001fd2:	bf00      	nop
 8001fd4:	3710      	adds	r7, #16
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}
 8001fda:	bf00      	nop
 8001fdc:	20000008 	.word	0x20000008

08001fe0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b084      	sub	sp, #16
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d101      	bne.n	8001ff6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	e033      	b.n	800205e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d109      	bne.n	8002012 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001ffe:	6878      	ldr	r0, [r7, #4]
 8002000:	f7ff fcce 	bl	80019a0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2200      	movs	r2, #0
 8002008:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2200      	movs	r2, #0
 800200e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002016:	f003 0310 	and.w	r3, r3, #16
 800201a:	2b00      	cmp	r3, #0
 800201c:	d118      	bne.n	8002050 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002022:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002026:	f023 0302 	bic.w	r3, r3, #2
 800202a:	f043 0202 	orr.w	r2, r3, #2
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002032:	6878      	ldr	r0, [r7, #4]
 8002034:	f000 fb58 	bl	80026e8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2200      	movs	r2, #0
 800203c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002042:	f023 0303 	bic.w	r3, r3, #3
 8002046:	f043 0201 	orr.w	r2, r3, #1
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	641a      	str	r2, [r3, #64]	; 0x40
 800204e:	e001      	b.n	8002054 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002050:	2301      	movs	r3, #1
 8002052:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2200      	movs	r2, #0
 8002058:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800205c:	7bfb      	ldrb	r3, [r7, #15]
}
 800205e:	4618      	mov	r0, r3
 8002060:	3710      	adds	r7, #16
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}

08002066 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002066:	b580      	push	{r7, lr}
 8002068:	b086      	sub	sp, #24
 800206a:	af00      	add	r7, sp, #0
 800206c:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 800206e:	2300      	movs	r3, #0
 8002070:	617b      	str	r3, [r7, #20]
 8002072:	2300      	movs	r3, #0
 8002074:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	f003 0302 	and.w	r3, r3, #2
 800208c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 800208e:	68bb      	ldr	r3, [r7, #8]
 8002090:	f003 0320 	and.w	r3, r3, #32
 8002094:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8002096:	697b      	ldr	r3, [r7, #20]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d049      	beq.n	8002130 <HAL_ADC_IRQHandler+0xca>
 800209c:	693b      	ldr	r3, [r7, #16]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d046      	beq.n	8002130 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a6:	f003 0310 	and.w	r3, r3, #16
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d105      	bne.n	80020ba <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	689b      	ldr	r3, [r3, #8]
 80020c0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d12b      	bne.n	8002120 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d127      	bne.n	8002120 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020d6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d006      	beq.n	80020ec <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	689b      	ldr	r3, [r3, #8]
 80020e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d119      	bne.n	8002120 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	685a      	ldr	r2, [r3, #4]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f022 0220 	bic.w	r2, r2, #32
 80020fa:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002100:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800210c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002110:	2b00      	cmp	r3, #0
 8002112:	d105      	bne.n	8002120 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002118:	f043 0201 	orr.w	r2, r3, #1
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002120:	6878      	ldr	r0, [r7, #4]
 8002122:	f7ff fb39 	bl	8001798 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f06f 0212 	mvn.w	r2, #18
 800212e:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	f003 0304 	and.w	r3, r3, #4
 8002136:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8002138:	68bb      	ldr	r3, [r7, #8]
 800213a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800213e:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d057      	beq.n	80021f6 <HAL_ADC_IRQHandler+0x190>
 8002146:	693b      	ldr	r3, [r7, #16]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d054      	beq.n	80021f6 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002150:	f003 0310 	and.w	r3, r3, #16
 8002154:	2b00      	cmp	r3, #0
 8002156:	d105      	bne.n	8002164 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800215c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	689b      	ldr	r3, [r3, #8]
 800216a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800216e:	2b00      	cmp	r3, #0
 8002170:	d139      	bne.n	80021e6 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002178:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800217c:	2b00      	cmp	r3, #0
 800217e:	d006      	beq.n	800218e <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	689b      	ldr	r3, [r3, #8]
 8002186:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800218a:	2b00      	cmp	r3, #0
 800218c:	d12b      	bne.n	80021e6 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002198:	2b00      	cmp	r3, #0
 800219a:	d124      	bne.n	80021e6 <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	689b      	ldr	r3, [r3, #8]
 80021a2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d11d      	bne.n	80021e6 <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d119      	bne.n	80021e6 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	685a      	ldr	r2, [r3, #4]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80021c0:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d105      	bne.n	80021e6 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021de:	f043 0201 	orr.w	r2, r3, #1
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80021e6:	6878      	ldr	r0, [r7, #4]
 80021e8:	f000 fbfc 	bl	80029e4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f06f 020c 	mvn.w	r2, #12
 80021f4:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	f003 0301 	and.w	r3, r3, #1
 80021fc:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 80021fe:	68bb      	ldr	r3, [r7, #8]
 8002200:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002204:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8002206:	697b      	ldr	r3, [r7, #20]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d017      	beq.n	800223c <HAL_ADC_IRQHandler+0x1d6>
 800220c:	693b      	ldr	r3, [r7, #16]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d014      	beq.n	800223c <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f003 0301 	and.w	r3, r3, #1
 800221c:	2b01      	cmp	r3, #1
 800221e:	d10d      	bne.n	800223c <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002224:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800222c:	6878      	ldr	r0, [r7, #4]
 800222e:	f000 f925 	bl	800247c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f06f 0201 	mvn.w	r2, #1
 800223a:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	f003 0320 	and.w	r3, r3, #32
 8002242:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8002244:	68bb      	ldr	r3, [r7, #8]
 8002246:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800224a:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 800224c:	697b      	ldr	r3, [r7, #20]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d015      	beq.n	800227e <HAL_ADC_IRQHandler+0x218>
 8002252:	693b      	ldr	r3, [r7, #16]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d012      	beq.n	800227e <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800225c:	f043 0202 	orr.w	r2, r3, #2
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f06f 0220 	mvn.w	r2, #32
 800226c:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800226e:	6878      	ldr	r0, [r7, #4]
 8002270:	f000 f90e 	bl	8002490 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f06f 0220 	mvn.w	r2, #32
 800227c:	601a      	str	r2, [r3, #0]
  }
}
 800227e:	bf00      	nop
 8002280:	3718      	adds	r7, #24
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}
	...

08002288 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b086      	sub	sp, #24
 800228c:	af00      	add	r7, sp, #0
 800228e:	60f8      	str	r0, [r7, #12]
 8002290:	60b9      	str	r1, [r7, #8]
 8002292:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002294:	2300      	movs	r3, #0
 8002296:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800229e:	2b01      	cmp	r3, #1
 80022a0:	d101      	bne.n	80022a6 <HAL_ADC_Start_DMA+0x1e>
 80022a2:	2302      	movs	r3, #2
 80022a4:	e0ce      	b.n	8002444 <HAL_ADC_Start_DMA+0x1bc>
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	2201      	movs	r2, #1
 80022aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	689b      	ldr	r3, [r3, #8]
 80022b4:	f003 0301 	and.w	r3, r3, #1
 80022b8:	2b01      	cmp	r3, #1
 80022ba:	d018      	beq.n	80022ee <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	689a      	ldr	r2, [r3, #8]
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f042 0201 	orr.w	r2, r2, #1
 80022ca:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80022cc:	4b5f      	ldr	r3, [pc, #380]	; (800244c <HAL_ADC_Start_DMA+0x1c4>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a5f      	ldr	r2, [pc, #380]	; (8002450 <HAL_ADC_Start_DMA+0x1c8>)
 80022d2:	fba2 2303 	umull	r2, r3, r2, r3
 80022d6:	0c9a      	lsrs	r2, r3, #18
 80022d8:	4613      	mov	r3, r2
 80022da:	005b      	lsls	r3, r3, #1
 80022dc:	4413      	add	r3, r2
 80022de:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80022e0:	e002      	b.n	80022e8 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80022e2:	693b      	ldr	r3, [r7, #16]
 80022e4:	3b01      	subs	r3, #1
 80022e6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80022e8:	693b      	ldr	r3, [r7, #16]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d1f9      	bne.n	80022e2 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	689b      	ldr	r3, [r3, #8]
 80022f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80022fc:	d107      	bne.n	800230e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	689a      	ldr	r2, [r3, #8]
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800230c:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	689b      	ldr	r3, [r3, #8]
 8002314:	f003 0301 	and.w	r3, r3, #1
 8002318:	2b01      	cmp	r3, #1
 800231a:	f040 8086 	bne.w	800242a <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002322:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002326:	f023 0301 	bic.w	r3, r3, #1
 800232a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800233c:	2b00      	cmp	r3, #0
 800233e:	d007      	beq.n	8002350 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002344:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002348:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002354:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002358:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800235c:	d106      	bne.n	800236c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002362:	f023 0206 	bic.w	r2, r3, #6
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	645a      	str	r2, [r3, #68]	; 0x44
 800236a:	e002      	b.n	8002372 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	2200      	movs	r2, #0
 8002370:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	2200      	movs	r2, #0
 8002376:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800237a:	4b36      	ldr	r3, [pc, #216]	; (8002454 <HAL_ADC_Start_DMA+0x1cc>)
 800237c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002382:	4a35      	ldr	r2, [pc, #212]	; (8002458 <HAL_ADC_Start_DMA+0x1d0>)
 8002384:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800238a:	4a34      	ldr	r2, [pc, #208]	; (800245c <HAL_ADC_Start_DMA+0x1d4>)
 800238c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002392:	4a33      	ldr	r2, [pc, #204]	; (8002460 <HAL_ADC_Start_DMA+0x1d8>)
 8002394:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800239e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	685a      	ldr	r2, [r3, #4]
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80023ae:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	689a      	ldr	r2, [r3, #8]
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80023be:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	334c      	adds	r3, #76	; 0x4c
 80023ca:	4619      	mov	r1, r3
 80023cc:	68ba      	ldr	r2, [r7, #8]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	f000 fe68 	bl	80030a4 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80023d4:	697b      	ldr	r3, [r7, #20]
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	f003 031f 	and.w	r3, r3, #31
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d10f      	bne.n	8002400 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	689b      	ldr	r3, [r3, #8]
 80023e6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d129      	bne.n	8002442 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	689a      	ldr	r2, [r3, #8]
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80023fc:	609a      	str	r2, [r3, #8]
 80023fe:	e020      	b.n	8002442 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a17      	ldr	r2, [pc, #92]	; (8002464 <HAL_ADC_Start_DMA+0x1dc>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d11b      	bne.n	8002442 <HAL_ADC_Start_DMA+0x1ba>
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	689b      	ldr	r3, [r3, #8]
 8002410:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002414:	2b00      	cmp	r3, #0
 8002416:	d114      	bne.n	8002442 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	689a      	ldr	r2, [r3, #8]
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002426:	609a      	str	r2, [r3, #8]
 8002428:	e00b      	b.n	8002442 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800242e:	f043 0210 	orr.w	r2, r3, #16
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800243a:	f043 0201 	orr.w	r2, r3, #1
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002442:	2300      	movs	r3, #0
}
 8002444:	4618      	mov	r0, r3
 8002446:	3718      	adds	r7, #24
 8002448:	46bd      	mov	sp, r7
 800244a:	bd80      	pop	{r7, pc}
 800244c:	20000000 	.word	0x20000000
 8002450:	431bde83 	.word	0x431bde83
 8002454:	40012300 	.word	0x40012300
 8002458:	080028e1 	.word	0x080028e1
 800245c:	0800299b 	.word	0x0800299b
 8002460:	080029b7 	.word	0x080029b7
 8002464:	40012000 	.word	0x40012000

08002468 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002468:	b480      	push	{r7}
 800246a:	b083      	sub	sp, #12
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002470:	bf00      	nop
 8002472:	370c      	adds	r7, #12
 8002474:	46bd      	mov	sp, r7
 8002476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247a:	4770      	bx	lr

0800247c <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800247c:	b480      	push	{r7}
 800247e:	b083      	sub	sp, #12
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002484:	bf00      	nop
 8002486:	370c      	adds	r7, #12
 8002488:	46bd      	mov	sp, r7
 800248a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248e:	4770      	bx	lr

08002490 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002490:	b480      	push	{r7}
 8002492:	b083      	sub	sp, #12
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002498:	bf00      	nop
 800249a:	370c      	adds	r7, #12
 800249c:	46bd      	mov	sp, r7
 800249e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a2:	4770      	bx	lr

080024a4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b085      	sub	sp, #20
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
 80024ac:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80024ae:	2300      	movs	r3, #0
 80024b0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024b8:	2b01      	cmp	r3, #1
 80024ba:	d101      	bne.n	80024c0 <HAL_ADC_ConfigChannel+0x1c>
 80024bc:	2302      	movs	r3, #2
 80024be:	e105      	b.n	80026cc <HAL_ADC_ConfigChannel+0x228>
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2201      	movs	r2, #1
 80024c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	2b09      	cmp	r3, #9
 80024ce:	d925      	bls.n	800251c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	68d9      	ldr	r1, [r3, #12]
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	b29b      	uxth	r3, r3
 80024dc:	461a      	mov	r2, r3
 80024de:	4613      	mov	r3, r2
 80024e0:	005b      	lsls	r3, r3, #1
 80024e2:	4413      	add	r3, r2
 80024e4:	3b1e      	subs	r3, #30
 80024e6:	2207      	movs	r2, #7
 80024e8:	fa02 f303 	lsl.w	r3, r2, r3
 80024ec:	43da      	mvns	r2, r3
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	400a      	ands	r2, r1
 80024f4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	68d9      	ldr	r1, [r3, #12]
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	689a      	ldr	r2, [r3, #8]
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	b29b      	uxth	r3, r3
 8002506:	4618      	mov	r0, r3
 8002508:	4603      	mov	r3, r0
 800250a:	005b      	lsls	r3, r3, #1
 800250c:	4403      	add	r3, r0
 800250e:	3b1e      	subs	r3, #30
 8002510:	409a      	lsls	r2, r3
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	430a      	orrs	r2, r1
 8002518:	60da      	str	r2, [r3, #12]
 800251a:	e022      	b.n	8002562 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	6919      	ldr	r1, [r3, #16]
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	b29b      	uxth	r3, r3
 8002528:	461a      	mov	r2, r3
 800252a:	4613      	mov	r3, r2
 800252c:	005b      	lsls	r3, r3, #1
 800252e:	4413      	add	r3, r2
 8002530:	2207      	movs	r2, #7
 8002532:	fa02 f303 	lsl.w	r3, r2, r3
 8002536:	43da      	mvns	r2, r3
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	400a      	ands	r2, r1
 800253e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	6919      	ldr	r1, [r3, #16]
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	689a      	ldr	r2, [r3, #8]
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	b29b      	uxth	r3, r3
 8002550:	4618      	mov	r0, r3
 8002552:	4603      	mov	r3, r0
 8002554:	005b      	lsls	r3, r3, #1
 8002556:	4403      	add	r3, r0
 8002558:	409a      	lsls	r2, r3
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	430a      	orrs	r2, r1
 8002560:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	2b06      	cmp	r3, #6
 8002568:	d824      	bhi.n	80025b4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	685a      	ldr	r2, [r3, #4]
 8002574:	4613      	mov	r3, r2
 8002576:	009b      	lsls	r3, r3, #2
 8002578:	4413      	add	r3, r2
 800257a:	3b05      	subs	r3, #5
 800257c:	221f      	movs	r2, #31
 800257e:	fa02 f303 	lsl.w	r3, r2, r3
 8002582:	43da      	mvns	r2, r3
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	400a      	ands	r2, r1
 800258a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	b29b      	uxth	r3, r3
 8002598:	4618      	mov	r0, r3
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	685a      	ldr	r2, [r3, #4]
 800259e:	4613      	mov	r3, r2
 80025a0:	009b      	lsls	r3, r3, #2
 80025a2:	4413      	add	r3, r2
 80025a4:	3b05      	subs	r3, #5
 80025a6:	fa00 f203 	lsl.w	r2, r0, r3
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	430a      	orrs	r2, r1
 80025b0:	635a      	str	r2, [r3, #52]	; 0x34
 80025b2:	e04c      	b.n	800264e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	2b0c      	cmp	r3, #12
 80025ba:	d824      	bhi.n	8002606 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	685a      	ldr	r2, [r3, #4]
 80025c6:	4613      	mov	r3, r2
 80025c8:	009b      	lsls	r3, r3, #2
 80025ca:	4413      	add	r3, r2
 80025cc:	3b23      	subs	r3, #35	; 0x23
 80025ce:	221f      	movs	r2, #31
 80025d0:	fa02 f303 	lsl.w	r3, r2, r3
 80025d4:	43da      	mvns	r2, r3
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	400a      	ands	r2, r1
 80025dc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	b29b      	uxth	r3, r3
 80025ea:	4618      	mov	r0, r3
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	685a      	ldr	r2, [r3, #4]
 80025f0:	4613      	mov	r3, r2
 80025f2:	009b      	lsls	r3, r3, #2
 80025f4:	4413      	add	r3, r2
 80025f6:	3b23      	subs	r3, #35	; 0x23
 80025f8:	fa00 f203 	lsl.w	r2, r0, r3
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	430a      	orrs	r2, r1
 8002602:	631a      	str	r2, [r3, #48]	; 0x30
 8002604:	e023      	b.n	800264e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	685a      	ldr	r2, [r3, #4]
 8002610:	4613      	mov	r3, r2
 8002612:	009b      	lsls	r3, r3, #2
 8002614:	4413      	add	r3, r2
 8002616:	3b41      	subs	r3, #65	; 0x41
 8002618:	221f      	movs	r2, #31
 800261a:	fa02 f303 	lsl.w	r3, r2, r3
 800261e:	43da      	mvns	r2, r3
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	400a      	ands	r2, r1
 8002626:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	b29b      	uxth	r3, r3
 8002634:	4618      	mov	r0, r3
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	685a      	ldr	r2, [r3, #4]
 800263a:	4613      	mov	r3, r2
 800263c:	009b      	lsls	r3, r3, #2
 800263e:	4413      	add	r3, r2
 8002640:	3b41      	subs	r3, #65	; 0x41
 8002642:	fa00 f203 	lsl.w	r2, r0, r3
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	430a      	orrs	r2, r1
 800264c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800264e:	4b22      	ldr	r3, [pc, #136]	; (80026d8 <HAL_ADC_ConfigChannel+0x234>)
 8002650:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4a21      	ldr	r2, [pc, #132]	; (80026dc <HAL_ADC_ConfigChannel+0x238>)
 8002658:	4293      	cmp	r3, r2
 800265a:	d109      	bne.n	8002670 <HAL_ADC_ConfigChannel+0x1cc>
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	2b12      	cmp	r3, #18
 8002662:	d105      	bne.n	8002670 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a19      	ldr	r2, [pc, #100]	; (80026dc <HAL_ADC_ConfigChannel+0x238>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d123      	bne.n	80026c2 <HAL_ADC_ConfigChannel+0x21e>
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	2b10      	cmp	r3, #16
 8002680:	d003      	beq.n	800268a <HAL_ADC_ConfigChannel+0x1e6>
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	2b11      	cmp	r3, #17
 8002688:	d11b      	bne.n	80026c2 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	2b10      	cmp	r3, #16
 800269c:	d111      	bne.n	80026c2 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800269e:	4b10      	ldr	r3, [pc, #64]	; (80026e0 <HAL_ADC_ConfigChannel+0x23c>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4a10      	ldr	r2, [pc, #64]	; (80026e4 <HAL_ADC_ConfigChannel+0x240>)
 80026a4:	fba2 2303 	umull	r2, r3, r2, r3
 80026a8:	0c9a      	lsrs	r2, r3, #18
 80026aa:	4613      	mov	r3, r2
 80026ac:	009b      	lsls	r3, r3, #2
 80026ae:	4413      	add	r3, r2
 80026b0:	005b      	lsls	r3, r3, #1
 80026b2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80026b4:	e002      	b.n	80026bc <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80026b6:	68bb      	ldr	r3, [r7, #8]
 80026b8:	3b01      	subs	r3, #1
 80026ba:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80026bc:	68bb      	ldr	r3, [r7, #8]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d1f9      	bne.n	80026b6 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2200      	movs	r2, #0
 80026c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80026ca:	2300      	movs	r3, #0
}
 80026cc:	4618      	mov	r0, r3
 80026ce:	3714      	adds	r7, #20
 80026d0:	46bd      	mov	sp, r7
 80026d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d6:	4770      	bx	lr
 80026d8:	40012300 	.word	0x40012300
 80026dc:	40012000 	.word	0x40012000
 80026e0:	20000000 	.word	0x20000000
 80026e4:	431bde83 	.word	0x431bde83

080026e8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80026e8:	b480      	push	{r7}
 80026ea:	b085      	sub	sp, #20
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80026f0:	4b79      	ldr	r3, [pc, #484]	; (80028d8 <ADC_Init+0x1f0>)
 80026f2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	685a      	ldr	r2, [r3, #4]
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	431a      	orrs	r2, r3
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	685a      	ldr	r2, [r3, #4]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800271c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	6859      	ldr	r1, [r3, #4]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	691b      	ldr	r3, [r3, #16]
 8002728:	021a      	lsls	r2, r3, #8
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	430a      	orrs	r2, r1
 8002730:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	685a      	ldr	r2, [r3, #4]
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002740:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	6859      	ldr	r1, [r3, #4]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	689a      	ldr	r2, [r3, #8]
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	430a      	orrs	r2, r1
 8002752:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	689a      	ldr	r2, [r3, #8]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002762:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	6899      	ldr	r1, [r3, #8]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	68da      	ldr	r2, [r3, #12]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	430a      	orrs	r2, r1
 8002774:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800277a:	4a58      	ldr	r2, [pc, #352]	; (80028dc <ADC_Init+0x1f4>)
 800277c:	4293      	cmp	r3, r2
 800277e:	d022      	beq.n	80027c6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	689a      	ldr	r2, [r3, #8]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800278e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	6899      	ldr	r1, [r3, #8]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	430a      	orrs	r2, r1
 80027a0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	689a      	ldr	r2, [r3, #8]
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80027b0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	6899      	ldr	r1, [r3, #8]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	430a      	orrs	r2, r1
 80027c2:	609a      	str	r2, [r3, #8]
 80027c4:	e00f      	b.n	80027e6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	689a      	ldr	r2, [r3, #8]
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80027d4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	689a      	ldr	r2, [r3, #8]
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80027e4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	689a      	ldr	r2, [r3, #8]
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f022 0202 	bic.w	r2, r2, #2
 80027f4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	6899      	ldr	r1, [r3, #8]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	7e1b      	ldrb	r3, [r3, #24]
 8002800:	005a      	lsls	r2, r3, #1
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	430a      	orrs	r2, r1
 8002808:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d01b      	beq.n	800284c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	685a      	ldr	r2, [r3, #4]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002822:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	685a      	ldr	r2, [r3, #4]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002832:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	6859      	ldr	r1, [r3, #4]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800283e:	3b01      	subs	r3, #1
 8002840:	035a      	lsls	r2, r3, #13
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	430a      	orrs	r2, r1
 8002848:	605a      	str	r2, [r3, #4]
 800284a:	e007      	b.n	800285c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	685a      	ldr	r2, [r3, #4]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800285a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800286a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	69db      	ldr	r3, [r3, #28]
 8002876:	3b01      	subs	r3, #1
 8002878:	051a      	lsls	r2, r3, #20
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	430a      	orrs	r2, r1
 8002880:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	689a      	ldr	r2, [r3, #8]
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002890:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	6899      	ldr	r1, [r3, #8]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800289e:	025a      	lsls	r2, r3, #9
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	430a      	orrs	r2, r1
 80028a6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	689a      	ldr	r2, [r3, #8]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80028b6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	6899      	ldr	r1, [r3, #8]
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	695b      	ldr	r3, [r3, #20]
 80028c2:	029a      	lsls	r2, r3, #10
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	430a      	orrs	r2, r1
 80028ca:	609a      	str	r2, [r3, #8]
}
 80028cc:	bf00      	nop
 80028ce:	3714      	adds	r7, #20
 80028d0:	46bd      	mov	sp, r7
 80028d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d6:	4770      	bx	lr
 80028d8:	40012300 	.word	0x40012300
 80028dc:	0f000001 	.word	0x0f000001

080028e0 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b084      	sub	sp, #16
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028ec:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d13c      	bne.n	8002974 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028fe:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	689b      	ldr	r3, [r3, #8]
 800290c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002910:	2b00      	cmp	r3, #0
 8002912:	d12b      	bne.n	800296c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002918:	2b00      	cmp	r3, #0
 800291a:	d127      	bne.n	800296c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002922:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002926:	2b00      	cmp	r3, #0
 8002928:	d006      	beq.n	8002938 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	689b      	ldr	r3, [r3, #8]
 8002930:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002934:	2b00      	cmp	r3, #0
 8002936:	d119      	bne.n	800296c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	685a      	ldr	r2, [r3, #4]
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f022 0220 	bic.w	r2, r2, #32
 8002946:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800294c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002958:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800295c:	2b00      	cmp	r3, #0
 800295e:	d105      	bne.n	800296c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002964:	f043 0201 	orr.w	r2, r3, #1
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800296c:	68f8      	ldr	r0, [r7, #12]
 800296e:	f7fe ff13 	bl	8001798 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002972:	e00e      	b.n	8002992 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002978:	f003 0310 	and.w	r3, r3, #16
 800297c:	2b00      	cmp	r3, #0
 800297e:	d003      	beq.n	8002988 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002980:	68f8      	ldr	r0, [r7, #12]
 8002982:	f7ff fd85 	bl	8002490 <HAL_ADC_ErrorCallback>
}
 8002986:	e004      	b.n	8002992 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800298c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800298e:	6878      	ldr	r0, [r7, #4]
 8002990:	4798      	blx	r3
}
 8002992:	bf00      	nop
 8002994:	3710      	adds	r7, #16
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}

0800299a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800299a:	b580      	push	{r7, lr}
 800299c:	b084      	sub	sp, #16
 800299e:	af00      	add	r7, sp, #0
 80029a0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029a6:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80029a8:	68f8      	ldr	r0, [r7, #12]
 80029aa:	f7ff fd5d 	bl	8002468 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80029ae:	bf00      	nop
 80029b0:	3710      	adds	r7, #16
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}

080029b6 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80029b6:	b580      	push	{r7, lr}
 80029b8:	b084      	sub	sp, #16
 80029ba:	af00      	add	r7, sp, #0
 80029bc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029c2:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	2240      	movs	r2, #64	; 0x40
 80029c8:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ce:	f043 0204 	orr.w	r2, r3, #4
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80029d6:	68f8      	ldr	r0, [r7, #12]
 80029d8:	f7ff fd5a 	bl	8002490 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80029dc:	bf00      	nop
 80029de:	3710      	adds	r7, #16
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bd80      	pop	{r7, pc}

080029e4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b083      	sub	sp, #12
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80029ec:	bf00      	nop
 80029ee:	370c      	adds	r7, #12
 80029f0:	46bd      	mov	sp, r7
 80029f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f6:	4770      	bx	lr

080029f8 <HAL_ADCEx_InjectedConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfigInjected ADC configuration structure for injected channel. 
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef* hadc, ADC_InjectionConfTypeDef* sConfigInjected)
{
 80029f8:	b480      	push	{r7}
 80029fa:	b085      	sub	sp, #20
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
 8002a00:	6039      	str	r1, [r7, #0]
  {
    assert_param(IS_ADC_EXT_INJEC_TRIG_EDGE(sConfigInjected->ExternalTrigInjecConvEdge));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a08:	2b01      	cmp	r3, #1
 8002a0a:	d101      	bne.n	8002a10 <HAL_ADCEx_InjectedConfigChannel+0x18>
 8002a0c:	2302      	movs	r3, #2
 8002a0e:	e17d      	b.n	8002d0c <HAL_ADCEx_InjectedConfigChannel+0x314>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2201      	movs	r2, #1
 8002a14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfigInjected->InjectedChannel > ADC_CHANNEL_9)
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	2b09      	cmp	r3, #9
 8002a1e:	d925      	bls.n	8002a6c <HAL_ADCEx_InjectedConfigChannel+0x74>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	68d9      	ldr	r1, [r3, #12]
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	b29b      	uxth	r3, r3
 8002a2c:	461a      	mov	r2, r3
 8002a2e:	4613      	mov	r3, r2
 8002a30:	005b      	lsls	r3, r3, #1
 8002a32:	4413      	add	r3, r2
 8002a34:	3b1e      	subs	r3, #30
 8002a36:	2207      	movs	r2, #7
 8002a38:	fa02 f303 	lsl.w	r3, r2, r3
 8002a3c:	43da      	mvns	r2, r3
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	400a      	ands	r2, r1
 8002a44:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	68d9      	ldr	r1, [r3, #12]
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	689a      	ldr	r2, [r3, #8]
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	b29b      	uxth	r3, r3
 8002a56:	4618      	mov	r0, r3
 8002a58:	4603      	mov	r3, r0
 8002a5a:	005b      	lsls	r3, r3, #1
 8002a5c:	4403      	add	r3, r0
 8002a5e:	3b1e      	subs	r3, #30
 8002a60:	409a      	lsls	r2, r3
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	430a      	orrs	r2, r1
 8002a68:	60da      	str	r2, [r3, #12]
 8002a6a:	e022      	b.n	8002ab2 <HAL_ADCEx_InjectedConfigChannel+0xba>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfigInjected->InjectedChannel);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	6919      	ldr	r1, [r3, #16]
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	b29b      	uxth	r3, r3
 8002a78:	461a      	mov	r2, r3
 8002a7a:	4613      	mov	r3, r2
 8002a7c:	005b      	lsls	r3, r3, #1
 8002a7e:	4413      	add	r3, r2
 8002a80:	2207      	movs	r2, #7
 8002a82:	fa02 f303 	lsl.w	r3, r2, r3
 8002a86:	43da      	mvns	r2, r3
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	400a      	ands	r2, r1
 8002a8e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	6919      	ldr	r1, [r3, #16]
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	689a      	ldr	r2, [r3, #8]
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	b29b      	uxth	r3, r3
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	005b      	lsls	r3, r3, #1
 8002aa6:	4403      	add	r3, r0
 8002aa8:	409a      	lsls	r2, r3
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	430a      	orrs	r2, r1
 8002ab0:	611a      	str	r2, [r3, #16]
  }
  
  /*---------------------------- ADCx JSQR Configuration -----------------*/
  hadc->Instance->JSQR &= ~(ADC_JSQR_JL);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8002ac0:	639a      	str	r2, [r3, #56]	; 0x38
  hadc->Instance->JSQR |=  ADC_SQR1(sConfigInjected->InjectedNbrOfConversion);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	691b      	ldr	r3, [r3, #16]
 8002acc:	3b01      	subs	r3, #1
 8002ace:	051a      	lsls	r2, r3, #20
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	430a      	orrs	r2, r1
 8002ad6:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Rank configuration */
  
  /* Clear the old SQx bits for the selected rank */
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	b2da      	uxtb	r2, r3
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	691b      	ldr	r3, [r3, #16]
 8002ae8:	b2db      	uxtb	r3, r3
 8002aea:	1ad3      	subs	r3, r2, r3
 8002aec:	b2db      	uxtb	r3, r3
 8002aee:	3303      	adds	r3, #3
 8002af0:	b2db      	uxtb	r3, r3
 8002af2:	461a      	mov	r2, r3
 8002af4:	4613      	mov	r3, r2
 8002af6:	009b      	lsls	r3, r3, #2
 8002af8:	4413      	add	r3, r2
 8002afa:	221f      	movs	r2, #31
 8002afc:	fa02 f303 	lsl.w	r3, r2, r3
 8002b00:	43da      	mvns	r2, r3
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	400a      	ands	r2, r1
 8002b08:	639a      	str	r2, [r3, #56]	; 0x38
   
  /* Set the SQx bits for the selected rank */
  hadc->Instance->JSQR |= ADC_JSQR(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	b29b      	uxth	r3, r3
 8002b16:	4618      	mov	r0, r3
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	b2da      	uxtb	r2, r3
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	691b      	ldr	r3, [r3, #16]
 8002b22:	b2db      	uxtb	r3, r3
 8002b24:	1ad3      	subs	r3, r2, r3
 8002b26:	b2db      	uxtb	r3, r3
 8002b28:	3303      	adds	r3, #3
 8002b2a:	b2db      	uxtb	r3, r3
 8002b2c:	461a      	mov	r2, r3
 8002b2e:	4613      	mov	r3, r2
 8002b30:	009b      	lsls	r3, r3, #2
 8002b32:	4413      	add	r3, r2
 8002b34:	fa00 f203 	lsl.w	r2, r0, r3
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	430a      	orrs	r2, r1
 8002b3e:	639a      	str	r2, [r3, #56]	; 0x38
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */ 
  if(sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	699b      	ldr	r3, [r3, #24]
 8002b44:	4a74      	ldr	r2, [pc, #464]	; (8002d18 <HAL_ADCEx_InjectedConfigChannel+0x320>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d022      	beq.n	8002b90 <HAL_ADCEx_InjectedConfigChannel+0x198>
  {  
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	689a      	ldr	r2, [r3, #8]
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 8002b58:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |=  sConfigInjected->ExternalTrigInjecConv;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	6899      	ldr	r1, [r3, #8]
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	699a      	ldr	r2, [r3, #24]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	430a      	orrs	r2, r1
 8002b6a:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	689a      	ldr	r2, [r3, #8]
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8002b7a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= sConfigInjected->ExternalTrigInjecConvEdge;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	6899      	ldr	r1, [r3, #8]
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	69da      	ldr	r2, [r3, #28]
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	430a      	orrs	r2, r1
 8002b8c:	609a      	str	r2, [r3, #8]
 8002b8e:	e00f      	b.n	8002bb0 <HAL_ADCEx_InjectedConfigChannel+0x1b8>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	689a      	ldr	r2, [r3, #8]
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 8002b9e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);  
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	689a      	ldr	r2, [r3, #8]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8002bae:	609a      	str	r2, [r3, #8]
  }
  
  if (sConfigInjected->AutoInjectedConv != DISABLE)
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	7d5b      	ldrb	r3, [r3, #21]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d008      	beq.n	8002bca <HAL_ADCEx_InjectedConfigChannel+0x1d2>
  {
    /* Enable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 |= ADC_CR1_JAUTO;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	685a      	ldr	r2, [r3, #4]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002bc6:	605a      	str	r2, [r3, #4]
 8002bc8:	e007      	b.n	8002bda <HAL_ADCEx_InjectedConfigChannel+0x1e2>
  }
  else
  {
    /* Disable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 &= ~(ADC_CR1_JAUTO);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	685a      	ldr	r2, [r3, #4]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002bd8:	605a      	str	r2, [r3, #4]
  }
  
  if (sConfigInjected->InjectedDiscontinuousConvMode != DISABLE)
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	7d1b      	ldrb	r3, [r3, #20]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d008      	beq.n	8002bf4 <HAL_ADCEx_InjectedConfigChannel+0x1fc>
  {
    /* Enable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 |= ADC_CR1_JDISCEN;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	685a      	ldr	r2, [r3, #4]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002bf0:	605a      	str	r2, [r3, #4]
 8002bf2:	e007      	b.n	8002c04 <HAL_ADCEx_InjectedConfigChannel+0x20c>
  }
  else
  {
    /* Disable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_JDISCEN);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	685a      	ldr	r2, [r3, #4]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002c02:	605a      	str	r2, [r3, #4]
  }
  
  switch(sConfigInjected->InjectedRank)
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	2b03      	cmp	r3, #3
 8002c0a:	d02e      	beq.n	8002c6a <HAL_ADCEx_InjectedConfigChannel+0x272>
 8002c0c:	2b03      	cmp	r3, #3
 8002c0e:	d840      	bhi.n	8002c92 <HAL_ADCEx_InjectedConfigChannel+0x29a>
 8002c10:	2b01      	cmp	r3, #1
 8002c12:	d002      	beq.n	8002c1a <HAL_ADCEx_InjectedConfigChannel+0x222>
 8002c14:	2b02      	cmp	r3, #2
 8002c16:	d014      	beq.n	8002c42 <HAL_ADCEx_InjectedConfigChannel+0x24a>
 8002c18:	e03b      	b.n	8002c92 <HAL_ADCEx_InjectedConfigChannel+0x29a>
  {
    case 1U:
      /* Set injected channel 1 offset */
      hadc->Instance->JOFR1 &= ~(ADC_JOFR1_JOFFSET1);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	695b      	ldr	r3, [r3, #20]
 8002c20:	687a      	ldr	r2, [r7, #4]
 8002c22:	6812      	ldr	r2, [r2, #0]
 8002c24:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8002c28:	f023 030f 	bic.w	r3, r3, #15
 8002c2c:	6153      	str	r3, [r2, #20]
      hadc->Instance->JOFR1 |= sConfigInjected->InjectedOffset;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	6959      	ldr	r1, [r3, #20]
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	68da      	ldr	r2, [r3, #12]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	430a      	orrs	r2, r1
 8002c3e:	615a      	str	r2, [r3, #20]
      break;
 8002c40:	e03b      	b.n	8002cba <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    case 2U:
      /* Set injected channel 2 offset */
      hadc->Instance->JOFR2 &= ~(ADC_JOFR2_JOFFSET2);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	699b      	ldr	r3, [r3, #24]
 8002c48:	687a      	ldr	r2, [r7, #4]
 8002c4a:	6812      	ldr	r2, [r2, #0]
 8002c4c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8002c50:	f023 030f 	bic.w	r3, r3, #15
 8002c54:	6193      	str	r3, [r2, #24]
      hadc->Instance->JOFR2 |= sConfigInjected->InjectedOffset;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	6999      	ldr	r1, [r3, #24]
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	68da      	ldr	r2, [r3, #12]
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	430a      	orrs	r2, r1
 8002c66:	619a      	str	r2, [r3, #24]
      break;
 8002c68:	e027      	b.n	8002cba <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    case 3U:
      /* Set injected channel 3 offset */
      hadc->Instance->JOFR3 &= ~(ADC_JOFR3_JOFFSET3);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	69db      	ldr	r3, [r3, #28]
 8002c70:	687a      	ldr	r2, [r7, #4]
 8002c72:	6812      	ldr	r2, [r2, #0]
 8002c74:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8002c78:	f023 030f 	bic.w	r3, r3, #15
 8002c7c:	61d3      	str	r3, [r2, #28]
      hadc->Instance->JOFR3 |= sConfigInjected->InjectedOffset;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	69d9      	ldr	r1, [r3, #28]
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	68da      	ldr	r2, [r3, #12]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	430a      	orrs	r2, r1
 8002c8e:	61da      	str	r2, [r3, #28]
      break;
 8002c90:	e013      	b.n	8002cba <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    default:
      /* Set injected channel 4 offset */
      hadc->Instance->JOFR4 &= ~(ADC_JOFR4_JOFFSET4);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	6a1b      	ldr	r3, [r3, #32]
 8002c98:	687a      	ldr	r2, [r7, #4]
 8002c9a:	6812      	ldr	r2, [r2, #0]
 8002c9c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8002ca0:	f023 030f 	bic.w	r3, r3, #15
 8002ca4:	6213      	str	r3, [r2, #32]
      hadc->Instance->JOFR4 |= sConfigInjected->InjectedOffset;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	6a19      	ldr	r1, [r3, #32]
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	68da      	ldr	r2, [r3, #12]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	430a      	orrs	r2, r1
 8002cb6:	621a      	str	r2, [r3, #32]
      break;
 8002cb8:	bf00      	nop
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
  /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002cba:	4b18      	ldr	r3, [pc, #96]	; (8002d1c <HAL_ADCEx_InjectedConfigChannel+0x324>)
 8002cbc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT))
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a17      	ldr	r2, [pc, #92]	; (8002d20 <HAL_ADCEx_InjectedConfigChannel+0x328>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d109      	bne.n	8002cdc <HAL_ADCEx_InjectedConfigChannel+0x2e4>
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	2b12      	cmp	r3, #18
 8002cce:	d105      	bne.n	8002cdc <HAL_ADCEx_InjectedConfigChannel+0x2e4>
  {
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) || (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)))
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a0f      	ldr	r2, [pc, #60]	; (8002d20 <HAL_ADCEx_InjectedConfigChannel+0x328>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d10d      	bne.n	8002d02 <HAL_ADCEx_InjectedConfigChannel+0x30a>
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	2b10      	cmp	r3, #16
 8002cec:	d003      	beq.n	8002cf6 <HAL_ADCEx_InjectedConfigChannel+0x2fe>
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	2b11      	cmp	r3, #17
 8002cf4:	d105      	bne.n	8002d02 <HAL_ADCEx_InjectedConfigChannel+0x30a>
  {
    /* Enable the TSVREFE channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	605a      	str	r2, [r3, #4]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2200      	movs	r2, #0
 8002d06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002d0a:	2300      	movs	r3, #0
}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	3714      	adds	r7, #20
 8002d10:	46bd      	mov	sp, r7
 8002d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d16:	4770      	bx	lr
 8002d18:	000f0001 	.word	0x000f0001
 8002d1c:	40012300 	.word	0x40012300
 8002d20:	40012000 	.word	0x40012000

08002d24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d24:	b480      	push	{r7}
 8002d26:	b085      	sub	sp, #20
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	f003 0307 	and.w	r3, r3, #7
 8002d32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d34:	4b0c      	ldr	r3, [pc, #48]	; (8002d68 <__NVIC_SetPriorityGrouping+0x44>)
 8002d36:	68db      	ldr	r3, [r3, #12]
 8002d38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d3a:	68ba      	ldr	r2, [r7, #8]
 8002d3c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002d40:	4013      	ands	r3, r2
 8002d42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d4c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002d50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d56:	4a04      	ldr	r2, [pc, #16]	; (8002d68 <__NVIC_SetPriorityGrouping+0x44>)
 8002d58:	68bb      	ldr	r3, [r7, #8]
 8002d5a:	60d3      	str	r3, [r2, #12]
}
 8002d5c:	bf00      	nop
 8002d5e:	3714      	adds	r7, #20
 8002d60:	46bd      	mov	sp, r7
 8002d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d66:	4770      	bx	lr
 8002d68:	e000ed00 	.word	0xe000ed00

08002d6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d70:	4b04      	ldr	r3, [pc, #16]	; (8002d84 <__NVIC_GetPriorityGrouping+0x18>)
 8002d72:	68db      	ldr	r3, [r3, #12]
 8002d74:	0a1b      	lsrs	r3, r3, #8
 8002d76:	f003 0307 	and.w	r3, r3, #7
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d82:	4770      	bx	lr
 8002d84:	e000ed00 	.word	0xe000ed00

08002d88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	b083      	sub	sp, #12
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	4603      	mov	r3, r0
 8002d90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	db0b      	blt.n	8002db2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d9a:	79fb      	ldrb	r3, [r7, #7]
 8002d9c:	f003 021f 	and.w	r2, r3, #31
 8002da0:	4907      	ldr	r1, [pc, #28]	; (8002dc0 <__NVIC_EnableIRQ+0x38>)
 8002da2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002da6:	095b      	lsrs	r3, r3, #5
 8002da8:	2001      	movs	r0, #1
 8002daa:	fa00 f202 	lsl.w	r2, r0, r2
 8002dae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002db2:	bf00      	nop
 8002db4:	370c      	adds	r7, #12
 8002db6:	46bd      	mov	sp, r7
 8002db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbc:	4770      	bx	lr
 8002dbe:	bf00      	nop
 8002dc0:	e000e100 	.word	0xe000e100

08002dc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	b083      	sub	sp, #12
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	4603      	mov	r3, r0
 8002dcc:	6039      	str	r1, [r7, #0]
 8002dce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002dd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	db0a      	blt.n	8002dee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	b2da      	uxtb	r2, r3
 8002ddc:	490c      	ldr	r1, [pc, #48]	; (8002e10 <__NVIC_SetPriority+0x4c>)
 8002dde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002de2:	0112      	lsls	r2, r2, #4
 8002de4:	b2d2      	uxtb	r2, r2
 8002de6:	440b      	add	r3, r1
 8002de8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002dec:	e00a      	b.n	8002e04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	b2da      	uxtb	r2, r3
 8002df2:	4908      	ldr	r1, [pc, #32]	; (8002e14 <__NVIC_SetPriority+0x50>)
 8002df4:	79fb      	ldrb	r3, [r7, #7]
 8002df6:	f003 030f 	and.w	r3, r3, #15
 8002dfa:	3b04      	subs	r3, #4
 8002dfc:	0112      	lsls	r2, r2, #4
 8002dfe:	b2d2      	uxtb	r2, r2
 8002e00:	440b      	add	r3, r1
 8002e02:	761a      	strb	r2, [r3, #24]
}
 8002e04:	bf00      	nop
 8002e06:	370c      	adds	r7, #12
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0e:	4770      	bx	lr
 8002e10:	e000e100 	.word	0xe000e100
 8002e14:	e000ed00 	.word	0xe000ed00

08002e18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b089      	sub	sp, #36	; 0x24
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	60f8      	str	r0, [r7, #12]
 8002e20:	60b9      	str	r1, [r7, #8]
 8002e22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	f003 0307 	and.w	r3, r3, #7
 8002e2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e2c:	69fb      	ldr	r3, [r7, #28]
 8002e2e:	f1c3 0307 	rsb	r3, r3, #7
 8002e32:	2b04      	cmp	r3, #4
 8002e34:	bf28      	it	cs
 8002e36:	2304      	movcs	r3, #4
 8002e38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e3a:	69fb      	ldr	r3, [r7, #28]
 8002e3c:	3304      	adds	r3, #4
 8002e3e:	2b06      	cmp	r3, #6
 8002e40:	d902      	bls.n	8002e48 <NVIC_EncodePriority+0x30>
 8002e42:	69fb      	ldr	r3, [r7, #28]
 8002e44:	3b03      	subs	r3, #3
 8002e46:	e000      	b.n	8002e4a <NVIC_EncodePriority+0x32>
 8002e48:	2300      	movs	r3, #0
 8002e4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e4c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002e50:	69bb      	ldr	r3, [r7, #24]
 8002e52:	fa02 f303 	lsl.w	r3, r2, r3
 8002e56:	43da      	mvns	r2, r3
 8002e58:	68bb      	ldr	r3, [r7, #8]
 8002e5a:	401a      	ands	r2, r3
 8002e5c:	697b      	ldr	r3, [r7, #20]
 8002e5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e60:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002e64:	697b      	ldr	r3, [r7, #20]
 8002e66:	fa01 f303 	lsl.w	r3, r1, r3
 8002e6a:	43d9      	mvns	r1, r3
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e70:	4313      	orrs	r3, r2
         );
}
 8002e72:	4618      	mov	r0, r3
 8002e74:	3724      	adds	r7, #36	; 0x24
 8002e76:	46bd      	mov	sp, r7
 8002e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7c:	4770      	bx	lr
	...

08002e80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b082      	sub	sp, #8
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	3b01      	subs	r3, #1
 8002e8c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e90:	d301      	bcc.n	8002e96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e92:	2301      	movs	r3, #1
 8002e94:	e00f      	b.n	8002eb6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e96:	4a0a      	ldr	r2, [pc, #40]	; (8002ec0 <SysTick_Config+0x40>)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	3b01      	subs	r3, #1
 8002e9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e9e:	210f      	movs	r1, #15
 8002ea0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002ea4:	f7ff ff8e 	bl	8002dc4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ea8:	4b05      	ldr	r3, [pc, #20]	; (8002ec0 <SysTick_Config+0x40>)
 8002eaa:	2200      	movs	r2, #0
 8002eac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002eae:	4b04      	ldr	r3, [pc, #16]	; (8002ec0 <SysTick_Config+0x40>)
 8002eb0:	2207      	movs	r2, #7
 8002eb2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002eb4:	2300      	movs	r3, #0
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	3708      	adds	r7, #8
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}
 8002ebe:	bf00      	nop
 8002ec0:	e000e010 	.word	0xe000e010

08002ec4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b082      	sub	sp, #8
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ecc:	6878      	ldr	r0, [r7, #4]
 8002ece:	f7ff ff29 	bl	8002d24 <__NVIC_SetPriorityGrouping>
}
 8002ed2:	bf00      	nop
 8002ed4:	3708      	adds	r7, #8
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}

08002eda <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002eda:	b580      	push	{r7, lr}
 8002edc:	b086      	sub	sp, #24
 8002ede:	af00      	add	r7, sp, #0
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	60b9      	str	r1, [r7, #8]
 8002ee4:	607a      	str	r2, [r7, #4]
 8002ee6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ee8:	2300      	movs	r3, #0
 8002eea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002eec:	f7ff ff3e 	bl	8002d6c <__NVIC_GetPriorityGrouping>
 8002ef0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ef2:	687a      	ldr	r2, [r7, #4]
 8002ef4:	68b9      	ldr	r1, [r7, #8]
 8002ef6:	6978      	ldr	r0, [r7, #20]
 8002ef8:	f7ff ff8e 	bl	8002e18 <NVIC_EncodePriority>
 8002efc:	4602      	mov	r2, r0
 8002efe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f02:	4611      	mov	r1, r2
 8002f04:	4618      	mov	r0, r3
 8002f06:	f7ff ff5d 	bl	8002dc4 <__NVIC_SetPriority>
}
 8002f0a:	bf00      	nop
 8002f0c:	3718      	adds	r7, #24
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd80      	pop	{r7, pc}

08002f12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f12:	b580      	push	{r7, lr}
 8002f14:	b082      	sub	sp, #8
 8002f16:	af00      	add	r7, sp, #0
 8002f18:	4603      	mov	r3, r0
 8002f1a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f20:	4618      	mov	r0, r3
 8002f22:	f7ff ff31 	bl	8002d88 <__NVIC_EnableIRQ>
}
 8002f26:	bf00      	nop
 8002f28:	3708      	adds	r7, #8
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}

08002f2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f2e:	b580      	push	{r7, lr}
 8002f30:	b082      	sub	sp, #8
 8002f32:	af00      	add	r7, sp, #0
 8002f34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f36:	6878      	ldr	r0, [r7, #4]
 8002f38:	f7ff ffa2 	bl	8002e80 <SysTick_Config>
 8002f3c:	4603      	mov	r3, r0
}
 8002f3e:	4618      	mov	r0, r3
 8002f40:	3708      	adds	r7, #8
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd80      	pop	{r7, pc}
	...

08002f48 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b086      	sub	sp, #24
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002f50:	2300      	movs	r3, #0
 8002f52:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002f54:	f7ff f814 	bl	8001f80 <HAL_GetTick>
 8002f58:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d101      	bne.n	8002f64 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002f60:	2301      	movs	r3, #1
 8002f62:	e099      	b.n	8003098 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2202      	movs	r2, #2
 8002f68:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	681a      	ldr	r2, [r3, #0]
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f022 0201 	bic.w	r2, r2, #1
 8002f82:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f84:	e00f      	b.n	8002fa6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002f86:	f7fe fffb 	bl	8001f80 <HAL_GetTick>
 8002f8a:	4602      	mov	r2, r0
 8002f8c:	693b      	ldr	r3, [r7, #16]
 8002f8e:	1ad3      	subs	r3, r2, r3
 8002f90:	2b05      	cmp	r3, #5
 8002f92:	d908      	bls.n	8002fa6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2220      	movs	r2, #32
 8002f98:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2203      	movs	r2, #3
 8002f9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002fa2:	2303      	movs	r3, #3
 8002fa4:	e078      	b.n	8003098 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f003 0301 	and.w	r3, r3, #1
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d1e8      	bne.n	8002f86 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002fbc:	697a      	ldr	r2, [r7, #20]
 8002fbe:	4b38      	ldr	r3, [pc, #224]	; (80030a0 <HAL_DMA_Init+0x158>)
 8002fc0:	4013      	ands	r3, r2
 8002fc2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	685a      	ldr	r2, [r3, #4]
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	689b      	ldr	r3, [r3, #8]
 8002fcc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002fd2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	691b      	ldr	r3, [r3, #16]
 8002fd8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002fde:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	699b      	ldr	r3, [r3, #24]
 8002fe4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002fea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6a1b      	ldr	r3, [r3, #32]
 8002ff0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002ff2:	697a      	ldr	r2, [r7, #20]
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ffc:	2b04      	cmp	r3, #4
 8002ffe:	d107      	bne.n	8003010 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003008:	4313      	orrs	r3, r2
 800300a:	697a      	ldr	r2, [r7, #20]
 800300c:	4313      	orrs	r3, r2
 800300e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	697a      	ldr	r2, [r7, #20]
 8003016:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	695b      	ldr	r3, [r3, #20]
 800301e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003020:	697b      	ldr	r3, [r7, #20]
 8003022:	f023 0307 	bic.w	r3, r3, #7
 8003026:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800302c:	697a      	ldr	r2, [r7, #20]
 800302e:	4313      	orrs	r3, r2
 8003030:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003036:	2b04      	cmp	r3, #4
 8003038:	d117      	bne.n	800306a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800303e:	697a      	ldr	r2, [r7, #20]
 8003040:	4313      	orrs	r3, r2
 8003042:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003048:	2b00      	cmp	r3, #0
 800304a:	d00e      	beq.n	800306a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800304c:	6878      	ldr	r0, [r7, #4]
 800304e:	f000 fb01 	bl	8003654 <DMA_CheckFifoParam>
 8003052:	4603      	mov	r3, r0
 8003054:	2b00      	cmp	r3, #0
 8003056:	d008      	beq.n	800306a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2240      	movs	r2, #64	; 0x40
 800305c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2201      	movs	r2, #1
 8003062:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003066:	2301      	movs	r3, #1
 8003068:	e016      	b.n	8003098 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	697a      	ldr	r2, [r7, #20]
 8003070:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003072:	6878      	ldr	r0, [r7, #4]
 8003074:	f000 fab8 	bl	80035e8 <DMA_CalcBaseAndBitshift>
 8003078:	4603      	mov	r3, r0
 800307a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003080:	223f      	movs	r2, #63	; 0x3f
 8003082:	409a      	lsls	r2, r3
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2200      	movs	r2, #0
 800308c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2201      	movs	r2, #1
 8003092:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003096:	2300      	movs	r3, #0
}
 8003098:	4618      	mov	r0, r3
 800309a:	3718      	adds	r7, #24
 800309c:	46bd      	mov	sp, r7
 800309e:	bd80      	pop	{r7, pc}
 80030a0:	f010803f 	.word	0xf010803f

080030a4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b086      	sub	sp, #24
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	60f8      	str	r0, [r7, #12]
 80030ac:	60b9      	str	r1, [r7, #8]
 80030ae:	607a      	str	r2, [r7, #4]
 80030b0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80030b2:	2300      	movs	r3, #0
 80030b4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030ba:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80030c2:	2b01      	cmp	r3, #1
 80030c4:	d101      	bne.n	80030ca <HAL_DMA_Start_IT+0x26>
 80030c6:	2302      	movs	r3, #2
 80030c8:	e040      	b.n	800314c <HAL_DMA_Start_IT+0xa8>
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	2201      	movs	r2, #1
 80030ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80030d8:	b2db      	uxtb	r3, r3
 80030da:	2b01      	cmp	r3, #1
 80030dc:	d12f      	bne.n	800313e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	2202      	movs	r2, #2
 80030e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	2200      	movs	r2, #0
 80030ea:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	687a      	ldr	r2, [r7, #4]
 80030f0:	68b9      	ldr	r1, [r7, #8]
 80030f2:	68f8      	ldr	r0, [r7, #12]
 80030f4:	f000 fa4a 	bl	800358c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030fc:	223f      	movs	r2, #63	; 0x3f
 80030fe:	409a      	lsls	r2, r3
 8003100:	693b      	ldr	r3, [r7, #16]
 8003102:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	681a      	ldr	r2, [r3, #0]
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f042 0216 	orr.w	r2, r2, #22
 8003112:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003118:	2b00      	cmp	r3, #0
 800311a:	d007      	beq.n	800312c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	681a      	ldr	r2, [r3, #0]
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f042 0208 	orr.w	r2, r2, #8
 800312a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	681a      	ldr	r2, [r3, #0]
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f042 0201 	orr.w	r2, r2, #1
 800313a:	601a      	str	r2, [r3, #0]
 800313c:	e005      	b.n	800314a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	2200      	movs	r2, #0
 8003142:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003146:	2302      	movs	r3, #2
 8003148:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800314a:	7dfb      	ldrb	r3, [r7, #23]
}
 800314c:	4618      	mov	r0, r3
 800314e:	3718      	adds	r7, #24
 8003150:	46bd      	mov	sp, r7
 8003152:	bd80      	pop	{r7, pc}

08003154 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b084      	sub	sp, #16
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003160:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003162:	f7fe ff0d 	bl	8001f80 <HAL_GetTick>
 8003166:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800316e:	b2db      	uxtb	r3, r3
 8003170:	2b02      	cmp	r3, #2
 8003172:	d008      	beq.n	8003186 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2280      	movs	r2, #128	; 0x80
 8003178:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2200      	movs	r2, #0
 800317e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003182:	2301      	movs	r3, #1
 8003184:	e052      	b.n	800322c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	681a      	ldr	r2, [r3, #0]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f022 0216 	bic.w	r2, r2, #22
 8003194:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	695a      	ldr	r2, [r3, #20]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80031a4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d103      	bne.n	80031b6 <HAL_DMA_Abort+0x62>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d007      	beq.n	80031c6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	681a      	ldr	r2, [r3, #0]
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f022 0208 	bic.w	r2, r2, #8
 80031c4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	681a      	ldr	r2, [r3, #0]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f022 0201 	bic.w	r2, r2, #1
 80031d4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80031d6:	e013      	b.n	8003200 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80031d8:	f7fe fed2 	bl	8001f80 <HAL_GetTick>
 80031dc:	4602      	mov	r2, r0
 80031de:	68bb      	ldr	r3, [r7, #8]
 80031e0:	1ad3      	subs	r3, r2, r3
 80031e2:	2b05      	cmp	r3, #5
 80031e4:	d90c      	bls.n	8003200 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2220      	movs	r2, #32
 80031ea:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2203      	movs	r2, #3
 80031f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2200      	movs	r2, #0
 80031f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80031fc:	2303      	movs	r3, #3
 80031fe:	e015      	b.n	800322c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f003 0301 	and.w	r3, r3, #1
 800320a:	2b00      	cmp	r3, #0
 800320c:	d1e4      	bne.n	80031d8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003212:	223f      	movs	r2, #63	; 0x3f
 8003214:	409a      	lsls	r2, r3
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2201      	movs	r2, #1
 800321e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2200      	movs	r2, #0
 8003226:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800322a:	2300      	movs	r3, #0
}
 800322c:	4618      	mov	r0, r3
 800322e:	3710      	adds	r7, #16
 8003230:	46bd      	mov	sp, r7
 8003232:	bd80      	pop	{r7, pc}

08003234 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003234:	b480      	push	{r7}
 8003236:	b083      	sub	sp, #12
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003242:	b2db      	uxtb	r3, r3
 8003244:	2b02      	cmp	r3, #2
 8003246:	d004      	beq.n	8003252 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2280      	movs	r2, #128	; 0x80
 800324c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800324e:	2301      	movs	r3, #1
 8003250:	e00c      	b.n	800326c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2205      	movs	r2, #5
 8003256:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	681a      	ldr	r2, [r3, #0]
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f022 0201 	bic.w	r2, r2, #1
 8003268:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800326a:	2300      	movs	r3, #0
}
 800326c:	4618      	mov	r0, r3
 800326e:	370c      	adds	r7, #12
 8003270:	46bd      	mov	sp, r7
 8003272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003276:	4770      	bx	lr

08003278 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b086      	sub	sp, #24
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003280:	2300      	movs	r3, #0
 8003282:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003284:	4b8e      	ldr	r3, [pc, #568]	; (80034c0 <HAL_DMA_IRQHandler+0x248>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a8e      	ldr	r2, [pc, #568]	; (80034c4 <HAL_DMA_IRQHandler+0x24c>)
 800328a:	fba2 2303 	umull	r2, r3, r2, r3
 800328e:	0a9b      	lsrs	r3, r3, #10
 8003290:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003296:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003298:	693b      	ldr	r3, [r7, #16]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032a2:	2208      	movs	r2, #8
 80032a4:	409a      	lsls	r2, r3
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	4013      	ands	r3, r2
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d01a      	beq.n	80032e4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f003 0304 	and.w	r3, r3, #4
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d013      	beq.n	80032e4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	681a      	ldr	r2, [r3, #0]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f022 0204 	bic.w	r2, r2, #4
 80032ca:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032d0:	2208      	movs	r2, #8
 80032d2:	409a      	lsls	r2, r3
 80032d4:	693b      	ldr	r3, [r7, #16]
 80032d6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032dc:	f043 0201 	orr.w	r2, r3, #1
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032e8:	2201      	movs	r2, #1
 80032ea:	409a      	lsls	r2, r3
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	4013      	ands	r3, r2
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d012      	beq.n	800331a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	695b      	ldr	r3, [r3, #20]
 80032fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d00b      	beq.n	800331a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003306:	2201      	movs	r2, #1
 8003308:	409a      	lsls	r2, r3
 800330a:	693b      	ldr	r3, [r7, #16]
 800330c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003312:	f043 0202 	orr.w	r2, r3, #2
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800331e:	2204      	movs	r2, #4
 8003320:	409a      	lsls	r2, r3
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	4013      	ands	r3, r2
 8003326:	2b00      	cmp	r3, #0
 8003328:	d012      	beq.n	8003350 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f003 0302 	and.w	r3, r3, #2
 8003334:	2b00      	cmp	r3, #0
 8003336:	d00b      	beq.n	8003350 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800333c:	2204      	movs	r2, #4
 800333e:	409a      	lsls	r2, r3
 8003340:	693b      	ldr	r3, [r7, #16]
 8003342:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003348:	f043 0204 	orr.w	r2, r3, #4
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003354:	2210      	movs	r2, #16
 8003356:	409a      	lsls	r2, r3
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	4013      	ands	r3, r2
 800335c:	2b00      	cmp	r3, #0
 800335e:	d043      	beq.n	80033e8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f003 0308 	and.w	r3, r3, #8
 800336a:	2b00      	cmp	r3, #0
 800336c:	d03c      	beq.n	80033e8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003372:	2210      	movs	r2, #16
 8003374:	409a      	lsls	r2, r3
 8003376:	693b      	ldr	r3, [r7, #16]
 8003378:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003384:	2b00      	cmp	r3, #0
 8003386:	d018      	beq.n	80033ba <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003392:	2b00      	cmp	r3, #0
 8003394:	d108      	bne.n	80033a8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800339a:	2b00      	cmp	r3, #0
 800339c:	d024      	beq.n	80033e8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a2:	6878      	ldr	r0, [r7, #4]
 80033a4:	4798      	blx	r3
 80033a6:	e01f      	b.n	80033e8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d01b      	beq.n	80033e8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033b4:	6878      	ldr	r0, [r7, #4]
 80033b6:	4798      	blx	r3
 80033b8:	e016      	b.n	80033e8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d107      	bne.n	80033d8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	681a      	ldr	r2, [r3, #0]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f022 0208 	bic.w	r2, r2, #8
 80033d6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d003      	beq.n	80033e8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e4:	6878      	ldr	r0, [r7, #4]
 80033e6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033ec:	2220      	movs	r2, #32
 80033ee:	409a      	lsls	r2, r3
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	4013      	ands	r3, r2
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	f000 808f 	beq.w	8003518 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f003 0310 	and.w	r3, r3, #16
 8003404:	2b00      	cmp	r3, #0
 8003406:	f000 8087 	beq.w	8003518 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800340e:	2220      	movs	r2, #32
 8003410:	409a      	lsls	r2, r3
 8003412:	693b      	ldr	r3, [r7, #16]
 8003414:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800341c:	b2db      	uxtb	r3, r3
 800341e:	2b05      	cmp	r3, #5
 8003420:	d136      	bne.n	8003490 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	681a      	ldr	r2, [r3, #0]
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f022 0216 	bic.w	r2, r2, #22
 8003430:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	695a      	ldr	r2, [r3, #20]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003440:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003446:	2b00      	cmp	r3, #0
 8003448:	d103      	bne.n	8003452 <HAL_DMA_IRQHandler+0x1da>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800344e:	2b00      	cmp	r3, #0
 8003450:	d007      	beq.n	8003462 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	681a      	ldr	r2, [r3, #0]
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f022 0208 	bic.w	r2, r2, #8
 8003460:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003466:	223f      	movs	r2, #63	; 0x3f
 8003468:	409a      	lsls	r2, r3
 800346a:	693b      	ldr	r3, [r7, #16]
 800346c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2201      	movs	r2, #1
 8003472:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2200      	movs	r2, #0
 800347a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003482:	2b00      	cmp	r3, #0
 8003484:	d07e      	beq.n	8003584 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800348a:	6878      	ldr	r0, [r7, #4]
 800348c:	4798      	blx	r3
        }
        return;
 800348e:	e079      	b.n	8003584 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800349a:	2b00      	cmp	r3, #0
 800349c:	d01d      	beq.n	80034da <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d10d      	bne.n	80034c8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d031      	beq.n	8003518 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034b8:	6878      	ldr	r0, [r7, #4]
 80034ba:	4798      	blx	r3
 80034bc:	e02c      	b.n	8003518 <HAL_DMA_IRQHandler+0x2a0>
 80034be:	bf00      	nop
 80034c0:	20000000 	.word	0x20000000
 80034c4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d023      	beq.n	8003518 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034d4:	6878      	ldr	r0, [r7, #4]
 80034d6:	4798      	blx	r3
 80034d8:	e01e      	b.n	8003518 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d10f      	bne.n	8003508 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	681a      	ldr	r2, [r3, #0]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f022 0210 	bic.w	r2, r2, #16
 80034f6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2201      	movs	r2, #1
 80034fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2200      	movs	r2, #0
 8003504:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800350c:	2b00      	cmp	r3, #0
 800350e:	d003      	beq.n	8003518 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003514:	6878      	ldr	r0, [r7, #4]
 8003516:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800351c:	2b00      	cmp	r3, #0
 800351e:	d032      	beq.n	8003586 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003524:	f003 0301 	and.w	r3, r3, #1
 8003528:	2b00      	cmp	r3, #0
 800352a:	d022      	beq.n	8003572 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2205      	movs	r2, #5
 8003530:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	681a      	ldr	r2, [r3, #0]
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f022 0201 	bic.w	r2, r2, #1
 8003542:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	3301      	adds	r3, #1
 8003548:	60bb      	str	r3, [r7, #8]
 800354a:	697a      	ldr	r2, [r7, #20]
 800354c:	429a      	cmp	r2, r3
 800354e:	d307      	bcc.n	8003560 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f003 0301 	and.w	r3, r3, #1
 800355a:	2b00      	cmp	r3, #0
 800355c:	d1f2      	bne.n	8003544 <HAL_DMA_IRQHandler+0x2cc>
 800355e:	e000      	b.n	8003562 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003560:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2201      	movs	r2, #1
 8003566:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2200      	movs	r2, #0
 800356e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003576:	2b00      	cmp	r3, #0
 8003578:	d005      	beq.n	8003586 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800357e:	6878      	ldr	r0, [r7, #4]
 8003580:	4798      	blx	r3
 8003582:	e000      	b.n	8003586 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003584:	bf00      	nop
    }
  }
}
 8003586:	3718      	adds	r7, #24
 8003588:	46bd      	mov	sp, r7
 800358a:	bd80      	pop	{r7, pc}

0800358c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800358c:	b480      	push	{r7}
 800358e:	b085      	sub	sp, #20
 8003590:	af00      	add	r7, sp, #0
 8003592:	60f8      	str	r0, [r7, #12]
 8003594:	60b9      	str	r1, [r7, #8]
 8003596:	607a      	str	r2, [r7, #4]
 8003598:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	681a      	ldr	r2, [r3, #0]
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80035a8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	683a      	ldr	r2, [r7, #0]
 80035b0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	689b      	ldr	r3, [r3, #8]
 80035b6:	2b40      	cmp	r3, #64	; 0x40
 80035b8:	d108      	bne.n	80035cc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	687a      	ldr	r2, [r7, #4]
 80035c0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	68ba      	ldr	r2, [r7, #8]
 80035c8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80035ca:	e007      	b.n	80035dc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	68ba      	ldr	r2, [r7, #8]
 80035d2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	687a      	ldr	r2, [r7, #4]
 80035da:	60da      	str	r2, [r3, #12]
}
 80035dc:	bf00      	nop
 80035de:	3714      	adds	r7, #20
 80035e0:	46bd      	mov	sp, r7
 80035e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e6:	4770      	bx	lr

080035e8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80035e8:	b480      	push	{r7}
 80035ea:	b085      	sub	sp, #20
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	b2db      	uxtb	r3, r3
 80035f6:	3b10      	subs	r3, #16
 80035f8:	4a14      	ldr	r2, [pc, #80]	; (800364c <DMA_CalcBaseAndBitshift+0x64>)
 80035fa:	fba2 2303 	umull	r2, r3, r2, r3
 80035fe:	091b      	lsrs	r3, r3, #4
 8003600:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003602:	4a13      	ldr	r2, [pc, #76]	; (8003650 <DMA_CalcBaseAndBitshift+0x68>)
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	4413      	add	r3, r2
 8003608:	781b      	ldrb	r3, [r3, #0]
 800360a:	461a      	mov	r2, r3
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	2b03      	cmp	r3, #3
 8003614:	d909      	bls.n	800362a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800361e:	f023 0303 	bic.w	r3, r3, #3
 8003622:	1d1a      	adds	r2, r3, #4
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	659a      	str	r2, [r3, #88]	; 0x58
 8003628:	e007      	b.n	800363a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003632:	f023 0303 	bic.w	r3, r3, #3
 8003636:	687a      	ldr	r2, [r7, #4]
 8003638:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800363e:	4618      	mov	r0, r3
 8003640:	3714      	adds	r7, #20
 8003642:	46bd      	mov	sp, r7
 8003644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003648:	4770      	bx	lr
 800364a:	bf00      	nop
 800364c:	aaaaaaab 	.word	0xaaaaaaab
 8003650:	080092b4 	.word	0x080092b4

08003654 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003654:	b480      	push	{r7}
 8003656:	b085      	sub	sp, #20
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800365c:	2300      	movs	r3, #0
 800365e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003664:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	699b      	ldr	r3, [r3, #24]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d11f      	bne.n	80036ae <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800366e:	68bb      	ldr	r3, [r7, #8]
 8003670:	2b03      	cmp	r3, #3
 8003672:	d856      	bhi.n	8003722 <DMA_CheckFifoParam+0xce>
 8003674:	a201      	add	r2, pc, #4	; (adr r2, 800367c <DMA_CheckFifoParam+0x28>)
 8003676:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800367a:	bf00      	nop
 800367c:	0800368d 	.word	0x0800368d
 8003680:	0800369f 	.word	0x0800369f
 8003684:	0800368d 	.word	0x0800368d
 8003688:	08003723 	.word	0x08003723
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003690:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003694:	2b00      	cmp	r3, #0
 8003696:	d046      	beq.n	8003726 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003698:	2301      	movs	r3, #1
 800369a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800369c:	e043      	b.n	8003726 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036a2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80036a6:	d140      	bne.n	800372a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80036a8:	2301      	movs	r3, #1
 80036aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036ac:	e03d      	b.n	800372a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	699b      	ldr	r3, [r3, #24]
 80036b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036b6:	d121      	bne.n	80036fc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80036b8:	68bb      	ldr	r3, [r7, #8]
 80036ba:	2b03      	cmp	r3, #3
 80036bc:	d837      	bhi.n	800372e <DMA_CheckFifoParam+0xda>
 80036be:	a201      	add	r2, pc, #4	; (adr r2, 80036c4 <DMA_CheckFifoParam+0x70>)
 80036c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036c4:	080036d5 	.word	0x080036d5
 80036c8:	080036db 	.word	0x080036db
 80036cc:	080036d5 	.word	0x080036d5
 80036d0:	080036ed 	.word	0x080036ed
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80036d4:	2301      	movs	r3, #1
 80036d6:	73fb      	strb	r3, [r7, #15]
      break;
 80036d8:	e030      	b.n	800373c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036de:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d025      	beq.n	8003732 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80036e6:	2301      	movs	r3, #1
 80036e8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036ea:	e022      	b.n	8003732 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036f0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80036f4:	d11f      	bne.n	8003736 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80036f6:	2301      	movs	r3, #1
 80036f8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80036fa:	e01c      	b.n	8003736 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80036fc:	68bb      	ldr	r3, [r7, #8]
 80036fe:	2b02      	cmp	r3, #2
 8003700:	d903      	bls.n	800370a <DMA_CheckFifoParam+0xb6>
 8003702:	68bb      	ldr	r3, [r7, #8]
 8003704:	2b03      	cmp	r3, #3
 8003706:	d003      	beq.n	8003710 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003708:	e018      	b.n	800373c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800370a:	2301      	movs	r3, #1
 800370c:	73fb      	strb	r3, [r7, #15]
      break;
 800370e:	e015      	b.n	800373c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003714:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003718:	2b00      	cmp	r3, #0
 800371a:	d00e      	beq.n	800373a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800371c:	2301      	movs	r3, #1
 800371e:	73fb      	strb	r3, [r7, #15]
      break;
 8003720:	e00b      	b.n	800373a <DMA_CheckFifoParam+0xe6>
      break;
 8003722:	bf00      	nop
 8003724:	e00a      	b.n	800373c <DMA_CheckFifoParam+0xe8>
      break;
 8003726:	bf00      	nop
 8003728:	e008      	b.n	800373c <DMA_CheckFifoParam+0xe8>
      break;
 800372a:	bf00      	nop
 800372c:	e006      	b.n	800373c <DMA_CheckFifoParam+0xe8>
      break;
 800372e:	bf00      	nop
 8003730:	e004      	b.n	800373c <DMA_CheckFifoParam+0xe8>
      break;
 8003732:	bf00      	nop
 8003734:	e002      	b.n	800373c <DMA_CheckFifoParam+0xe8>
      break;   
 8003736:	bf00      	nop
 8003738:	e000      	b.n	800373c <DMA_CheckFifoParam+0xe8>
      break;
 800373a:	bf00      	nop
    }
  } 
  
  return status; 
 800373c:	7bfb      	ldrb	r3, [r7, #15]
}
 800373e:	4618      	mov	r0, r3
 8003740:	3714      	adds	r7, #20
 8003742:	46bd      	mov	sp, r7
 8003744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003748:	4770      	bx	lr
 800374a:	bf00      	nop

0800374c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800374c:	b480      	push	{r7}
 800374e:	b089      	sub	sp, #36	; 0x24
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
 8003754:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003756:	2300      	movs	r3, #0
 8003758:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800375a:	2300      	movs	r3, #0
 800375c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800375e:	2300      	movs	r3, #0
 8003760:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003762:	2300      	movs	r3, #0
 8003764:	61fb      	str	r3, [r7, #28]
 8003766:	e159      	b.n	8003a1c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003768:	2201      	movs	r2, #1
 800376a:	69fb      	ldr	r3, [r7, #28]
 800376c:	fa02 f303 	lsl.w	r3, r2, r3
 8003770:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	697a      	ldr	r2, [r7, #20]
 8003778:	4013      	ands	r3, r2
 800377a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800377c:	693a      	ldr	r2, [r7, #16]
 800377e:	697b      	ldr	r3, [r7, #20]
 8003780:	429a      	cmp	r2, r3
 8003782:	f040 8148 	bne.w	8003a16 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	f003 0303 	and.w	r3, r3, #3
 800378e:	2b01      	cmp	r3, #1
 8003790:	d005      	beq.n	800379e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800379a:	2b02      	cmp	r3, #2
 800379c:	d130      	bne.n	8003800 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	689b      	ldr	r3, [r3, #8]
 80037a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80037a4:	69fb      	ldr	r3, [r7, #28]
 80037a6:	005b      	lsls	r3, r3, #1
 80037a8:	2203      	movs	r2, #3
 80037aa:	fa02 f303 	lsl.w	r3, r2, r3
 80037ae:	43db      	mvns	r3, r3
 80037b0:	69ba      	ldr	r2, [r7, #24]
 80037b2:	4013      	ands	r3, r2
 80037b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	68da      	ldr	r2, [r3, #12]
 80037ba:	69fb      	ldr	r3, [r7, #28]
 80037bc:	005b      	lsls	r3, r3, #1
 80037be:	fa02 f303 	lsl.w	r3, r2, r3
 80037c2:	69ba      	ldr	r2, [r7, #24]
 80037c4:	4313      	orrs	r3, r2
 80037c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	69ba      	ldr	r2, [r7, #24]
 80037cc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80037d4:	2201      	movs	r2, #1
 80037d6:	69fb      	ldr	r3, [r7, #28]
 80037d8:	fa02 f303 	lsl.w	r3, r2, r3
 80037dc:	43db      	mvns	r3, r3
 80037de:	69ba      	ldr	r2, [r7, #24]
 80037e0:	4013      	ands	r3, r2
 80037e2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	091b      	lsrs	r3, r3, #4
 80037ea:	f003 0201 	and.w	r2, r3, #1
 80037ee:	69fb      	ldr	r3, [r7, #28]
 80037f0:	fa02 f303 	lsl.w	r3, r2, r3
 80037f4:	69ba      	ldr	r2, [r7, #24]
 80037f6:	4313      	orrs	r3, r2
 80037f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	69ba      	ldr	r2, [r7, #24]
 80037fe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	f003 0303 	and.w	r3, r3, #3
 8003808:	2b03      	cmp	r3, #3
 800380a:	d017      	beq.n	800383c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	68db      	ldr	r3, [r3, #12]
 8003810:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003812:	69fb      	ldr	r3, [r7, #28]
 8003814:	005b      	lsls	r3, r3, #1
 8003816:	2203      	movs	r2, #3
 8003818:	fa02 f303 	lsl.w	r3, r2, r3
 800381c:	43db      	mvns	r3, r3
 800381e:	69ba      	ldr	r2, [r7, #24]
 8003820:	4013      	ands	r3, r2
 8003822:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	689a      	ldr	r2, [r3, #8]
 8003828:	69fb      	ldr	r3, [r7, #28]
 800382a:	005b      	lsls	r3, r3, #1
 800382c:	fa02 f303 	lsl.w	r3, r2, r3
 8003830:	69ba      	ldr	r2, [r7, #24]
 8003832:	4313      	orrs	r3, r2
 8003834:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	69ba      	ldr	r2, [r7, #24]
 800383a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	f003 0303 	and.w	r3, r3, #3
 8003844:	2b02      	cmp	r3, #2
 8003846:	d123      	bne.n	8003890 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003848:	69fb      	ldr	r3, [r7, #28]
 800384a:	08da      	lsrs	r2, r3, #3
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	3208      	adds	r2, #8
 8003850:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003854:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003856:	69fb      	ldr	r3, [r7, #28]
 8003858:	f003 0307 	and.w	r3, r3, #7
 800385c:	009b      	lsls	r3, r3, #2
 800385e:	220f      	movs	r2, #15
 8003860:	fa02 f303 	lsl.w	r3, r2, r3
 8003864:	43db      	mvns	r3, r3
 8003866:	69ba      	ldr	r2, [r7, #24]
 8003868:	4013      	ands	r3, r2
 800386a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	691a      	ldr	r2, [r3, #16]
 8003870:	69fb      	ldr	r3, [r7, #28]
 8003872:	f003 0307 	and.w	r3, r3, #7
 8003876:	009b      	lsls	r3, r3, #2
 8003878:	fa02 f303 	lsl.w	r3, r2, r3
 800387c:	69ba      	ldr	r2, [r7, #24]
 800387e:	4313      	orrs	r3, r2
 8003880:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003882:	69fb      	ldr	r3, [r7, #28]
 8003884:	08da      	lsrs	r2, r3, #3
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	3208      	adds	r2, #8
 800388a:	69b9      	ldr	r1, [r7, #24]
 800388c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003896:	69fb      	ldr	r3, [r7, #28]
 8003898:	005b      	lsls	r3, r3, #1
 800389a:	2203      	movs	r2, #3
 800389c:	fa02 f303 	lsl.w	r3, r2, r3
 80038a0:	43db      	mvns	r3, r3
 80038a2:	69ba      	ldr	r2, [r7, #24]
 80038a4:	4013      	ands	r3, r2
 80038a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	f003 0203 	and.w	r2, r3, #3
 80038b0:	69fb      	ldr	r3, [r7, #28]
 80038b2:	005b      	lsls	r3, r3, #1
 80038b4:	fa02 f303 	lsl.w	r3, r2, r3
 80038b8:	69ba      	ldr	r2, [r7, #24]
 80038ba:	4313      	orrs	r3, r2
 80038bc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	69ba      	ldr	r2, [r7, #24]
 80038c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	f000 80a2 	beq.w	8003a16 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80038d2:	2300      	movs	r3, #0
 80038d4:	60fb      	str	r3, [r7, #12]
 80038d6:	4b57      	ldr	r3, [pc, #348]	; (8003a34 <HAL_GPIO_Init+0x2e8>)
 80038d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038da:	4a56      	ldr	r2, [pc, #344]	; (8003a34 <HAL_GPIO_Init+0x2e8>)
 80038dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80038e0:	6453      	str	r3, [r2, #68]	; 0x44
 80038e2:	4b54      	ldr	r3, [pc, #336]	; (8003a34 <HAL_GPIO_Init+0x2e8>)
 80038e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80038ea:	60fb      	str	r3, [r7, #12]
 80038ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80038ee:	4a52      	ldr	r2, [pc, #328]	; (8003a38 <HAL_GPIO_Init+0x2ec>)
 80038f0:	69fb      	ldr	r3, [r7, #28]
 80038f2:	089b      	lsrs	r3, r3, #2
 80038f4:	3302      	adds	r3, #2
 80038f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80038fc:	69fb      	ldr	r3, [r7, #28]
 80038fe:	f003 0303 	and.w	r3, r3, #3
 8003902:	009b      	lsls	r3, r3, #2
 8003904:	220f      	movs	r2, #15
 8003906:	fa02 f303 	lsl.w	r3, r2, r3
 800390a:	43db      	mvns	r3, r3
 800390c:	69ba      	ldr	r2, [r7, #24]
 800390e:	4013      	ands	r3, r2
 8003910:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	4a49      	ldr	r2, [pc, #292]	; (8003a3c <HAL_GPIO_Init+0x2f0>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d019      	beq.n	800394e <HAL_GPIO_Init+0x202>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	4a48      	ldr	r2, [pc, #288]	; (8003a40 <HAL_GPIO_Init+0x2f4>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d013      	beq.n	800394a <HAL_GPIO_Init+0x1fe>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	4a47      	ldr	r2, [pc, #284]	; (8003a44 <HAL_GPIO_Init+0x2f8>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d00d      	beq.n	8003946 <HAL_GPIO_Init+0x1fa>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	4a46      	ldr	r2, [pc, #280]	; (8003a48 <HAL_GPIO_Init+0x2fc>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d007      	beq.n	8003942 <HAL_GPIO_Init+0x1f6>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	4a45      	ldr	r2, [pc, #276]	; (8003a4c <HAL_GPIO_Init+0x300>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d101      	bne.n	800393e <HAL_GPIO_Init+0x1f2>
 800393a:	2304      	movs	r3, #4
 800393c:	e008      	b.n	8003950 <HAL_GPIO_Init+0x204>
 800393e:	2307      	movs	r3, #7
 8003940:	e006      	b.n	8003950 <HAL_GPIO_Init+0x204>
 8003942:	2303      	movs	r3, #3
 8003944:	e004      	b.n	8003950 <HAL_GPIO_Init+0x204>
 8003946:	2302      	movs	r3, #2
 8003948:	e002      	b.n	8003950 <HAL_GPIO_Init+0x204>
 800394a:	2301      	movs	r3, #1
 800394c:	e000      	b.n	8003950 <HAL_GPIO_Init+0x204>
 800394e:	2300      	movs	r3, #0
 8003950:	69fa      	ldr	r2, [r7, #28]
 8003952:	f002 0203 	and.w	r2, r2, #3
 8003956:	0092      	lsls	r2, r2, #2
 8003958:	4093      	lsls	r3, r2
 800395a:	69ba      	ldr	r2, [r7, #24]
 800395c:	4313      	orrs	r3, r2
 800395e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003960:	4935      	ldr	r1, [pc, #212]	; (8003a38 <HAL_GPIO_Init+0x2ec>)
 8003962:	69fb      	ldr	r3, [r7, #28]
 8003964:	089b      	lsrs	r3, r3, #2
 8003966:	3302      	adds	r3, #2
 8003968:	69ba      	ldr	r2, [r7, #24]
 800396a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800396e:	4b38      	ldr	r3, [pc, #224]	; (8003a50 <HAL_GPIO_Init+0x304>)
 8003970:	689b      	ldr	r3, [r3, #8]
 8003972:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003974:	693b      	ldr	r3, [r7, #16]
 8003976:	43db      	mvns	r3, r3
 8003978:	69ba      	ldr	r2, [r7, #24]
 800397a:	4013      	ands	r3, r2
 800397c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003986:	2b00      	cmp	r3, #0
 8003988:	d003      	beq.n	8003992 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800398a:	69ba      	ldr	r2, [r7, #24]
 800398c:	693b      	ldr	r3, [r7, #16]
 800398e:	4313      	orrs	r3, r2
 8003990:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003992:	4a2f      	ldr	r2, [pc, #188]	; (8003a50 <HAL_GPIO_Init+0x304>)
 8003994:	69bb      	ldr	r3, [r7, #24]
 8003996:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003998:	4b2d      	ldr	r3, [pc, #180]	; (8003a50 <HAL_GPIO_Init+0x304>)
 800399a:	68db      	ldr	r3, [r3, #12]
 800399c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800399e:	693b      	ldr	r3, [r7, #16]
 80039a0:	43db      	mvns	r3, r3
 80039a2:	69ba      	ldr	r2, [r7, #24]
 80039a4:	4013      	ands	r3, r2
 80039a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d003      	beq.n	80039bc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80039b4:	69ba      	ldr	r2, [r7, #24]
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	4313      	orrs	r3, r2
 80039ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80039bc:	4a24      	ldr	r2, [pc, #144]	; (8003a50 <HAL_GPIO_Init+0x304>)
 80039be:	69bb      	ldr	r3, [r7, #24]
 80039c0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80039c2:	4b23      	ldr	r3, [pc, #140]	; (8003a50 <HAL_GPIO_Init+0x304>)
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039c8:	693b      	ldr	r3, [r7, #16]
 80039ca:	43db      	mvns	r3, r3
 80039cc:	69ba      	ldr	r2, [r7, #24]
 80039ce:	4013      	ands	r3, r2
 80039d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d003      	beq.n	80039e6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80039de:	69ba      	ldr	r2, [r7, #24]
 80039e0:	693b      	ldr	r3, [r7, #16]
 80039e2:	4313      	orrs	r3, r2
 80039e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80039e6:	4a1a      	ldr	r2, [pc, #104]	; (8003a50 <HAL_GPIO_Init+0x304>)
 80039e8:	69bb      	ldr	r3, [r7, #24]
 80039ea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80039ec:	4b18      	ldr	r3, [pc, #96]	; (8003a50 <HAL_GPIO_Init+0x304>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039f2:	693b      	ldr	r3, [r7, #16]
 80039f4:	43db      	mvns	r3, r3
 80039f6:	69ba      	ldr	r2, [r7, #24]
 80039f8:	4013      	ands	r3, r2
 80039fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d003      	beq.n	8003a10 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003a08:	69ba      	ldr	r2, [r7, #24]
 8003a0a:	693b      	ldr	r3, [r7, #16]
 8003a0c:	4313      	orrs	r3, r2
 8003a0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003a10:	4a0f      	ldr	r2, [pc, #60]	; (8003a50 <HAL_GPIO_Init+0x304>)
 8003a12:	69bb      	ldr	r3, [r7, #24]
 8003a14:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003a16:	69fb      	ldr	r3, [r7, #28]
 8003a18:	3301      	adds	r3, #1
 8003a1a:	61fb      	str	r3, [r7, #28]
 8003a1c:	69fb      	ldr	r3, [r7, #28]
 8003a1e:	2b0f      	cmp	r3, #15
 8003a20:	f67f aea2 	bls.w	8003768 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003a24:	bf00      	nop
 8003a26:	bf00      	nop
 8003a28:	3724      	adds	r7, #36	; 0x24
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a30:	4770      	bx	lr
 8003a32:	bf00      	nop
 8003a34:	40023800 	.word	0x40023800
 8003a38:	40013800 	.word	0x40013800
 8003a3c:	40020000 	.word	0x40020000
 8003a40:	40020400 	.word	0x40020400
 8003a44:	40020800 	.word	0x40020800
 8003a48:	40020c00 	.word	0x40020c00
 8003a4c:	40021000 	.word	0x40021000
 8003a50:	40013c00 	.word	0x40013c00

08003a54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a54:	b480      	push	{r7}
 8003a56:	b083      	sub	sp, #12
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
 8003a5c:	460b      	mov	r3, r1
 8003a5e:	807b      	strh	r3, [r7, #2]
 8003a60:	4613      	mov	r3, r2
 8003a62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003a64:	787b      	ldrb	r3, [r7, #1]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d003      	beq.n	8003a72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003a6a:	887a      	ldrh	r2, [r7, #2]
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003a70:	e003      	b.n	8003a7a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003a72:	887b      	ldrh	r3, [r7, #2]
 8003a74:	041a      	lsls	r2, r3, #16
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	619a      	str	r2, [r3, #24]
}
 8003a7a:	bf00      	nop
 8003a7c:	370c      	adds	r7, #12
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a84:	4770      	bx	lr

08003a86 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003a86:	b480      	push	{r7}
 8003a88:	b085      	sub	sp, #20
 8003a8a:	af00      	add	r7, sp, #0
 8003a8c:	6078      	str	r0, [r7, #4]
 8003a8e:	460b      	mov	r3, r1
 8003a90:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	695b      	ldr	r3, [r3, #20]
 8003a96:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003a98:	887a      	ldrh	r2, [r7, #2]
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	4013      	ands	r3, r2
 8003a9e:	041a      	lsls	r2, r3, #16
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	43d9      	mvns	r1, r3
 8003aa4:	887b      	ldrh	r3, [r7, #2]
 8003aa6:	400b      	ands	r3, r1
 8003aa8:	431a      	orrs	r2, r3
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	619a      	str	r2, [r3, #24]
}
 8003aae:	bf00      	nop
 8003ab0:	3714      	adds	r7, #20
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab8:	4770      	bx	lr
	...

08003abc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b086      	sub	sp, #24
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d101      	bne.n	8003ace <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003aca:	2301      	movs	r3, #1
 8003acc:	e267      	b.n	8003f9e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f003 0301 	and.w	r3, r3, #1
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d075      	beq.n	8003bc6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003ada:	4b88      	ldr	r3, [pc, #544]	; (8003cfc <HAL_RCC_OscConfig+0x240>)
 8003adc:	689b      	ldr	r3, [r3, #8]
 8003ade:	f003 030c 	and.w	r3, r3, #12
 8003ae2:	2b04      	cmp	r3, #4
 8003ae4:	d00c      	beq.n	8003b00 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ae6:	4b85      	ldr	r3, [pc, #532]	; (8003cfc <HAL_RCC_OscConfig+0x240>)
 8003ae8:	689b      	ldr	r3, [r3, #8]
 8003aea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003aee:	2b08      	cmp	r3, #8
 8003af0:	d112      	bne.n	8003b18 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003af2:	4b82      	ldr	r3, [pc, #520]	; (8003cfc <HAL_RCC_OscConfig+0x240>)
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003afa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003afe:	d10b      	bne.n	8003b18 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b00:	4b7e      	ldr	r3, [pc, #504]	; (8003cfc <HAL_RCC_OscConfig+0x240>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d05b      	beq.n	8003bc4 <HAL_RCC_OscConfig+0x108>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d157      	bne.n	8003bc4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003b14:	2301      	movs	r3, #1
 8003b16:	e242      	b.n	8003f9e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b20:	d106      	bne.n	8003b30 <HAL_RCC_OscConfig+0x74>
 8003b22:	4b76      	ldr	r3, [pc, #472]	; (8003cfc <HAL_RCC_OscConfig+0x240>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4a75      	ldr	r2, [pc, #468]	; (8003cfc <HAL_RCC_OscConfig+0x240>)
 8003b28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b2c:	6013      	str	r3, [r2, #0]
 8003b2e:	e01d      	b.n	8003b6c <HAL_RCC_OscConfig+0xb0>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b38:	d10c      	bne.n	8003b54 <HAL_RCC_OscConfig+0x98>
 8003b3a:	4b70      	ldr	r3, [pc, #448]	; (8003cfc <HAL_RCC_OscConfig+0x240>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4a6f      	ldr	r2, [pc, #444]	; (8003cfc <HAL_RCC_OscConfig+0x240>)
 8003b40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b44:	6013      	str	r3, [r2, #0]
 8003b46:	4b6d      	ldr	r3, [pc, #436]	; (8003cfc <HAL_RCC_OscConfig+0x240>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a6c      	ldr	r2, [pc, #432]	; (8003cfc <HAL_RCC_OscConfig+0x240>)
 8003b4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b50:	6013      	str	r3, [r2, #0]
 8003b52:	e00b      	b.n	8003b6c <HAL_RCC_OscConfig+0xb0>
 8003b54:	4b69      	ldr	r3, [pc, #420]	; (8003cfc <HAL_RCC_OscConfig+0x240>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4a68      	ldr	r2, [pc, #416]	; (8003cfc <HAL_RCC_OscConfig+0x240>)
 8003b5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b5e:	6013      	str	r3, [r2, #0]
 8003b60:	4b66      	ldr	r3, [pc, #408]	; (8003cfc <HAL_RCC_OscConfig+0x240>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a65      	ldr	r2, [pc, #404]	; (8003cfc <HAL_RCC_OscConfig+0x240>)
 8003b66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b6a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d013      	beq.n	8003b9c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b74:	f7fe fa04 	bl	8001f80 <HAL_GetTick>
 8003b78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b7a:	e008      	b.n	8003b8e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b7c:	f7fe fa00 	bl	8001f80 <HAL_GetTick>
 8003b80:	4602      	mov	r2, r0
 8003b82:	693b      	ldr	r3, [r7, #16]
 8003b84:	1ad3      	subs	r3, r2, r3
 8003b86:	2b64      	cmp	r3, #100	; 0x64
 8003b88:	d901      	bls.n	8003b8e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003b8a:	2303      	movs	r3, #3
 8003b8c:	e207      	b.n	8003f9e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b8e:	4b5b      	ldr	r3, [pc, #364]	; (8003cfc <HAL_RCC_OscConfig+0x240>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d0f0      	beq.n	8003b7c <HAL_RCC_OscConfig+0xc0>
 8003b9a:	e014      	b.n	8003bc6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b9c:	f7fe f9f0 	bl	8001f80 <HAL_GetTick>
 8003ba0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ba2:	e008      	b.n	8003bb6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ba4:	f7fe f9ec 	bl	8001f80 <HAL_GetTick>
 8003ba8:	4602      	mov	r2, r0
 8003baa:	693b      	ldr	r3, [r7, #16]
 8003bac:	1ad3      	subs	r3, r2, r3
 8003bae:	2b64      	cmp	r3, #100	; 0x64
 8003bb0:	d901      	bls.n	8003bb6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003bb2:	2303      	movs	r3, #3
 8003bb4:	e1f3      	b.n	8003f9e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003bb6:	4b51      	ldr	r3, [pc, #324]	; (8003cfc <HAL_RCC_OscConfig+0x240>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d1f0      	bne.n	8003ba4 <HAL_RCC_OscConfig+0xe8>
 8003bc2:	e000      	b.n	8003bc6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bc4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f003 0302 	and.w	r3, r3, #2
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d063      	beq.n	8003c9a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003bd2:	4b4a      	ldr	r3, [pc, #296]	; (8003cfc <HAL_RCC_OscConfig+0x240>)
 8003bd4:	689b      	ldr	r3, [r3, #8]
 8003bd6:	f003 030c 	and.w	r3, r3, #12
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d00b      	beq.n	8003bf6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003bde:	4b47      	ldr	r3, [pc, #284]	; (8003cfc <HAL_RCC_OscConfig+0x240>)
 8003be0:	689b      	ldr	r3, [r3, #8]
 8003be2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003be6:	2b08      	cmp	r3, #8
 8003be8:	d11c      	bne.n	8003c24 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003bea:	4b44      	ldr	r3, [pc, #272]	; (8003cfc <HAL_RCC_OscConfig+0x240>)
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d116      	bne.n	8003c24 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003bf6:	4b41      	ldr	r3, [pc, #260]	; (8003cfc <HAL_RCC_OscConfig+0x240>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f003 0302 	and.w	r3, r3, #2
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d005      	beq.n	8003c0e <HAL_RCC_OscConfig+0x152>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	68db      	ldr	r3, [r3, #12]
 8003c06:	2b01      	cmp	r3, #1
 8003c08:	d001      	beq.n	8003c0e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	e1c7      	b.n	8003f9e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c0e:	4b3b      	ldr	r3, [pc, #236]	; (8003cfc <HAL_RCC_OscConfig+0x240>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	691b      	ldr	r3, [r3, #16]
 8003c1a:	00db      	lsls	r3, r3, #3
 8003c1c:	4937      	ldr	r1, [pc, #220]	; (8003cfc <HAL_RCC_OscConfig+0x240>)
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c22:	e03a      	b.n	8003c9a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	68db      	ldr	r3, [r3, #12]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d020      	beq.n	8003c6e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c2c:	4b34      	ldr	r3, [pc, #208]	; (8003d00 <HAL_RCC_OscConfig+0x244>)
 8003c2e:	2201      	movs	r2, #1
 8003c30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c32:	f7fe f9a5 	bl	8001f80 <HAL_GetTick>
 8003c36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c38:	e008      	b.n	8003c4c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c3a:	f7fe f9a1 	bl	8001f80 <HAL_GetTick>
 8003c3e:	4602      	mov	r2, r0
 8003c40:	693b      	ldr	r3, [r7, #16]
 8003c42:	1ad3      	subs	r3, r2, r3
 8003c44:	2b02      	cmp	r3, #2
 8003c46:	d901      	bls.n	8003c4c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003c48:	2303      	movs	r3, #3
 8003c4a:	e1a8      	b.n	8003f9e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c4c:	4b2b      	ldr	r3, [pc, #172]	; (8003cfc <HAL_RCC_OscConfig+0x240>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f003 0302 	and.w	r3, r3, #2
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d0f0      	beq.n	8003c3a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c58:	4b28      	ldr	r3, [pc, #160]	; (8003cfc <HAL_RCC_OscConfig+0x240>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	691b      	ldr	r3, [r3, #16]
 8003c64:	00db      	lsls	r3, r3, #3
 8003c66:	4925      	ldr	r1, [pc, #148]	; (8003cfc <HAL_RCC_OscConfig+0x240>)
 8003c68:	4313      	orrs	r3, r2
 8003c6a:	600b      	str	r3, [r1, #0]
 8003c6c:	e015      	b.n	8003c9a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c6e:	4b24      	ldr	r3, [pc, #144]	; (8003d00 <HAL_RCC_OscConfig+0x244>)
 8003c70:	2200      	movs	r2, #0
 8003c72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c74:	f7fe f984 	bl	8001f80 <HAL_GetTick>
 8003c78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c7a:	e008      	b.n	8003c8e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c7c:	f7fe f980 	bl	8001f80 <HAL_GetTick>
 8003c80:	4602      	mov	r2, r0
 8003c82:	693b      	ldr	r3, [r7, #16]
 8003c84:	1ad3      	subs	r3, r2, r3
 8003c86:	2b02      	cmp	r3, #2
 8003c88:	d901      	bls.n	8003c8e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003c8a:	2303      	movs	r3, #3
 8003c8c:	e187      	b.n	8003f9e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c8e:	4b1b      	ldr	r3, [pc, #108]	; (8003cfc <HAL_RCC_OscConfig+0x240>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f003 0302 	and.w	r3, r3, #2
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d1f0      	bne.n	8003c7c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f003 0308 	and.w	r3, r3, #8
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d036      	beq.n	8003d14 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	695b      	ldr	r3, [r3, #20]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d016      	beq.n	8003cdc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003cae:	4b15      	ldr	r3, [pc, #84]	; (8003d04 <HAL_RCC_OscConfig+0x248>)
 8003cb0:	2201      	movs	r2, #1
 8003cb2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cb4:	f7fe f964 	bl	8001f80 <HAL_GetTick>
 8003cb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003cba:	e008      	b.n	8003cce <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003cbc:	f7fe f960 	bl	8001f80 <HAL_GetTick>
 8003cc0:	4602      	mov	r2, r0
 8003cc2:	693b      	ldr	r3, [r7, #16]
 8003cc4:	1ad3      	subs	r3, r2, r3
 8003cc6:	2b02      	cmp	r3, #2
 8003cc8:	d901      	bls.n	8003cce <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003cca:	2303      	movs	r3, #3
 8003ccc:	e167      	b.n	8003f9e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003cce:	4b0b      	ldr	r3, [pc, #44]	; (8003cfc <HAL_RCC_OscConfig+0x240>)
 8003cd0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cd2:	f003 0302 	and.w	r3, r3, #2
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d0f0      	beq.n	8003cbc <HAL_RCC_OscConfig+0x200>
 8003cda:	e01b      	b.n	8003d14 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003cdc:	4b09      	ldr	r3, [pc, #36]	; (8003d04 <HAL_RCC_OscConfig+0x248>)
 8003cde:	2200      	movs	r2, #0
 8003ce0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ce2:	f7fe f94d 	bl	8001f80 <HAL_GetTick>
 8003ce6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ce8:	e00e      	b.n	8003d08 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003cea:	f7fe f949 	bl	8001f80 <HAL_GetTick>
 8003cee:	4602      	mov	r2, r0
 8003cf0:	693b      	ldr	r3, [r7, #16]
 8003cf2:	1ad3      	subs	r3, r2, r3
 8003cf4:	2b02      	cmp	r3, #2
 8003cf6:	d907      	bls.n	8003d08 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003cf8:	2303      	movs	r3, #3
 8003cfa:	e150      	b.n	8003f9e <HAL_RCC_OscConfig+0x4e2>
 8003cfc:	40023800 	.word	0x40023800
 8003d00:	42470000 	.word	0x42470000
 8003d04:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d08:	4b88      	ldr	r3, [pc, #544]	; (8003f2c <HAL_RCC_OscConfig+0x470>)
 8003d0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d0c:	f003 0302 	and.w	r3, r3, #2
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d1ea      	bne.n	8003cea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f003 0304 	and.w	r3, r3, #4
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	f000 8097 	beq.w	8003e50 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d22:	2300      	movs	r3, #0
 8003d24:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d26:	4b81      	ldr	r3, [pc, #516]	; (8003f2c <HAL_RCC_OscConfig+0x470>)
 8003d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d10f      	bne.n	8003d52 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d32:	2300      	movs	r3, #0
 8003d34:	60bb      	str	r3, [r7, #8]
 8003d36:	4b7d      	ldr	r3, [pc, #500]	; (8003f2c <HAL_RCC_OscConfig+0x470>)
 8003d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d3a:	4a7c      	ldr	r2, [pc, #496]	; (8003f2c <HAL_RCC_OscConfig+0x470>)
 8003d3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d40:	6413      	str	r3, [r2, #64]	; 0x40
 8003d42:	4b7a      	ldr	r3, [pc, #488]	; (8003f2c <HAL_RCC_OscConfig+0x470>)
 8003d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d4a:	60bb      	str	r3, [r7, #8]
 8003d4c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d52:	4b77      	ldr	r3, [pc, #476]	; (8003f30 <HAL_RCC_OscConfig+0x474>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d118      	bne.n	8003d90 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d5e:	4b74      	ldr	r3, [pc, #464]	; (8003f30 <HAL_RCC_OscConfig+0x474>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4a73      	ldr	r2, [pc, #460]	; (8003f30 <HAL_RCC_OscConfig+0x474>)
 8003d64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d68:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d6a:	f7fe f909 	bl	8001f80 <HAL_GetTick>
 8003d6e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d70:	e008      	b.n	8003d84 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d72:	f7fe f905 	bl	8001f80 <HAL_GetTick>
 8003d76:	4602      	mov	r2, r0
 8003d78:	693b      	ldr	r3, [r7, #16]
 8003d7a:	1ad3      	subs	r3, r2, r3
 8003d7c:	2b02      	cmp	r3, #2
 8003d7e:	d901      	bls.n	8003d84 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003d80:	2303      	movs	r3, #3
 8003d82:	e10c      	b.n	8003f9e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d84:	4b6a      	ldr	r3, [pc, #424]	; (8003f30 <HAL_RCC_OscConfig+0x474>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d0f0      	beq.n	8003d72 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	689b      	ldr	r3, [r3, #8]
 8003d94:	2b01      	cmp	r3, #1
 8003d96:	d106      	bne.n	8003da6 <HAL_RCC_OscConfig+0x2ea>
 8003d98:	4b64      	ldr	r3, [pc, #400]	; (8003f2c <HAL_RCC_OscConfig+0x470>)
 8003d9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d9c:	4a63      	ldr	r2, [pc, #396]	; (8003f2c <HAL_RCC_OscConfig+0x470>)
 8003d9e:	f043 0301 	orr.w	r3, r3, #1
 8003da2:	6713      	str	r3, [r2, #112]	; 0x70
 8003da4:	e01c      	b.n	8003de0 <HAL_RCC_OscConfig+0x324>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	689b      	ldr	r3, [r3, #8]
 8003daa:	2b05      	cmp	r3, #5
 8003dac:	d10c      	bne.n	8003dc8 <HAL_RCC_OscConfig+0x30c>
 8003dae:	4b5f      	ldr	r3, [pc, #380]	; (8003f2c <HAL_RCC_OscConfig+0x470>)
 8003db0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003db2:	4a5e      	ldr	r2, [pc, #376]	; (8003f2c <HAL_RCC_OscConfig+0x470>)
 8003db4:	f043 0304 	orr.w	r3, r3, #4
 8003db8:	6713      	str	r3, [r2, #112]	; 0x70
 8003dba:	4b5c      	ldr	r3, [pc, #368]	; (8003f2c <HAL_RCC_OscConfig+0x470>)
 8003dbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dbe:	4a5b      	ldr	r2, [pc, #364]	; (8003f2c <HAL_RCC_OscConfig+0x470>)
 8003dc0:	f043 0301 	orr.w	r3, r3, #1
 8003dc4:	6713      	str	r3, [r2, #112]	; 0x70
 8003dc6:	e00b      	b.n	8003de0 <HAL_RCC_OscConfig+0x324>
 8003dc8:	4b58      	ldr	r3, [pc, #352]	; (8003f2c <HAL_RCC_OscConfig+0x470>)
 8003dca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dcc:	4a57      	ldr	r2, [pc, #348]	; (8003f2c <HAL_RCC_OscConfig+0x470>)
 8003dce:	f023 0301 	bic.w	r3, r3, #1
 8003dd2:	6713      	str	r3, [r2, #112]	; 0x70
 8003dd4:	4b55      	ldr	r3, [pc, #340]	; (8003f2c <HAL_RCC_OscConfig+0x470>)
 8003dd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dd8:	4a54      	ldr	r2, [pc, #336]	; (8003f2c <HAL_RCC_OscConfig+0x470>)
 8003dda:	f023 0304 	bic.w	r3, r3, #4
 8003dde:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	689b      	ldr	r3, [r3, #8]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d015      	beq.n	8003e14 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003de8:	f7fe f8ca 	bl	8001f80 <HAL_GetTick>
 8003dec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dee:	e00a      	b.n	8003e06 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003df0:	f7fe f8c6 	bl	8001f80 <HAL_GetTick>
 8003df4:	4602      	mov	r2, r0
 8003df6:	693b      	ldr	r3, [r7, #16]
 8003df8:	1ad3      	subs	r3, r2, r3
 8003dfa:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d901      	bls.n	8003e06 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003e02:	2303      	movs	r3, #3
 8003e04:	e0cb      	b.n	8003f9e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e06:	4b49      	ldr	r3, [pc, #292]	; (8003f2c <HAL_RCC_OscConfig+0x470>)
 8003e08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e0a:	f003 0302 	and.w	r3, r3, #2
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d0ee      	beq.n	8003df0 <HAL_RCC_OscConfig+0x334>
 8003e12:	e014      	b.n	8003e3e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e14:	f7fe f8b4 	bl	8001f80 <HAL_GetTick>
 8003e18:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e1a:	e00a      	b.n	8003e32 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e1c:	f7fe f8b0 	bl	8001f80 <HAL_GetTick>
 8003e20:	4602      	mov	r2, r0
 8003e22:	693b      	ldr	r3, [r7, #16]
 8003e24:	1ad3      	subs	r3, r2, r3
 8003e26:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d901      	bls.n	8003e32 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003e2e:	2303      	movs	r3, #3
 8003e30:	e0b5      	b.n	8003f9e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e32:	4b3e      	ldr	r3, [pc, #248]	; (8003f2c <HAL_RCC_OscConfig+0x470>)
 8003e34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e36:	f003 0302 	and.w	r3, r3, #2
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d1ee      	bne.n	8003e1c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003e3e:	7dfb      	ldrb	r3, [r7, #23]
 8003e40:	2b01      	cmp	r3, #1
 8003e42:	d105      	bne.n	8003e50 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e44:	4b39      	ldr	r3, [pc, #228]	; (8003f2c <HAL_RCC_OscConfig+0x470>)
 8003e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e48:	4a38      	ldr	r2, [pc, #224]	; (8003f2c <HAL_RCC_OscConfig+0x470>)
 8003e4a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e4e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	699b      	ldr	r3, [r3, #24]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	f000 80a1 	beq.w	8003f9c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003e5a:	4b34      	ldr	r3, [pc, #208]	; (8003f2c <HAL_RCC_OscConfig+0x470>)
 8003e5c:	689b      	ldr	r3, [r3, #8]
 8003e5e:	f003 030c 	and.w	r3, r3, #12
 8003e62:	2b08      	cmp	r3, #8
 8003e64:	d05c      	beq.n	8003f20 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	699b      	ldr	r3, [r3, #24]
 8003e6a:	2b02      	cmp	r3, #2
 8003e6c:	d141      	bne.n	8003ef2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e6e:	4b31      	ldr	r3, [pc, #196]	; (8003f34 <HAL_RCC_OscConfig+0x478>)
 8003e70:	2200      	movs	r2, #0
 8003e72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e74:	f7fe f884 	bl	8001f80 <HAL_GetTick>
 8003e78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e7a:	e008      	b.n	8003e8e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e7c:	f7fe f880 	bl	8001f80 <HAL_GetTick>
 8003e80:	4602      	mov	r2, r0
 8003e82:	693b      	ldr	r3, [r7, #16]
 8003e84:	1ad3      	subs	r3, r2, r3
 8003e86:	2b02      	cmp	r3, #2
 8003e88:	d901      	bls.n	8003e8e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003e8a:	2303      	movs	r3, #3
 8003e8c:	e087      	b.n	8003f9e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e8e:	4b27      	ldr	r3, [pc, #156]	; (8003f2c <HAL_RCC_OscConfig+0x470>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d1f0      	bne.n	8003e7c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	69da      	ldr	r2, [r3, #28]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6a1b      	ldr	r3, [r3, #32]
 8003ea2:	431a      	orrs	r2, r3
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ea8:	019b      	lsls	r3, r3, #6
 8003eaa:	431a      	orrs	r2, r3
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eb0:	085b      	lsrs	r3, r3, #1
 8003eb2:	3b01      	subs	r3, #1
 8003eb4:	041b      	lsls	r3, r3, #16
 8003eb6:	431a      	orrs	r2, r3
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ebc:	061b      	lsls	r3, r3, #24
 8003ebe:	491b      	ldr	r1, [pc, #108]	; (8003f2c <HAL_RCC_OscConfig+0x470>)
 8003ec0:	4313      	orrs	r3, r2
 8003ec2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ec4:	4b1b      	ldr	r3, [pc, #108]	; (8003f34 <HAL_RCC_OscConfig+0x478>)
 8003ec6:	2201      	movs	r2, #1
 8003ec8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003eca:	f7fe f859 	bl	8001f80 <HAL_GetTick>
 8003ece:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ed0:	e008      	b.n	8003ee4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ed2:	f7fe f855 	bl	8001f80 <HAL_GetTick>
 8003ed6:	4602      	mov	r2, r0
 8003ed8:	693b      	ldr	r3, [r7, #16]
 8003eda:	1ad3      	subs	r3, r2, r3
 8003edc:	2b02      	cmp	r3, #2
 8003ede:	d901      	bls.n	8003ee4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003ee0:	2303      	movs	r3, #3
 8003ee2:	e05c      	b.n	8003f9e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ee4:	4b11      	ldr	r3, [pc, #68]	; (8003f2c <HAL_RCC_OscConfig+0x470>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d0f0      	beq.n	8003ed2 <HAL_RCC_OscConfig+0x416>
 8003ef0:	e054      	b.n	8003f9c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ef2:	4b10      	ldr	r3, [pc, #64]	; (8003f34 <HAL_RCC_OscConfig+0x478>)
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ef8:	f7fe f842 	bl	8001f80 <HAL_GetTick>
 8003efc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003efe:	e008      	b.n	8003f12 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f00:	f7fe f83e 	bl	8001f80 <HAL_GetTick>
 8003f04:	4602      	mov	r2, r0
 8003f06:	693b      	ldr	r3, [r7, #16]
 8003f08:	1ad3      	subs	r3, r2, r3
 8003f0a:	2b02      	cmp	r3, #2
 8003f0c:	d901      	bls.n	8003f12 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003f0e:	2303      	movs	r3, #3
 8003f10:	e045      	b.n	8003f9e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f12:	4b06      	ldr	r3, [pc, #24]	; (8003f2c <HAL_RCC_OscConfig+0x470>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d1f0      	bne.n	8003f00 <HAL_RCC_OscConfig+0x444>
 8003f1e:	e03d      	b.n	8003f9c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	699b      	ldr	r3, [r3, #24]
 8003f24:	2b01      	cmp	r3, #1
 8003f26:	d107      	bne.n	8003f38 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003f28:	2301      	movs	r3, #1
 8003f2a:	e038      	b.n	8003f9e <HAL_RCC_OscConfig+0x4e2>
 8003f2c:	40023800 	.word	0x40023800
 8003f30:	40007000 	.word	0x40007000
 8003f34:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003f38:	4b1b      	ldr	r3, [pc, #108]	; (8003fa8 <HAL_RCC_OscConfig+0x4ec>)
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	699b      	ldr	r3, [r3, #24]
 8003f42:	2b01      	cmp	r3, #1
 8003f44:	d028      	beq.n	8003f98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f50:	429a      	cmp	r2, r3
 8003f52:	d121      	bne.n	8003f98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f5e:	429a      	cmp	r2, r3
 8003f60:	d11a      	bne.n	8003f98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003f62:	68fa      	ldr	r2, [r7, #12]
 8003f64:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003f68:	4013      	ands	r3, r2
 8003f6a:	687a      	ldr	r2, [r7, #4]
 8003f6c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003f6e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d111      	bne.n	8003f98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f7e:	085b      	lsrs	r3, r3, #1
 8003f80:	3b01      	subs	r3, #1
 8003f82:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003f84:	429a      	cmp	r2, r3
 8003f86:	d107      	bne.n	8003f98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f92:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003f94:	429a      	cmp	r2, r3
 8003f96:	d001      	beq.n	8003f9c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003f98:	2301      	movs	r3, #1
 8003f9a:	e000      	b.n	8003f9e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003f9c:	2300      	movs	r3, #0
}
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	3718      	adds	r7, #24
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	bd80      	pop	{r7, pc}
 8003fa6:	bf00      	nop
 8003fa8:	40023800 	.word	0x40023800

08003fac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b084      	sub	sp, #16
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
 8003fb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d101      	bne.n	8003fc0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	e0cc      	b.n	800415a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003fc0:	4b68      	ldr	r3, [pc, #416]	; (8004164 <HAL_RCC_ClockConfig+0x1b8>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f003 0307 	and.w	r3, r3, #7
 8003fc8:	683a      	ldr	r2, [r7, #0]
 8003fca:	429a      	cmp	r2, r3
 8003fcc:	d90c      	bls.n	8003fe8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fce:	4b65      	ldr	r3, [pc, #404]	; (8004164 <HAL_RCC_ClockConfig+0x1b8>)
 8003fd0:	683a      	ldr	r2, [r7, #0]
 8003fd2:	b2d2      	uxtb	r2, r2
 8003fd4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fd6:	4b63      	ldr	r3, [pc, #396]	; (8004164 <HAL_RCC_ClockConfig+0x1b8>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f003 0307 	and.w	r3, r3, #7
 8003fde:	683a      	ldr	r2, [r7, #0]
 8003fe0:	429a      	cmp	r2, r3
 8003fe2:	d001      	beq.n	8003fe8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	e0b8      	b.n	800415a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f003 0302 	and.w	r3, r3, #2
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d020      	beq.n	8004036 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f003 0304 	and.w	r3, r3, #4
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d005      	beq.n	800400c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004000:	4b59      	ldr	r3, [pc, #356]	; (8004168 <HAL_RCC_ClockConfig+0x1bc>)
 8004002:	689b      	ldr	r3, [r3, #8]
 8004004:	4a58      	ldr	r2, [pc, #352]	; (8004168 <HAL_RCC_ClockConfig+0x1bc>)
 8004006:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800400a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f003 0308 	and.w	r3, r3, #8
 8004014:	2b00      	cmp	r3, #0
 8004016:	d005      	beq.n	8004024 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004018:	4b53      	ldr	r3, [pc, #332]	; (8004168 <HAL_RCC_ClockConfig+0x1bc>)
 800401a:	689b      	ldr	r3, [r3, #8]
 800401c:	4a52      	ldr	r2, [pc, #328]	; (8004168 <HAL_RCC_ClockConfig+0x1bc>)
 800401e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004022:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004024:	4b50      	ldr	r3, [pc, #320]	; (8004168 <HAL_RCC_ClockConfig+0x1bc>)
 8004026:	689b      	ldr	r3, [r3, #8]
 8004028:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	689b      	ldr	r3, [r3, #8]
 8004030:	494d      	ldr	r1, [pc, #308]	; (8004168 <HAL_RCC_ClockConfig+0x1bc>)
 8004032:	4313      	orrs	r3, r2
 8004034:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f003 0301 	and.w	r3, r3, #1
 800403e:	2b00      	cmp	r3, #0
 8004040:	d044      	beq.n	80040cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	685b      	ldr	r3, [r3, #4]
 8004046:	2b01      	cmp	r3, #1
 8004048:	d107      	bne.n	800405a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800404a:	4b47      	ldr	r3, [pc, #284]	; (8004168 <HAL_RCC_ClockConfig+0x1bc>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004052:	2b00      	cmp	r3, #0
 8004054:	d119      	bne.n	800408a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004056:	2301      	movs	r3, #1
 8004058:	e07f      	b.n	800415a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	2b02      	cmp	r3, #2
 8004060:	d003      	beq.n	800406a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004066:	2b03      	cmp	r3, #3
 8004068:	d107      	bne.n	800407a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800406a:	4b3f      	ldr	r3, [pc, #252]	; (8004168 <HAL_RCC_ClockConfig+0x1bc>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004072:	2b00      	cmp	r3, #0
 8004074:	d109      	bne.n	800408a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004076:	2301      	movs	r3, #1
 8004078:	e06f      	b.n	800415a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800407a:	4b3b      	ldr	r3, [pc, #236]	; (8004168 <HAL_RCC_ClockConfig+0x1bc>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f003 0302 	and.w	r3, r3, #2
 8004082:	2b00      	cmp	r3, #0
 8004084:	d101      	bne.n	800408a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004086:	2301      	movs	r3, #1
 8004088:	e067      	b.n	800415a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800408a:	4b37      	ldr	r3, [pc, #220]	; (8004168 <HAL_RCC_ClockConfig+0x1bc>)
 800408c:	689b      	ldr	r3, [r3, #8]
 800408e:	f023 0203 	bic.w	r2, r3, #3
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	4934      	ldr	r1, [pc, #208]	; (8004168 <HAL_RCC_ClockConfig+0x1bc>)
 8004098:	4313      	orrs	r3, r2
 800409a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800409c:	f7fd ff70 	bl	8001f80 <HAL_GetTick>
 80040a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040a2:	e00a      	b.n	80040ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040a4:	f7fd ff6c 	bl	8001f80 <HAL_GetTick>
 80040a8:	4602      	mov	r2, r0
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	1ad3      	subs	r3, r2, r3
 80040ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d901      	bls.n	80040ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80040b6:	2303      	movs	r3, #3
 80040b8:	e04f      	b.n	800415a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040ba:	4b2b      	ldr	r3, [pc, #172]	; (8004168 <HAL_RCC_ClockConfig+0x1bc>)
 80040bc:	689b      	ldr	r3, [r3, #8]
 80040be:	f003 020c 	and.w	r2, r3, #12
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	009b      	lsls	r3, r3, #2
 80040c8:	429a      	cmp	r2, r3
 80040ca:	d1eb      	bne.n	80040a4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80040cc:	4b25      	ldr	r3, [pc, #148]	; (8004164 <HAL_RCC_ClockConfig+0x1b8>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f003 0307 	and.w	r3, r3, #7
 80040d4:	683a      	ldr	r2, [r7, #0]
 80040d6:	429a      	cmp	r2, r3
 80040d8:	d20c      	bcs.n	80040f4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040da:	4b22      	ldr	r3, [pc, #136]	; (8004164 <HAL_RCC_ClockConfig+0x1b8>)
 80040dc:	683a      	ldr	r2, [r7, #0]
 80040de:	b2d2      	uxtb	r2, r2
 80040e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040e2:	4b20      	ldr	r3, [pc, #128]	; (8004164 <HAL_RCC_ClockConfig+0x1b8>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f003 0307 	and.w	r3, r3, #7
 80040ea:	683a      	ldr	r2, [r7, #0]
 80040ec:	429a      	cmp	r2, r3
 80040ee:	d001      	beq.n	80040f4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80040f0:	2301      	movs	r3, #1
 80040f2:	e032      	b.n	800415a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f003 0304 	and.w	r3, r3, #4
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d008      	beq.n	8004112 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004100:	4b19      	ldr	r3, [pc, #100]	; (8004168 <HAL_RCC_ClockConfig+0x1bc>)
 8004102:	689b      	ldr	r3, [r3, #8]
 8004104:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	68db      	ldr	r3, [r3, #12]
 800410c:	4916      	ldr	r1, [pc, #88]	; (8004168 <HAL_RCC_ClockConfig+0x1bc>)
 800410e:	4313      	orrs	r3, r2
 8004110:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f003 0308 	and.w	r3, r3, #8
 800411a:	2b00      	cmp	r3, #0
 800411c:	d009      	beq.n	8004132 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800411e:	4b12      	ldr	r3, [pc, #72]	; (8004168 <HAL_RCC_ClockConfig+0x1bc>)
 8004120:	689b      	ldr	r3, [r3, #8]
 8004122:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	691b      	ldr	r3, [r3, #16]
 800412a:	00db      	lsls	r3, r3, #3
 800412c:	490e      	ldr	r1, [pc, #56]	; (8004168 <HAL_RCC_ClockConfig+0x1bc>)
 800412e:	4313      	orrs	r3, r2
 8004130:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004132:	f000 f821 	bl	8004178 <HAL_RCC_GetSysClockFreq>
 8004136:	4602      	mov	r2, r0
 8004138:	4b0b      	ldr	r3, [pc, #44]	; (8004168 <HAL_RCC_ClockConfig+0x1bc>)
 800413a:	689b      	ldr	r3, [r3, #8]
 800413c:	091b      	lsrs	r3, r3, #4
 800413e:	f003 030f 	and.w	r3, r3, #15
 8004142:	490a      	ldr	r1, [pc, #40]	; (800416c <HAL_RCC_ClockConfig+0x1c0>)
 8004144:	5ccb      	ldrb	r3, [r1, r3]
 8004146:	fa22 f303 	lsr.w	r3, r2, r3
 800414a:	4a09      	ldr	r2, [pc, #36]	; (8004170 <HAL_RCC_ClockConfig+0x1c4>)
 800414c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800414e:	4b09      	ldr	r3, [pc, #36]	; (8004174 <HAL_RCC_ClockConfig+0x1c8>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4618      	mov	r0, r3
 8004154:	f7fd fed0 	bl	8001ef8 <HAL_InitTick>

  return HAL_OK;
 8004158:	2300      	movs	r3, #0
}
 800415a:	4618      	mov	r0, r3
 800415c:	3710      	adds	r7, #16
 800415e:	46bd      	mov	sp, r7
 8004160:	bd80      	pop	{r7, pc}
 8004162:	bf00      	nop
 8004164:	40023c00 	.word	0x40023c00
 8004168:	40023800 	.word	0x40023800
 800416c:	0800929c 	.word	0x0800929c
 8004170:	20000000 	.word	0x20000000
 8004174:	20000004 	.word	0x20000004

08004178 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004178:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800417c:	b090      	sub	sp, #64	; 0x40
 800417e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004180:	2300      	movs	r3, #0
 8004182:	637b      	str	r3, [r7, #52]	; 0x34
 8004184:	2300      	movs	r3, #0
 8004186:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004188:	2300      	movs	r3, #0
 800418a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800418c:	2300      	movs	r3, #0
 800418e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004190:	4b59      	ldr	r3, [pc, #356]	; (80042f8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004192:	689b      	ldr	r3, [r3, #8]
 8004194:	f003 030c 	and.w	r3, r3, #12
 8004198:	2b08      	cmp	r3, #8
 800419a:	d00d      	beq.n	80041b8 <HAL_RCC_GetSysClockFreq+0x40>
 800419c:	2b08      	cmp	r3, #8
 800419e:	f200 80a1 	bhi.w	80042e4 <HAL_RCC_GetSysClockFreq+0x16c>
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d002      	beq.n	80041ac <HAL_RCC_GetSysClockFreq+0x34>
 80041a6:	2b04      	cmp	r3, #4
 80041a8:	d003      	beq.n	80041b2 <HAL_RCC_GetSysClockFreq+0x3a>
 80041aa:	e09b      	b.n	80042e4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80041ac:	4b53      	ldr	r3, [pc, #332]	; (80042fc <HAL_RCC_GetSysClockFreq+0x184>)
 80041ae:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80041b0:	e09b      	b.n	80042ea <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80041b2:	4b53      	ldr	r3, [pc, #332]	; (8004300 <HAL_RCC_GetSysClockFreq+0x188>)
 80041b4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80041b6:	e098      	b.n	80042ea <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80041b8:	4b4f      	ldr	r3, [pc, #316]	; (80042f8 <HAL_RCC_GetSysClockFreq+0x180>)
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80041c0:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80041c2:	4b4d      	ldr	r3, [pc, #308]	; (80042f8 <HAL_RCC_GetSysClockFreq+0x180>)
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d028      	beq.n	8004220 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80041ce:	4b4a      	ldr	r3, [pc, #296]	; (80042f8 <HAL_RCC_GetSysClockFreq+0x180>)
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	099b      	lsrs	r3, r3, #6
 80041d4:	2200      	movs	r2, #0
 80041d6:	623b      	str	r3, [r7, #32]
 80041d8:	627a      	str	r2, [r7, #36]	; 0x24
 80041da:	6a3b      	ldr	r3, [r7, #32]
 80041dc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80041e0:	2100      	movs	r1, #0
 80041e2:	4b47      	ldr	r3, [pc, #284]	; (8004300 <HAL_RCC_GetSysClockFreq+0x188>)
 80041e4:	fb03 f201 	mul.w	r2, r3, r1
 80041e8:	2300      	movs	r3, #0
 80041ea:	fb00 f303 	mul.w	r3, r0, r3
 80041ee:	4413      	add	r3, r2
 80041f0:	4a43      	ldr	r2, [pc, #268]	; (8004300 <HAL_RCC_GetSysClockFreq+0x188>)
 80041f2:	fba0 1202 	umull	r1, r2, r0, r2
 80041f6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80041f8:	460a      	mov	r2, r1
 80041fa:	62ba      	str	r2, [r7, #40]	; 0x28
 80041fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80041fe:	4413      	add	r3, r2
 8004200:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004202:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004204:	2200      	movs	r2, #0
 8004206:	61bb      	str	r3, [r7, #24]
 8004208:	61fa      	str	r2, [r7, #28]
 800420a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800420e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004212:	f7fc fd21 	bl	8000c58 <__aeabi_uldivmod>
 8004216:	4602      	mov	r2, r0
 8004218:	460b      	mov	r3, r1
 800421a:	4613      	mov	r3, r2
 800421c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800421e:	e053      	b.n	80042c8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004220:	4b35      	ldr	r3, [pc, #212]	; (80042f8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	099b      	lsrs	r3, r3, #6
 8004226:	2200      	movs	r2, #0
 8004228:	613b      	str	r3, [r7, #16]
 800422a:	617a      	str	r2, [r7, #20]
 800422c:	693b      	ldr	r3, [r7, #16]
 800422e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004232:	f04f 0b00 	mov.w	fp, #0
 8004236:	4652      	mov	r2, sl
 8004238:	465b      	mov	r3, fp
 800423a:	f04f 0000 	mov.w	r0, #0
 800423e:	f04f 0100 	mov.w	r1, #0
 8004242:	0159      	lsls	r1, r3, #5
 8004244:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004248:	0150      	lsls	r0, r2, #5
 800424a:	4602      	mov	r2, r0
 800424c:	460b      	mov	r3, r1
 800424e:	ebb2 080a 	subs.w	r8, r2, sl
 8004252:	eb63 090b 	sbc.w	r9, r3, fp
 8004256:	f04f 0200 	mov.w	r2, #0
 800425a:	f04f 0300 	mov.w	r3, #0
 800425e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004262:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004266:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800426a:	ebb2 0408 	subs.w	r4, r2, r8
 800426e:	eb63 0509 	sbc.w	r5, r3, r9
 8004272:	f04f 0200 	mov.w	r2, #0
 8004276:	f04f 0300 	mov.w	r3, #0
 800427a:	00eb      	lsls	r3, r5, #3
 800427c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004280:	00e2      	lsls	r2, r4, #3
 8004282:	4614      	mov	r4, r2
 8004284:	461d      	mov	r5, r3
 8004286:	eb14 030a 	adds.w	r3, r4, sl
 800428a:	603b      	str	r3, [r7, #0]
 800428c:	eb45 030b 	adc.w	r3, r5, fp
 8004290:	607b      	str	r3, [r7, #4]
 8004292:	f04f 0200 	mov.w	r2, #0
 8004296:	f04f 0300 	mov.w	r3, #0
 800429a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800429e:	4629      	mov	r1, r5
 80042a0:	028b      	lsls	r3, r1, #10
 80042a2:	4621      	mov	r1, r4
 80042a4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80042a8:	4621      	mov	r1, r4
 80042aa:	028a      	lsls	r2, r1, #10
 80042ac:	4610      	mov	r0, r2
 80042ae:	4619      	mov	r1, r3
 80042b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042b2:	2200      	movs	r2, #0
 80042b4:	60bb      	str	r3, [r7, #8]
 80042b6:	60fa      	str	r2, [r7, #12]
 80042b8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80042bc:	f7fc fccc 	bl	8000c58 <__aeabi_uldivmod>
 80042c0:	4602      	mov	r2, r0
 80042c2:	460b      	mov	r3, r1
 80042c4:	4613      	mov	r3, r2
 80042c6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80042c8:	4b0b      	ldr	r3, [pc, #44]	; (80042f8 <HAL_RCC_GetSysClockFreq+0x180>)
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	0c1b      	lsrs	r3, r3, #16
 80042ce:	f003 0303 	and.w	r3, r3, #3
 80042d2:	3301      	adds	r3, #1
 80042d4:	005b      	lsls	r3, r3, #1
 80042d6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80042d8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80042da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80042e0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80042e2:	e002      	b.n	80042ea <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80042e4:	4b05      	ldr	r3, [pc, #20]	; (80042fc <HAL_RCC_GetSysClockFreq+0x184>)
 80042e6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80042e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80042ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80042ec:	4618      	mov	r0, r3
 80042ee:	3740      	adds	r7, #64	; 0x40
 80042f0:	46bd      	mov	sp, r7
 80042f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80042f6:	bf00      	nop
 80042f8:	40023800 	.word	0x40023800
 80042fc:	00f42400 	.word	0x00f42400
 8004300:	017d7840 	.word	0x017d7840

08004304 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004304:	b480      	push	{r7}
 8004306:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004308:	4b03      	ldr	r3, [pc, #12]	; (8004318 <HAL_RCC_GetHCLKFreq+0x14>)
 800430a:	681b      	ldr	r3, [r3, #0]
}
 800430c:	4618      	mov	r0, r3
 800430e:	46bd      	mov	sp, r7
 8004310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004314:	4770      	bx	lr
 8004316:	bf00      	nop
 8004318:	20000000 	.word	0x20000000

0800431c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004320:	f7ff fff0 	bl	8004304 <HAL_RCC_GetHCLKFreq>
 8004324:	4602      	mov	r2, r0
 8004326:	4b05      	ldr	r3, [pc, #20]	; (800433c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004328:	689b      	ldr	r3, [r3, #8]
 800432a:	0a9b      	lsrs	r3, r3, #10
 800432c:	f003 0307 	and.w	r3, r3, #7
 8004330:	4903      	ldr	r1, [pc, #12]	; (8004340 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004332:	5ccb      	ldrb	r3, [r1, r3]
 8004334:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004338:	4618      	mov	r0, r3
 800433a:	bd80      	pop	{r7, pc}
 800433c:	40023800 	.word	0x40023800
 8004340:	080092ac 	.word	0x080092ac

08004344 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004348:	f7ff ffdc 	bl	8004304 <HAL_RCC_GetHCLKFreq>
 800434c:	4602      	mov	r2, r0
 800434e:	4b05      	ldr	r3, [pc, #20]	; (8004364 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004350:	689b      	ldr	r3, [r3, #8]
 8004352:	0b5b      	lsrs	r3, r3, #13
 8004354:	f003 0307 	and.w	r3, r3, #7
 8004358:	4903      	ldr	r1, [pc, #12]	; (8004368 <HAL_RCC_GetPCLK2Freq+0x24>)
 800435a:	5ccb      	ldrb	r3, [r1, r3]
 800435c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004360:	4618      	mov	r0, r3
 8004362:	bd80      	pop	{r7, pc}
 8004364:	40023800 	.word	0x40023800
 8004368:	080092ac 	.word	0x080092ac

0800436c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b086      	sub	sp, #24
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004374:	2300      	movs	r3, #0
 8004376:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004378:	2300      	movs	r3, #0
 800437a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f003 0301 	and.w	r3, r3, #1
 8004384:	2b00      	cmp	r3, #0
 8004386:	d105      	bne.n	8004394 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004390:	2b00      	cmp	r3, #0
 8004392:	d035      	beq.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004394:	4b67      	ldr	r3, [pc, #412]	; (8004534 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8004396:	2200      	movs	r2, #0
 8004398:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800439a:	f7fd fdf1 	bl	8001f80 <HAL_GetTick>
 800439e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80043a0:	e008      	b.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80043a2:	f7fd fded 	bl	8001f80 <HAL_GetTick>
 80043a6:	4602      	mov	r2, r0
 80043a8:	697b      	ldr	r3, [r7, #20]
 80043aa:	1ad3      	subs	r3, r2, r3
 80043ac:	2b02      	cmp	r3, #2
 80043ae:	d901      	bls.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80043b0:	2303      	movs	r3, #3
 80043b2:	e0ba      	b.n	800452a <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80043b4:	4b60      	ldr	r3, [pc, #384]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d1f0      	bne.n	80043a2 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	685b      	ldr	r3, [r3, #4]
 80043c4:	019a      	lsls	r2, r3, #6
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	689b      	ldr	r3, [r3, #8]
 80043ca:	071b      	lsls	r3, r3, #28
 80043cc:	495a      	ldr	r1, [pc, #360]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80043ce:	4313      	orrs	r3, r2
 80043d0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80043d4:	4b57      	ldr	r3, [pc, #348]	; (8004534 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80043d6:	2201      	movs	r2, #1
 80043d8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80043da:	f7fd fdd1 	bl	8001f80 <HAL_GetTick>
 80043de:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80043e0:	e008      	b.n	80043f4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80043e2:	f7fd fdcd 	bl	8001f80 <HAL_GetTick>
 80043e6:	4602      	mov	r2, r0
 80043e8:	697b      	ldr	r3, [r7, #20]
 80043ea:	1ad3      	subs	r3, r2, r3
 80043ec:	2b02      	cmp	r3, #2
 80043ee:	d901      	bls.n	80043f4 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80043f0:	2303      	movs	r3, #3
 80043f2:	e09a      	b.n	800452a <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80043f4:	4b50      	ldr	r3, [pc, #320]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d0f0      	beq.n	80043e2 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f003 0302 	and.w	r3, r3, #2
 8004408:	2b00      	cmp	r3, #0
 800440a:	f000 8083 	beq.w	8004514 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800440e:	2300      	movs	r3, #0
 8004410:	60fb      	str	r3, [r7, #12]
 8004412:	4b49      	ldr	r3, [pc, #292]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004416:	4a48      	ldr	r2, [pc, #288]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004418:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800441c:	6413      	str	r3, [r2, #64]	; 0x40
 800441e:	4b46      	ldr	r3, [pc, #280]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004422:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004426:	60fb      	str	r3, [r7, #12]
 8004428:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800442a:	4b44      	ldr	r3, [pc, #272]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4a43      	ldr	r2, [pc, #268]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004430:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004434:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004436:	f7fd fda3 	bl	8001f80 <HAL_GetTick>
 800443a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800443c:	e008      	b.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800443e:	f7fd fd9f 	bl	8001f80 <HAL_GetTick>
 8004442:	4602      	mov	r2, r0
 8004444:	697b      	ldr	r3, [r7, #20]
 8004446:	1ad3      	subs	r3, r2, r3
 8004448:	2b02      	cmp	r3, #2
 800444a:	d901      	bls.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 800444c:	2303      	movs	r3, #3
 800444e:	e06c      	b.n	800452a <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004450:	4b3a      	ldr	r3, [pc, #232]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004458:	2b00      	cmp	r3, #0
 800445a:	d0f0      	beq.n	800443e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800445c:	4b36      	ldr	r3, [pc, #216]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800445e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004460:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004464:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004466:	693b      	ldr	r3, [r7, #16]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d02f      	beq.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0x160>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	68db      	ldr	r3, [r3, #12]
 8004470:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004474:	693a      	ldr	r2, [r7, #16]
 8004476:	429a      	cmp	r2, r3
 8004478:	d028      	beq.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800447a:	4b2f      	ldr	r3, [pc, #188]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800447c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800447e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004482:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004484:	4b2e      	ldr	r3, [pc, #184]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004486:	2201      	movs	r2, #1
 8004488:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800448a:	4b2d      	ldr	r3, [pc, #180]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800448c:	2200      	movs	r2, #0
 800448e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004490:	4a29      	ldr	r2, [pc, #164]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004492:	693b      	ldr	r3, [r7, #16]
 8004494:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004496:	4b28      	ldr	r3, [pc, #160]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004498:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800449a:	f003 0301 	and.w	r3, r3, #1
 800449e:	2b01      	cmp	r3, #1
 80044a0:	d114      	bne.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80044a2:	f7fd fd6d 	bl	8001f80 <HAL_GetTick>
 80044a6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044a8:	e00a      	b.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044aa:	f7fd fd69 	bl	8001f80 <HAL_GetTick>
 80044ae:	4602      	mov	r2, r0
 80044b0:	697b      	ldr	r3, [r7, #20]
 80044b2:	1ad3      	subs	r3, r2, r3
 80044b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d901      	bls.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80044bc:	2303      	movs	r3, #3
 80044be:	e034      	b.n	800452a <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044c0:	4b1d      	ldr	r3, [pc, #116]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80044c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044c4:	f003 0302 	and.w	r3, r3, #2
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d0ee      	beq.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	68db      	ldr	r3, [r3, #12]
 80044d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044d4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80044d8:	d10d      	bne.n	80044f6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80044da:	4b17      	ldr	r3, [pc, #92]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80044dc:	689b      	ldr	r3, [r3, #8]
 80044de:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	68db      	ldr	r3, [r3, #12]
 80044e6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80044ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044ee:	4912      	ldr	r1, [pc, #72]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80044f0:	4313      	orrs	r3, r2
 80044f2:	608b      	str	r3, [r1, #8]
 80044f4:	e005      	b.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80044f6:	4b10      	ldr	r3, [pc, #64]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80044f8:	689b      	ldr	r3, [r3, #8]
 80044fa:	4a0f      	ldr	r2, [pc, #60]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80044fc:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004500:	6093      	str	r3, [r2, #8]
 8004502:	4b0d      	ldr	r3, [pc, #52]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004504:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	68db      	ldr	r3, [r3, #12]
 800450a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800450e:	490a      	ldr	r1, [pc, #40]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004510:	4313      	orrs	r3, r2
 8004512:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f003 0308 	and.w	r3, r3, #8
 800451c:	2b00      	cmp	r3, #0
 800451e:	d003      	beq.n	8004528 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	7c1a      	ldrb	r2, [r3, #16]
 8004524:	4b07      	ldr	r3, [pc, #28]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004526:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004528:	2300      	movs	r3, #0
}
 800452a:	4618      	mov	r0, r3
 800452c:	3718      	adds	r7, #24
 800452e:	46bd      	mov	sp, r7
 8004530:	bd80      	pop	{r7, pc}
 8004532:	bf00      	nop
 8004534:	42470068 	.word	0x42470068
 8004538:	40023800 	.word	0x40023800
 800453c:	40007000 	.word	0x40007000
 8004540:	42470e40 	.word	0x42470e40
 8004544:	424711e0 	.word	0x424711e0

08004548 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b084      	sub	sp, #16
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004550:	2301      	movs	r3, #1
 8004552:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d101      	bne.n	800455e <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800455a:	2301      	movs	r3, #1
 800455c:	e066      	b.n	800462c <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	7f5b      	ldrb	r3, [r3, #29]
 8004562:	b2db      	uxtb	r3, r3
 8004564:	2b00      	cmp	r3, #0
 8004566:	d105      	bne.n	8004574 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2200      	movs	r2, #0
 800456c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800456e:	6878      	ldr	r0, [r7, #4]
 8004570:	f7fd fa96 	bl	8001aa0 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2202      	movs	r2, #2
 8004578:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	22ca      	movs	r2, #202	; 0xca
 8004580:	625a      	str	r2, [r3, #36]	; 0x24
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	2253      	movs	r2, #83	; 0x53
 8004588:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800458a:	6878      	ldr	r0, [r7, #4]
 800458c:	f000 fa45 	bl	8004a1a <RTC_EnterInitMode>
 8004590:	4603      	mov	r3, r0
 8004592:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8004594:	7bfb      	ldrb	r3, [r7, #15]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d12c      	bne.n	80045f4 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	689b      	ldr	r3, [r3, #8]
 80045a0:	687a      	ldr	r2, [r7, #4]
 80045a2:	6812      	ldr	r2, [r2, #0]
 80045a4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80045a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80045ac:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	6899      	ldr	r1, [r3, #8]
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	685a      	ldr	r2, [r3, #4]
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	691b      	ldr	r3, [r3, #16]
 80045bc:	431a      	orrs	r2, r3
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	695b      	ldr	r3, [r3, #20]
 80045c2:	431a      	orrs	r2, r3
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	430a      	orrs	r2, r1
 80045ca:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	687a      	ldr	r2, [r7, #4]
 80045d2:	68d2      	ldr	r2, [r2, #12]
 80045d4:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	6919      	ldr	r1, [r3, #16]
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	689b      	ldr	r3, [r3, #8]
 80045e0:	041a      	lsls	r2, r3, #16
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	430a      	orrs	r2, r1
 80045e8:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80045ea:	6878      	ldr	r0, [r7, #4]
 80045ec:	f000 fa4c 	bl	8004a88 <RTC_ExitInitMode>
 80045f0:	4603      	mov	r3, r0
 80045f2:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80045f4:	7bfb      	ldrb	r3, [r7, #15]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d113      	bne.n	8004622 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004608:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	699a      	ldr	r2, [r3, #24]
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	430a      	orrs	r2, r1
 800461a:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2201      	movs	r2, #1
 8004620:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	22ff      	movs	r2, #255	; 0xff
 8004628:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 800462a:	7bfb      	ldrb	r3, [r7, #15]
}
 800462c:	4618      	mov	r0, r3
 800462e:	3710      	adds	r7, #16
 8004630:	46bd      	mov	sp, r7
 8004632:	bd80      	pop	{r7, pc}

08004634 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004634:	b590      	push	{r4, r7, lr}
 8004636:	b087      	sub	sp, #28
 8004638:	af00      	add	r7, sp, #0
 800463a:	60f8      	str	r0, [r7, #12]
 800463c:	60b9      	str	r1, [r7, #8]
 800463e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8004640:	2300      	movs	r3, #0
 8004642:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	7f1b      	ldrb	r3, [r3, #28]
 8004648:	2b01      	cmp	r3, #1
 800464a:	d101      	bne.n	8004650 <HAL_RTC_SetTime+0x1c>
 800464c:	2302      	movs	r3, #2
 800464e:	e087      	b.n	8004760 <HAL_RTC_SetTime+0x12c>
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	2201      	movs	r2, #1
 8004654:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	2202      	movs	r2, #2
 800465a:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d126      	bne.n	80046b0 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	689b      	ldr	r3, [r3, #8]
 8004668:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800466c:	2b00      	cmp	r3, #0
 800466e:	d102      	bne.n	8004676 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004670:	68bb      	ldr	r3, [r7, #8]
 8004672:	2200      	movs	r2, #0
 8004674:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004676:	68bb      	ldr	r3, [r7, #8]
 8004678:	781b      	ldrb	r3, [r3, #0]
 800467a:	4618      	mov	r0, r3
 800467c:	f000 fa29 	bl	8004ad2 <RTC_ByteToBcd2>
 8004680:	4603      	mov	r3, r0
 8004682:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004684:	68bb      	ldr	r3, [r7, #8]
 8004686:	785b      	ldrb	r3, [r3, #1]
 8004688:	4618      	mov	r0, r3
 800468a:	f000 fa22 	bl	8004ad2 <RTC_ByteToBcd2>
 800468e:	4603      	mov	r3, r0
 8004690:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004692:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8004694:	68bb      	ldr	r3, [r7, #8]
 8004696:	789b      	ldrb	r3, [r3, #2]
 8004698:	4618      	mov	r0, r3
 800469a:	f000 fa1a 	bl	8004ad2 <RTC_ByteToBcd2>
 800469e:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80046a0:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	78db      	ldrb	r3, [r3, #3]
 80046a8:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80046aa:	4313      	orrs	r3, r2
 80046ac:	617b      	str	r3, [r7, #20]
 80046ae:	e018      	b.n	80046e2 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	689b      	ldr	r3, [r3, #8]
 80046b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d102      	bne.n	80046c4 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80046be:	68bb      	ldr	r3, [r7, #8]
 80046c0:	2200      	movs	r2, #0
 80046c2:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80046c4:	68bb      	ldr	r3, [r7, #8]
 80046c6:	781b      	ldrb	r3, [r3, #0]
 80046c8:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80046ca:	68bb      	ldr	r3, [r7, #8]
 80046cc:	785b      	ldrb	r3, [r3, #1]
 80046ce:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80046d0:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 80046d2:	68ba      	ldr	r2, [r7, #8]
 80046d4:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80046d6:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80046d8:	68bb      	ldr	r3, [r7, #8]
 80046da:	78db      	ldrb	r3, [r3, #3]
 80046dc:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80046de:	4313      	orrs	r3, r2
 80046e0:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	22ca      	movs	r2, #202	; 0xca
 80046e8:	625a      	str	r2, [r3, #36]	; 0x24
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	2253      	movs	r2, #83	; 0x53
 80046f0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80046f2:	68f8      	ldr	r0, [r7, #12]
 80046f4:	f000 f991 	bl	8004a1a <RTC_EnterInitMode>
 80046f8:	4603      	mov	r3, r0
 80046fa:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80046fc:	7cfb      	ldrb	r3, [r7, #19]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d120      	bne.n	8004744 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681a      	ldr	r2, [r3, #0]
 8004706:	697b      	ldr	r3, [r7, #20]
 8004708:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800470c:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004710:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	689a      	ldr	r2, [r3, #8]
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004720:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	6899      	ldr	r1, [r3, #8]
 8004728:	68bb      	ldr	r3, [r7, #8]
 800472a:	68da      	ldr	r2, [r3, #12]
 800472c:	68bb      	ldr	r3, [r7, #8]
 800472e:	691b      	ldr	r3, [r3, #16]
 8004730:	431a      	orrs	r2, r3
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	430a      	orrs	r2, r1
 8004738:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800473a:	68f8      	ldr	r0, [r7, #12]
 800473c:	f000 f9a4 	bl	8004a88 <RTC_ExitInitMode>
 8004740:	4603      	mov	r3, r0
 8004742:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8004744:	7cfb      	ldrb	r3, [r7, #19]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d102      	bne.n	8004750 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	2201      	movs	r2, #1
 800474e:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	22ff      	movs	r2, #255	; 0xff
 8004756:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	2200      	movs	r2, #0
 800475c:	771a      	strb	r2, [r3, #28]

  return status;
 800475e:	7cfb      	ldrb	r3, [r7, #19]
}
 8004760:	4618      	mov	r0, r3
 8004762:	371c      	adds	r7, #28
 8004764:	46bd      	mov	sp, r7
 8004766:	bd90      	pop	{r4, r7, pc}

08004768 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b086      	sub	sp, #24
 800476c:	af00      	add	r7, sp, #0
 800476e:	60f8      	str	r0, [r7, #12]
 8004770:	60b9      	str	r1, [r7, #8]
 8004772:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8004774:	2300      	movs	r3, #0
 8004776:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800477e:	68bb      	ldr	r3, [r7, #8]
 8004780:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	691b      	ldr	r3, [r3, #16]
 8004788:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800478c:	68bb      	ldr	r3, [r7, #8]
 800478e:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800479a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800479e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 80047a0:	697b      	ldr	r3, [r7, #20]
 80047a2:	0c1b      	lsrs	r3, r3, #16
 80047a4:	b2db      	uxtb	r3, r3
 80047a6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80047aa:	b2da      	uxtb	r2, r3
 80047ac:	68bb      	ldr	r3, [r7, #8]
 80047ae:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80047b0:	697b      	ldr	r3, [r7, #20]
 80047b2:	0a1b      	lsrs	r3, r3, #8
 80047b4:	b2db      	uxtb	r3, r3
 80047b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80047ba:	b2da      	uxtb	r2, r3
 80047bc:	68bb      	ldr	r3, [r7, #8]
 80047be:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 80047c0:	697b      	ldr	r3, [r7, #20]
 80047c2:	b2db      	uxtb	r3, r3
 80047c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80047c8:	b2da      	uxtb	r2, r3
 80047ca:	68bb      	ldr	r3, [r7, #8]
 80047cc:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 80047ce:	697b      	ldr	r3, [r7, #20]
 80047d0:	0d9b      	lsrs	r3, r3, #22
 80047d2:	b2db      	uxtb	r3, r3
 80047d4:	f003 0301 	and.w	r3, r3, #1
 80047d8:	b2da      	uxtb	r2, r3
 80047da:	68bb      	ldr	r3, [r7, #8]
 80047dc:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d11a      	bne.n	800481a <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80047e4:	68bb      	ldr	r3, [r7, #8]
 80047e6:	781b      	ldrb	r3, [r3, #0]
 80047e8:	4618      	mov	r0, r3
 80047ea:	f000 f98f 	bl	8004b0c <RTC_Bcd2ToByte>
 80047ee:	4603      	mov	r3, r0
 80047f0:	461a      	mov	r2, r3
 80047f2:	68bb      	ldr	r3, [r7, #8]
 80047f4:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80047f6:	68bb      	ldr	r3, [r7, #8]
 80047f8:	785b      	ldrb	r3, [r3, #1]
 80047fa:	4618      	mov	r0, r3
 80047fc:	f000 f986 	bl	8004b0c <RTC_Bcd2ToByte>
 8004800:	4603      	mov	r3, r0
 8004802:	461a      	mov	r2, r3
 8004804:	68bb      	ldr	r3, [r7, #8]
 8004806:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	789b      	ldrb	r3, [r3, #2]
 800480c:	4618      	mov	r0, r3
 800480e:	f000 f97d 	bl	8004b0c <RTC_Bcd2ToByte>
 8004812:	4603      	mov	r3, r0
 8004814:	461a      	mov	r2, r3
 8004816:	68bb      	ldr	r3, [r7, #8]
 8004818:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800481a:	2300      	movs	r3, #0
}
 800481c:	4618      	mov	r0, r3
 800481e:	3718      	adds	r7, #24
 8004820:	46bd      	mov	sp, r7
 8004822:	bd80      	pop	{r7, pc}

08004824 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004824:	b590      	push	{r4, r7, lr}
 8004826:	b087      	sub	sp, #28
 8004828:	af00      	add	r7, sp, #0
 800482a:	60f8      	str	r0, [r7, #12]
 800482c:	60b9      	str	r1, [r7, #8]
 800482e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8004830:	2300      	movs	r3, #0
 8004832:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	7f1b      	ldrb	r3, [r3, #28]
 8004838:	2b01      	cmp	r3, #1
 800483a:	d101      	bne.n	8004840 <HAL_RTC_SetDate+0x1c>
 800483c:	2302      	movs	r3, #2
 800483e:	e071      	b.n	8004924 <HAL_RTC_SetDate+0x100>
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	2201      	movs	r2, #1
 8004844:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	2202      	movs	r2, #2
 800484a:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d10e      	bne.n	8004870 <HAL_RTC_SetDate+0x4c>
 8004852:	68bb      	ldr	r3, [r7, #8]
 8004854:	785b      	ldrb	r3, [r3, #1]
 8004856:	f003 0310 	and.w	r3, r3, #16
 800485a:	2b00      	cmp	r3, #0
 800485c:	d008      	beq.n	8004870 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800485e:	68bb      	ldr	r3, [r7, #8]
 8004860:	785b      	ldrb	r3, [r3, #1]
 8004862:	f023 0310 	bic.w	r3, r3, #16
 8004866:	b2db      	uxtb	r3, r3
 8004868:	330a      	adds	r3, #10
 800486a:	b2da      	uxtb	r2, r3
 800486c:	68bb      	ldr	r3, [r7, #8]
 800486e:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d11c      	bne.n	80048b0 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004876:	68bb      	ldr	r3, [r7, #8]
 8004878:	78db      	ldrb	r3, [r3, #3]
 800487a:	4618      	mov	r0, r3
 800487c:	f000 f929 	bl	8004ad2 <RTC_ByteToBcd2>
 8004880:	4603      	mov	r3, r0
 8004882:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004884:	68bb      	ldr	r3, [r7, #8]
 8004886:	785b      	ldrb	r3, [r3, #1]
 8004888:	4618      	mov	r0, r3
 800488a:	f000 f922 	bl	8004ad2 <RTC_ByteToBcd2>
 800488e:	4603      	mov	r3, r0
 8004890:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004892:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8004894:	68bb      	ldr	r3, [r7, #8]
 8004896:	789b      	ldrb	r3, [r3, #2]
 8004898:	4618      	mov	r0, r3
 800489a:	f000 f91a 	bl	8004ad2 <RTC_ByteToBcd2>
 800489e:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80048a0:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 80048a4:	68bb      	ldr	r3, [r7, #8]
 80048a6:	781b      	ldrb	r3, [r3, #0]
 80048a8:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80048aa:	4313      	orrs	r3, r2
 80048ac:	617b      	str	r3, [r7, #20]
 80048ae:	e00e      	b.n	80048ce <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80048b0:	68bb      	ldr	r3, [r7, #8]
 80048b2:	78db      	ldrb	r3, [r3, #3]
 80048b4:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80048b6:	68bb      	ldr	r3, [r7, #8]
 80048b8:	785b      	ldrb	r3, [r3, #1]
 80048ba:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80048bc:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 80048be:	68ba      	ldr	r2, [r7, #8]
 80048c0:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80048c2:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80048c4:	68bb      	ldr	r3, [r7, #8]
 80048c6:	781b      	ldrb	r3, [r3, #0]
 80048c8:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80048ca:	4313      	orrs	r3, r2
 80048cc:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	22ca      	movs	r2, #202	; 0xca
 80048d4:	625a      	str	r2, [r3, #36]	; 0x24
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	2253      	movs	r2, #83	; 0x53
 80048dc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80048de:	68f8      	ldr	r0, [r7, #12]
 80048e0:	f000 f89b 	bl	8004a1a <RTC_EnterInitMode>
 80048e4:	4603      	mov	r3, r0
 80048e6:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80048e8:	7cfb      	ldrb	r3, [r7, #19]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d10c      	bne.n	8004908 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681a      	ldr	r2, [r3, #0]
 80048f2:	697b      	ldr	r3, [r7, #20]
 80048f4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80048f8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80048fc:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80048fe:	68f8      	ldr	r0, [r7, #12]
 8004900:	f000 f8c2 	bl	8004a88 <RTC_ExitInitMode>
 8004904:	4603      	mov	r3, r0
 8004906:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8004908:	7cfb      	ldrb	r3, [r7, #19]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d102      	bne.n	8004914 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	2201      	movs	r2, #1
 8004912:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	22ff      	movs	r2, #255	; 0xff
 800491a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	2200      	movs	r2, #0
 8004920:	771a      	strb	r2, [r3, #28]

  return status;
 8004922:	7cfb      	ldrb	r3, [r7, #19]
}
 8004924:	4618      	mov	r0, r3
 8004926:	371c      	adds	r7, #28
 8004928:	46bd      	mov	sp, r7
 800492a:	bd90      	pop	{r4, r7, pc}

0800492c <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b086      	sub	sp, #24
 8004930:	af00      	add	r7, sp, #0
 8004932:	60f8      	str	r0, [r7, #12]
 8004934:	60b9      	str	r1, [r7, #8]
 8004936:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8004938:	2300      	movs	r3, #0
 800493a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	685b      	ldr	r3, [r3, #4]
 8004942:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004946:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800494a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800494c:	697b      	ldr	r3, [r7, #20]
 800494e:	0c1b      	lsrs	r3, r3, #16
 8004950:	b2da      	uxtb	r2, r3
 8004952:	68bb      	ldr	r3, [r7, #8]
 8004954:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8004956:	697b      	ldr	r3, [r7, #20]
 8004958:	0a1b      	lsrs	r3, r3, #8
 800495a:	b2db      	uxtb	r3, r3
 800495c:	f003 031f 	and.w	r3, r3, #31
 8004960:	b2da      	uxtb	r2, r3
 8004962:	68bb      	ldr	r3, [r7, #8]
 8004964:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8004966:	697b      	ldr	r3, [r7, #20]
 8004968:	b2db      	uxtb	r3, r3
 800496a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800496e:	b2da      	uxtb	r2, r3
 8004970:	68bb      	ldr	r3, [r7, #8]
 8004972:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8004974:	697b      	ldr	r3, [r7, #20]
 8004976:	0b5b      	lsrs	r3, r3, #13
 8004978:	b2db      	uxtb	r3, r3
 800497a:	f003 0307 	and.w	r3, r3, #7
 800497e:	b2da      	uxtb	r2, r3
 8004980:	68bb      	ldr	r3, [r7, #8]
 8004982:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d11a      	bne.n	80049c0 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800498a:	68bb      	ldr	r3, [r7, #8]
 800498c:	78db      	ldrb	r3, [r3, #3]
 800498e:	4618      	mov	r0, r3
 8004990:	f000 f8bc 	bl	8004b0c <RTC_Bcd2ToByte>
 8004994:	4603      	mov	r3, r0
 8004996:	461a      	mov	r2, r3
 8004998:	68bb      	ldr	r3, [r7, #8]
 800499a:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800499c:	68bb      	ldr	r3, [r7, #8]
 800499e:	785b      	ldrb	r3, [r3, #1]
 80049a0:	4618      	mov	r0, r3
 80049a2:	f000 f8b3 	bl	8004b0c <RTC_Bcd2ToByte>
 80049a6:	4603      	mov	r3, r0
 80049a8:	461a      	mov	r2, r3
 80049aa:	68bb      	ldr	r3, [r7, #8]
 80049ac:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80049ae:	68bb      	ldr	r3, [r7, #8]
 80049b0:	789b      	ldrb	r3, [r3, #2]
 80049b2:	4618      	mov	r0, r3
 80049b4:	f000 f8aa 	bl	8004b0c <RTC_Bcd2ToByte>
 80049b8:	4603      	mov	r3, r0
 80049ba:	461a      	mov	r2, r3
 80049bc:	68bb      	ldr	r3, [r7, #8]
 80049be:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80049c0:	2300      	movs	r3, #0
}
 80049c2:	4618      	mov	r0, r3
 80049c4:	3718      	adds	r7, #24
 80049c6:	46bd      	mov	sp, r7
 80049c8:	bd80      	pop	{r7, pc}

080049ca <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80049ca:	b580      	push	{r7, lr}
 80049cc:	b084      	sub	sp, #16
 80049ce:	af00      	add	r7, sp, #0
 80049d0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80049d2:	2300      	movs	r3, #0
 80049d4:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	68da      	ldr	r2, [r3, #12]
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80049e4:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80049e6:	f7fd facb 	bl	8001f80 <HAL_GetTick>
 80049ea:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80049ec:	e009      	b.n	8004a02 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80049ee:	f7fd fac7 	bl	8001f80 <HAL_GetTick>
 80049f2:	4602      	mov	r2, r0
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	1ad3      	subs	r3, r2, r3
 80049f8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80049fc:	d901      	bls.n	8004a02 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80049fe:	2303      	movs	r3, #3
 8004a00:	e007      	b.n	8004a12 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	68db      	ldr	r3, [r3, #12]
 8004a08:	f003 0320 	and.w	r3, r3, #32
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d0ee      	beq.n	80049ee <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8004a10:	2300      	movs	r3, #0
}
 8004a12:	4618      	mov	r0, r3
 8004a14:	3710      	adds	r7, #16
 8004a16:	46bd      	mov	sp, r7
 8004a18:	bd80      	pop	{r7, pc}

08004a1a <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004a1a:	b580      	push	{r7, lr}
 8004a1c:	b084      	sub	sp, #16
 8004a1e:	af00      	add	r7, sp, #0
 8004a20:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004a22:	2300      	movs	r3, #0
 8004a24:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004a26:	2300      	movs	r3, #0
 8004a28:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	68db      	ldr	r3, [r3, #12]
 8004a30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d122      	bne.n	8004a7e <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	68da      	ldr	r2, [r3, #12]
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004a46:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004a48:	f7fd fa9a 	bl	8001f80 <HAL_GetTick>
 8004a4c:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004a4e:	e00c      	b.n	8004a6a <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004a50:	f7fd fa96 	bl	8001f80 <HAL_GetTick>
 8004a54:	4602      	mov	r2, r0
 8004a56:	68bb      	ldr	r3, [r7, #8]
 8004a58:	1ad3      	subs	r3, r2, r3
 8004a5a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004a5e:	d904      	bls.n	8004a6a <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2204      	movs	r2, #4
 8004a64:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8004a66:	2301      	movs	r3, #1
 8004a68:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	68db      	ldr	r3, [r3, #12]
 8004a70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d102      	bne.n	8004a7e <RTC_EnterInitMode+0x64>
 8004a78:	7bfb      	ldrb	r3, [r7, #15]
 8004a7a:	2b01      	cmp	r3, #1
 8004a7c:	d1e8      	bne.n	8004a50 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8004a7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a80:	4618      	mov	r0, r3
 8004a82:	3710      	adds	r7, #16
 8004a84:	46bd      	mov	sp, r7
 8004a86:	bd80      	pop	{r7, pc}

08004a88 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b084      	sub	sp, #16
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a90:	2300      	movs	r3, #0
 8004a92:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	68da      	ldr	r2, [r3, #12]
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004aa2:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	689b      	ldr	r3, [r3, #8]
 8004aaa:	f003 0320 	and.w	r3, r3, #32
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d10a      	bne.n	8004ac8 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004ab2:	6878      	ldr	r0, [r7, #4]
 8004ab4:	f7ff ff89 	bl	80049ca <HAL_RTC_WaitForSynchro>
 8004ab8:	4603      	mov	r3, r0
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d004      	beq.n	8004ac8 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2204      	movs	r2, #4
 8004ac2:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8004ac4:	2301      	movs	r3, #1
 8004ac6:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8004ac8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004aca:	4618      	mov	r0, r3
 8004acc:	3710      	adds	r7, #16
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	bd80      	pop	{r7, pc}

08004ad2 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8004ad2:	b480      	push	{r7}
 8004ad4:	b085      	sub	sp, #20
 8004ad6:	af00      	add	r7, sp, #0
 8004ad8:	4603      	mov	r3, r0
 8004ada:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 8004adc:	2300      	movs	r3, #0
 8004ade:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 8004ae0:	e005      	b.n	8004aee <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8004ae2:	7bfb      	ldrb	r3, [r7, #15]
 8004ae4:	3301      	adds	r3, #1
 8004ae6:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 8004ae8:	79fb      	ldrb	r3, [r7, #7]
 8004aea:	3b0a      	subs	r3, #10
 8004aec:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8004aee:	79fb      	ldrb	r3, [r7, #7]
 8004af0:	2b09      	cmp	r3, #9
 8004af2:	d8f6      	bhi.n	8004ae2 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8004af4:	7bfb      	ldrb	r3, [r7, #15]
 8004af6:	011b      	lsls	r3, r3, #4
 8004af8:	b2da      	uxtb	r2, r3
 8004afa:	79fb      	ldrb	r3, [r7, #7]
 8004afc:	4313      	orrs	r3, r2
 8004afe:	b2db      	uxtb	r3, r3
}
 8004b00:	4618      	mov	r0, r3
 8004b02:	3714      	adds	r7, #20
 8004b04:	46bd      	mov	sp, r7
 8004b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0a:	4770      	bx	lr

08004b0c <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8004b0c:	b480      	push	{r7}
 8004b0e:	b085      	sub	sp, #20
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	4603      	mov	r3, r0
 8004b14:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 8004b16:	2300      	movs	r3, #0
 8004b18:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8004b1a:	79fb      	ldrb	r3, [r7, #7]
 8004b1c:	091b      	lsrs	r3, r3, #4
 8004b1e:	b2db      	uxtb	r3, r3
 8004b20:	461a      	mov	r2, r3
 8004b22:	0092      	lsls	r2, r2, #2
 8004b24:	4413      	add	r3, r2
 8004b26:	005b      	lsls	r3, r3, #1
 8004b28:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 8004b2a:	79fb      	ldrb	r3, [r7, #7]
 8004b2c:	f003 030f 	and.w	r3, r3, #15
 8004b30:	b2da      	uxtb	r2, r3
 8004b32:	7bfb      	ldrb	r3, [r7, #15]
 8004b34:	4413      	add	r3, r2
 8004b36:	b2db      	uxtb	r3, r3
}
 8004b38:	4618      	mov	r0, r3
 8004b3a:	3714      	adds	r7, #20
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b42:	4770      	bx	lr

08004b44 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b082      	sub	sp, #8
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d101      	bne.n	8004b56 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004b52:	2301      	movs	r3, #1
 8004b54:	e041      	b.n	8004bda <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b5c:	b2db      	uxtb	r3, r3
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d106      	bne.n	8004b70 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2200      	movs	r2, #0
 8004b66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004b6a:	6878      	ldr	r0, [r7, #4]
 8004b6c:	f7fc ffc4 	bl	8001af8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2202      	movs	r2, #2
 8004b74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681a      	ldr	r2, [r3, #0]
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	3304      	adds	r3, #4
 8004b80:	4619      	mov	r1, r3
 8004b82:	4610      	mov	r0, r2
 8004b84:	f000 fa88 	bl	8005098 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2201      	movs	r2, #1
 8004b8c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2201      	movs	r2, #1
 8004b94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2201      	movs	r2, #1
 8004b9c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2201      	movs	r2, #1
 8004ba4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2201      	movs	r2, #1
 8004bac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2201      	movs	r2, #1
 8004bb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2201      	movs	r2, #1
 8004bbc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2201      	movs	r2, #1
 8004bc4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2201      	movs	r2, #1
 8004bcc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2201      	movs	r2, #1
 8004bd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004bd8:	2300      	movs	r3, #0
}
 8004bda:	4618      	mov	r0, r3
 8004bdc:	3708      	adds	r7, #8
 8004bde:	46bd      	mov	sp, r7
 8004be0:	bd80      	pop	{r7, pc}
	...

08004be4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004be4:	b480      	push	{r7}
 8004be6:	b085      	sub	sp, #20
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bf2:	b2db      	uxtb	r3, r3
 8004bf4:	2b01      	cmp	r3, #1
 8004bf6:	d001      	beq.n	8004bfc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	e044      	b.n	8004c86 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2202      	movs	r2, #2
 8004c00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	68da      	ldr	r2, [r3, #12]
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f042 0201 	orr.w	r2, r2, #1
 8004c12:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	4a1e      	ldr	r2, [pc, #120]	; (8004c94 <HAL_TIM_Base_Start_IT+0xb0>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d018      	beq.n	8004c50 <HAL_TIM_Base_Start_IT+0x6c>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c26:	d013      	beq.n	8004c50 <HAL_TIM_Base_Start_IT+0x6c>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4a1a      	ldr	r2, [pc, #104]	; (8004c98 <HAL_TIM_Base_Start_IT+0xb4>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d00e      	beq.n	8004c50 <HAL_TIM_Base_Start_IT+0x6c>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	4a19      	ldr	r2, [pc, #100]	; (8004c9c <HAL_TIM_Base_Start_IT+0xb8>)
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d009      	beq.n	8004c50 <HAL_TIM_Base_Start_IT+0x6c>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4a17      	ldr	r2, [pc, #92]	; (8004ca0 <HAL_TIM_Base_Start_IT+0xbc>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d004      	beq.n	8004c50 <HAL_TIM_Base_Start_IT+0x6c>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4a16      	ldr	r2, [pc, #88]	; (8004ca4 <HAL_TIM_Base_Start_IT+0xc0>)
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d111      	bne.n	8004c74 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	689b      	ldr	r3, [r3, #8]
 8004c56:	f003 0307 	and.w	r3, r3, #7
 8004c5a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	2b06      	cmp	r3, #6
 8004c60:	d010      	beq.n	8004c84 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	681a      	ldr	r2, [r3, #0]
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f042 0201 	orr.w	r2, r2, #1
 8004c70:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c72:	e007      	b.n	8004c84 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	681a      	ldr	r2, [r3, #0]
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f042 0201 	orr.w	r2, r2, #1
 8004c82:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004c84:	2300      	movs	r3, #0
}
 8004c86:	4618      	mov	r0, r3
 8004c88:	3714      	adds	r7, #20
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c90:	4770      	bx	lr
 8004c92:	bf00      	nop
 8004c94:	40010000 	.word	0x40010000
 8004c98:	40000400 	.word	0x40000400
 8004c9c:	40000800 	.word	0x40000800
 8004ca0:	40000c00 	.word	0x40000c00
 8004ca4:	40014000 	.word	0x40014000

08004ca8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b082      	sub	sp, #8
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	691b      	ldr	r3, [r3, #16]
 8004cb6:	f003 0302 	and.w	r3, r3, #2
 8004cba:	2b02      	cmp	r3, #2
 8004cbc:	d122      	bne.n	8004d04 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	68db      	ldr	r3, [r3, #12]
 8004cc4:	f003 0302 	and.w	r3, r3, #2
 8004cc8:	2b02      	cmp	r3, #2
 8004cca:	d11b      	bne.n	8004d04 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f06f 0202 	mvn.w	r2, #2
 8004cd4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2201      	movs	r2, #1
 8004cda:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	699b      	ldr	r3, [r3, #24]
 8004ce2:	f003 0303 	and.w	r3, r3, #3
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d003      	beq.n	8004cf2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004cea:	6878      	ldr	r0, [r7, #4]
 8004cec:	f000 f9b5 	bl	800505a <HAL_TIM_IC_CaptureCallback>
 8004cf0:	e005      	b.n	8004cfe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cf2:	6878      	ldr	r0, [r7, #4]
 8004cf4:	f000 f9a7 	bl	8005046 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cf8:	6878      	ldr	r0, [r7, #4]
 8004cfa:	f000 f9b8 	bl	800506e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2200      	movs	r2, #0
 8004d02:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	691b      	ldr	r3, [r3, #16]
 8004d0a:	f003 0304 	and.w	r3, r3, #4
 8004d0e:	2b04      	cmp	r3, #4
 8004d10:	d122      	bne.n	8004d58 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	68db      	ldr	r3, [r3, #12]
 8004d18:	f003 0304 	and.w	r3, r3, #4
 8004d1c:	2b04      	cmp	r3, #4
 8004d1e:	d11b      	bne.n	8004d58 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f06f 0204 	mvn.w	r2, #4
 8004d28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2202      	movs	r2, #2
 8004d2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	699b      	ldr	r3, [r3, #24]
 8004d36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d003      	beq.n	8004d46 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d3e:	6878      	ldr	r0, [r7, #4]
 8004d40:	f000 f98b 	bl	800505a <HAL_TIM_IC_CaptureCallback>
 8004d44:	e005      	b.n	8004d52 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d46:	6878      	ldr	r0, [r7, #4]
 8004d48:	f000 f97d 	bl	8005046 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d4c:	6878      	ldr	r0, [r7, #4]
 8004d4e:	f000 f98e 	bl	800506e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2200      	movs	r2, #0
 8004d56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	691b      	ldr	r3, [r3, #16]
 8004d5e:	f003 0308 	and.w	r3, r3, #8
 8004d62:	2b08      	cmp	r3, #8
 8004d64:	d122      	bne.n	8004dac <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	68db      	ldr	r3, [r3, #12]
 8004d6c:	f003 0308 	and.w	r3, r3, #8
 8004d70:	2b08      	cmp	r3, #8
 8004d72:	d11b      	bne.n	8004dac <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f06f 0208 	mvn.w	r2, #8
 8004d7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2204      	movs	r2, #4
 8004d82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	69db      	ldr	r3, [r3, #28]
 8004d8a:	f003 0303 	and.w	r3, r3, #3
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d003      	beq.n	8004d9a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d92:	6878      	ldr	r0, [r7, #4]
 8004d94:	f000 f961 	bl	800505a <HAL_TIM_IC_CaptureCallback>
 8004d98:	e005      	b.n	8004da6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d9a:	6878      	ldr	r0, [r7, #4]
 8004d9c:	f000 f953 	bl	8005046 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004da0:	6878      	ldr	r0, [r7, #4]
 8004da2:	f000 f964 	bl	800506e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2200      	movs	r2, #0
 8004daa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	691b      	ldr	r3, [r3, #16]
 8004db2:	f003 0310 	and.w	r3, r3, #16
 8004db6:	2b10      	cmp	r3, #16
 8004db8:	d122      	bne.n	8004e00 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	68db      	ldr	r3, [r3, #12]
 8004dc0:	f003 0310 	and.w	r3, r3, #16
 8004dc4:	2b10      	cmp	r3, #16
 8004dc6:	d11b      	bne.n	8004e00 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f06f 0210 	mvn.w	r2, #16
 8004dd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2208      	movs	r2, #8
 8004dd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	69db      	ldr	r3, [r3, #28]
 8004dde:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d003      	beq.n	8004dee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004de6:	6878      	ldr	r0, [r7, #4]
 8004de8:	f000 f937 	bl	800505a <HAL_TIM_IC_CaptureCallback>
 8004dec:	e005      	b.n	8004dfa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004dee:	6878      	ldr	r0, [r7, #4]
 8004df0:	f000 f929 	bl	8005046 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004df4:	6878      	ldr	r0, [r7, #4]
 8004df6:	f000 f93a 	bl	800506e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	691b      	ldr	r3, [r3, #16]
 8004e06:	f003 0301 	and.w	r3, r3, #1
 8004e0a:	2b01      	cmp	r3, #1
 8004e0c:	d10e      	bne.n	8004e2c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	68db      	ldr	r3, [r3, #12]
 8004e14:	f003 0301 	and.w	r3, r3, #1
 8004e18:	2b01      	cmp	r3, #1
 8004e1a:	d107      	bne.n	8004e2c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f06f 0201 	mvn.w	r2, #1
 8004e24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004e26:	6878      	ldr	r0, [r7, #4]
 8004e28:	f7fc fd1e 	bl	8001868 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	691b      	ldr	r3, [r3, #16]
 8004e32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e36:	2b80      	cmp	r3, #128	; 0x80
 8004e38:	d10e      	bne.n	8004e58 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	68db      	ldr	r3, [r3, #12]
 8004e40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e44:	2b80      	cmp	r3, #128	; 0x80
 8004e46:	d107      	bne.n	8004e58 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004e50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004e52:	6878      	ldr	r0, [r7, #4]
 8004e54:	f000 fab2 	bl	80053bc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	691b      	ldr	r3, [r3, #16]
 8004e5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e62:	2b40      	cmp	r3, #64	; 0x40
 8004e64:	d10e      	bne.n	8004e84 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	68db      	ldr	r3, [r3, #12]
 8004e6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e70:	2b40      	cmp	r3, #64	; 0x40
 8004e72:	d107      	bne.n	8004e84 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004e7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004e7e:	6878      	ldr	r0, [r7, #4]
 8004e80:	f000 f8ff 	bl	8005082 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	691b      	ldr	r3, [r3, #16]
 8004e8a:	f003 0320 	and.w	r3, r3, #32
 8004e8e:	2b20      	cmp	r3, #32
 8004e90:	d10e      	bne.n	8004eb0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	68db      	ldr	r3, [r3, #12]
 8004e98:	f003 0320 	and.w	r3, r3, #32
 8004e9c:	2b20      	cmp	r3, #32
 8004e9e:	d107      	bne.n	8004eb0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f06f 0220 	mvn.w	r2, #32
 8004ea8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004eaa:	6878      	ldr	r0, [r7, #4]
 8004eac:	f000 fa7c 	bl	80053a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004eb0:	bf00      	nop
 8004eb2:	3708      	adds	r7, #8
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	bd80      	pop	{r7, pc}

08004eb8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b084      	sub	sp, #16
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
 8004ec0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ecc:	2b01      	cmp	r3, #1
 8004ece:	d101      	bne.n	8004ed4 <HAL_TIM_ConfigClockSource+0x1c>
 8004ed0:	2302      	movs	r3, #2
 8004ed2:	e0b4      	b.n	800503e <HAL_TIM_ConfigClockSource+0x186>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2201      	movs	r2, #1
 8004ed8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2202      	movs	r2, #2
 8004ee0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	689b      	ldr	r3, [r3, #8]
 8004eea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004eec:	68bb      	ldr	r3, [r7, #8]
 8004eee:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004ef2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ef4:	68bb      	ldr	r3, [r7, #8]
 8004ef6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004efa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	68ba      	ldr	r2, [r7, #8]
 8004f02:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f0c:	d03e      	beq.n	8004f8c <HAL_TIM_ConfigClockSource+0xd4>
 8004f0e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f12:	f200 8087 	bhi.w	8005024 <HAL_TIM_ConfigClockSource+0x16c>
 8004f16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f1a:	f000 8086 	beq.w	800502a <HAL_TIM_ConfigClockSource+0x172>
 8004f1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f22:	d87f      	bhi.n	8005024 <HAL_TIM_ConfigClockSource+0x16c>
 8004f24:	2b70      	cmp	r3, #112	; 0x70
 8004f26:	d01a      	beq.n	8004f5e <HAL_TIM_ConfigClockSource+0xa6>
 8004f28:	2b70      	cmp	r3, #112	; 0x70
 8004f2a:	d87b      	bhi.n	8005024 <HAL_TIM_ConfigClockSource+0x16c>
 8004f2c:	2b60      	cmp	r3, #96	; 0x60
 8004f2e:	d050      	beq.n	8004fd2 <HAL_TIM_ConfigClockSource+0x11a>
 8004f30:	2b60      	cmp	r3, #96	; 0x60
 8004f32:	d877      	bhi.n	8005024 <HAL_TIM_ConfigClockSource+0x16c>
 8004f34:	2b50      	cmp	r3, #80	; 0x50
 8004f36:	d03c      	beq.n	8004fb2 <HAL_TIM_ConfigClockSource+0xfa>
 8004f38:	2b50      	cmp	r3, #80	; 0x50
 8004f3a:	d873      	bhi.n	8005024 <HAL_TIM_ConfigClockSource+0x16c>
 8004f3c:	2b40      	cmp	r3, #64	; 0x40
 8004f3e:	d058      	beq.n	8004ff2 <HAL_TIM_ConfigClockSource+0x13a>
 8004f40:	2b40      	cmp	r3, #64	; 0x40
 8004f42:	d86f      	bhi.n	8005024 <HAL_TIM_ConfigClockSource+0x16c>
 8004f44:	2b30      	cmp	r3, #48	; 0x30
 8004f46:	d064      	beq.n	8005012 <HAL_TIM_ConfigClockSource+0x15a>
 8004f48:	2b30      	cmp	r3, #48	; 0x30
 8004f4a:	d86b      	bhi.n	8005024 <HAL_TIM_ConfigClockSource+0x16c>
 8004f4c:	2b20      	cmp	r3, #32
 8004f4e:	d060      	beq.n	8005012 <HAL_TIM_ConfigClockSource+0x15a>
 8004f50:	2b20      	cmp	r3, #32
 8004f52:	d867      	bhi.n	8005024 <HAL_TIM_ConfigClockSource+0x16c>
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d05c      	beq.n	8005012 <HAL_TIM_ConfigClockSource+0x15a>
 8004f58:	2b10      	cmp	r3, #16
 8004f5a:	d05a      	beq.n	8005012 <HAL_TIM_ConfigClockSource+0x15a>
 8004f5c:	e062      	b.n	8005024 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6818      	ldr	r0, [r3, #0]
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	6899      	ldr	r1, [r3, #8]
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	685a      	ldr	r2, [r3, #4]
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	68db      	ldr	r3, [r3, #12]
 8004f6e:	f000 f98d 	bl	800528c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	689b      	ldr	r3, [r3, #8]
 8004f78:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004f7a:	68bb      	ldr	r3, [r7, #8]
 8004f7c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004f80:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	68ba      	ldr	r2, [r7, #8]
 8004f88:	609a      	str	r2, [r3, #8]
      break;
 8004f8a:	e04f      	b.n	800502c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6818      	ldr	r0, [r3, #0]
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	6899      	ldr	r1, [r3, #8]
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	685a      	ldr	r2, [r3, #4]
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	68db      	ldr	r3, [r3, #12]
 8004f9c:	f000 f976 	bl	800528c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	689a      	ldr	r2, [r3, #8]
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004fae:	609a      	str	r2, [r3, #8]
      break;
 8004fb0:	e03c      	b.n	800502c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6818      	ldr	r0, [r3, #0]
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	6859      	ldr	r1, [r3, #4]
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	68db      	ldr	r3, [r3, #12]
 8004fbe:	461a      	mov	r2, r3
 8004fc0:	f000 f8ea 	bl	8005198 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	2150      	movs	r1, #80	; 0x50
 8004fca:	4618      	mov	r0, r3
 8004fcc:	f000 f943 	bl	8005256 <TIM_ITRx_SetConfig>
      break;
 8004fd0:	e02c      	b.n	800502c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6818      	ldr	r0, [r3, #0]
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	6859      	ldr	r1, [r3, #4]
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	68db      	ldr	r3, [r3, #12]
 8004fde:	461a      	mov	r2, r3
 8004fe0:	f000 f909 	bl	80051f6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	2160      	movs	r1, #96	; 0x60
 8004fea:	4618      	mov	r0, r3
 8004fec:	f000 f933 	bl	8005256 <TIM_ITRx_SetConfig>
      break;
 8004ff0:	e01c      	b.n	800502c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6818      	ldr	r0, [r3, #0]
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	6859      	ldr	r1, [r3, #4]
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	68db      	ldr	r3, [r3, #12]
 8004ffe:	461a      	mov	r2, r3
 8005000:	f000 f8ca 	bl	8005198 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	2140      	movs	r1, #64	; 0x40
 800500a:	4618      	mov	r0, r3
 800500c:	f000 f923 	bl	8005256 <TIM_ITRx_SetConfig>
      break;
 8005010:	e00c      	b.n	800502c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681a      	ldr	r2, [r3, #0]
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4619      	mov	r1, r3
 800501c:	4610      	mov	r0, r2
 800501e:	f000 f91a 	bl	8005256 <TIM_ITRx_SetConfig>
      break;
 8005022:	e003      	b.n	800502c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005024:	2301      	movs	r3, #1
 8005026:	73fb      	strb	r3, [r7, #15]
      break;
 8005028:	e000      	b.n	800502c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800502a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2201      	movs	r2, #1
 8005030:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2200      	movs	r2, #0
 8005038:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800503c:	7bfb      	ldrb	r3, [r7, #15]
}
 800503e:	4618      	mov	r0, r3
 8005040:	3710      	adds	r7, #16
 8005042:	46bd      	mov	sp, r7
 8005044:	bd80      	pop	{r7, pc}

08005046 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005046:	b480      	push	{r7}
 8005048:	b083      	sub	sp, #12
 800504a:	af00      	add	r7, sp, #0
 800504c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800504e:	bf00      	nop
 8005050:	370c      	adds	r7, #12
 8005052:	46bd      	mov	sp, r7
 8005054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005058:	4770      	bx	lr

0800505a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800505a:	b480      	push	{r7}
 800505c:	b083      	sub	sp, #12
 800505e:	af00      	add	r7, sp, #0
 8005060:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005062:	bf00      	nop
 8005064:	370c      	adds	r7, #12
 8005066:	46bd      	mov	sp, r7
 8005068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506c:	4770      	bx	lr

0800506e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800506e:	b480      	push	{r7}
 8005070:	b083      	sub	sp, #12
 8005072:	af00      	add	r7, sp, #0
 8005074:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005076:	bf00      	nop
 8005078:	370c      	adds	r7, #12
 800507a:	46bd      	mov	sp, r7
 800507c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005080:	4770      	bx	lr

08005082 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005082:	b480      	push	{r7}
 8005084:	b083      	sub	sp, #12
 8005086:	af00      	add	r7, sp, #0
 8005088:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800508a:	bf00      	nop
 800508c:	370c      	adds	r7, #12
 800508e:	46bd      	mov	sp, r7
 8005090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005094:	4770      	bx	lr
	...

08005098 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005098:	b480      	push	{r7}
 800509a:	b085      	sub	sp, #20
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
 80050a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	4a34      	ldr	r2, [pc, #208]	; (800517c <TIM_Base_SetConfig+0xe4>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d00f      	beq.n	80050d0 <TIM_Base_SetConfig+0x38>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050b6:	d00b      	beq.n	80050d0 <TIM_Base_SetConfig+0x38>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	4a31      	ldr	r2, [pc, #196]	; (8005180 <TIM_Base_SetConfig+0xe8>)
 80050bc:	4293      	cmp	r3, r2
 80050be:	d007      	beq.n	80050d0 <TIM_Base_SetConfig+0x38>
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	4a30      	ldr	r2, [pc, #192]	; (8005184 <TIM_Base_SetConfig+0xec>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d003      	beq.n	80050d0 <TIM_Base_SetConfig+0x38>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	4a2f      	ldr	r2, [pc, #188]	; (8005188 <TIM_Base_SetConfig+0xf0>)
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d108      	bne.n	80050e2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	685b      	ldr	r3, [r3, #4]
 80050dc:	68fa      	ldr	r2, [r7, #12]
 80050de:	4313      	orrs	r3, r2
 80050e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	4a25      	ldr	r2, [pc, #148]	; (800517c <TIM_Base_SetConfig+0xe4>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d01b      	beq.n	8005122 <TIM_Base_SetConfig+0x8a>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050f0:	d017      	beq.n	8005122 <TIM_Base_SetConfig+0x8a>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	4a22      	ldr	r2, [pc, #136]	; (8005180 <TIM_Base_SetConfig+0xe8>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d013      	beq.n	8005122 <TIM_Base_SetConfig+0x8a>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	4a21      	ldr	r2, [pc, #132]	; (8005184 <TIM_Base_SetConfig+0xec>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	d00f      	beq.n	8005122 <TIM_Base_SetConfig+0x8a>
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	4a20      	ldr	r2, [pc, #128]	; (8005188 <TIM_Base_SetConfig+0xf0>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d00b      	beq.n	8005122 <TIM_Base_SetConfig+0x8a>
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	4a1f      	ldr	r2, [pc, #124]	; (800518c <TIM_Base_SetConfig+0xf4>)
 800510e:	4293      	cmp	r3, r2
 8005110:	d007      	beq.n	8005122 <TIM_Base_SetConfig+0x8a>
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	4a1e      	ldr	r2, [pc, #120]	; (8005190 <TIM_Base_SetConfig+0xf8>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d003      	beq.n	8005122 <TIM_Base_SetConfig+0x8a>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	4a1d      	ldr	r2, [pc, #116]	; (8005194 <TIM_Base_SetConfig+0xfc>)
 800511e:	4293      	cmp	r3, r2
 8005120:	d108      	bne.n	8005134 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005128:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	68db      	ldr	r3, [r3, #12]
 800512e:	68fa      	ldr	r2, [r7, #12]
 8005130:	4313      	orrs	r3, r2
 8005132:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	695b      	ldr	r3, [r3, #20]
 800513e:	4313      	orrs	r3, r2
 8005140:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	68fa      	ldr	r2, [r7, #12]
 8005146:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	689a      	ldr	r2, [r3, #8]
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	681a      	ldr	r2, [r3, #0]
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	4a08      	ldr	r2, [pc, #32]	; (800517c <TIM_Base_SetConfig+0xe4>)
 800515c:	4293      	cmp	r3, r2
 800515e:	d103      	bne.n	8005168 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	691a      	ldr	r2, [r3, #16]
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2201      	movs	r2, #1
 800516c:	615a      	str	r2, [r3, #20]
}
 800516e:	bf00      	nop
 8005170:	3714      	adds	r7, #20
 8005172:	46bd      	mov	sp, r7
 8005174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005178:	4770      	bx	lr
 800517a:	bf00      	nop
 800517c:	40010000 	.word	0x40010000
 8005180:	40000400 	.word	0x40000400
 8005184:	40000800 	.word	0x40000800
 8005188:	40000c00 	.word	0x40000c00
 800518c:	40014000 	.word	0x40014000
 8005190:	40014400 	.word	0x40014400
 8005194:	40014800 	.word	0x40014800

08005198 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005198:	b480      	push	{r7}
 800519a:	b087      	sub	sp, #28
 800519c:	af00      	add	r7, sp, #0
 800519e:	60f8      	str	r0, [r7, #12]
 80051a0:	60b9      	str	r1, [r7, #8]
 80051a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	6a1b      	ldr	r3, [r3, #32]
 80051a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	6a1b      	ldr	r3, [r3, #32]
 80051ae:	f023 0201 	bic.w	r2, r3, #1
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	699b      	ldr	r3, [r3, #24]
 80051ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80051bc:	693b      	ldr	r3, [r7, #16]
 80051be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80051c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	011b      	lsls	r3, r3, #4
 80051c8:	693a      	ldr	r2, [r7, #16]
 80051ca:	4313      	orrs	r3, r2
 80051cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80051ce:	697b      	ldr	r3, [r7, #20]
 80051d0:	f023 030a 	bic.w	r3, r3, #10
 80051d4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80051d6:	697a      	ldr	r2, [r7, #20]
 80051d8:	68bb      	ldr	r3, [r7, #8]
 80051da:	4313      	orrs	r3, r2
 80051dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	693a      	ldr	r2, [r7, #16]
 80051e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	697a      	ldr	r2, [r7, #20]
 80051e8:	621a      	str	r2, [r3, #32]
}
 80051ea:	bf00      	nop
 80051ec:	371c      	adds	r7, #28
 80051ee:	46bd      	mov	sp, r7
 80051f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f4:	4770      	bx	lr

080051f6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80051f6:	b480      	push	{r7}
 80051f8:	b087      	sub	sp, #28
 80051fa:	af00      	add	r7, sp, #0
 80051fc:	60f8      	str	r0, [r7, #12]
 80051fe:	60b9      	str	r1, [r7, #8]
 8005200:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	6a1b      	ldr	r3, [r3, #32]
 8005206:	f023 0210 	bic.w	r2, r3, #16
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	699b      	ldr	r3, [r3, #24]
 8005212:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	6a1b      	ldr	r3, [r3, #32]
 8005218:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800521a:	697b      	ldr	r3, [r7, #20]
 800521c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005220:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	031b      	lsls	r3, r3, #12
 8005226:	697a      	ldr	r2, [r7, #20]
 8005228:	4313      	orrs	r3, r2
 800522a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800522c:	693b      	ldr	r3, [r7, #16]
 800522e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005232:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005234:	68bb      	ldr	r3, [r7, #8]
 8005236:	011b      	lsls	r3, r3, #4
 8005238:	693a      	ldr	r2, [r7, #16]
 800523a:	4313      	orrs	r3, r2
 800523c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	697a      	ldr	r2, [r7, #20]
 8005242:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	693a      	ldr	r2, [r7, #16]
 8005248:	621a      	str	r2, [r3, #32]
}
 800524a:	bf00      	nop
 800524c:	371c      	adds	r7, #28
 800524e:	46bd      	mov	sp, r7
 8005250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005254:	4770      	bx	lr

08005256 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005256:	b480      	push	{r7}
 8005258:	b085      	sub	sp, #20
 800525a:	af00      	add	r7, sp, #0
 800525c:	6078      	str	r0, [r7, #4]
 800525e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	689b      	ldr	r3, [r3, #8]
 8005264:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800526c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800526e:	683a      	ldr	r2, [r7, #0]
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	4313      	orrs	r3, r2
 8005274:	f043 0307 	orr.w	r3, r3, #7
 8005278:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	68fa      	ldr	r2, [r7, #12]
 800527e:	609a      	str	r2, [r3, #8]
}
 8005280:	bf00      	nop
 8005282:	3714      	adds	r7, #20
 8005284:	46bd      	mov	sp, r7
 8005286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528a:	4770      	bx	lr

0800528c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800528c:	b480      	push	{r7}
 800528e:	b087      	sub	sp, #28
 8005290:	af00      	add	r7, sp, #0
 8005292:	60f8      	str	r0, [r7, #12]
 8005294:	60b9      	str	r1, [r7, #8]
 8005296:	607a      	str	r2, [r7, #4]
 8005298:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	689b      	ldr	r3, [r3, #8]
 800529e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80052a0:	697b      	ldr	r3, [r7, #20]
 80052a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80052a6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	021a      	lsls	r2, r3, #8
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	431a      	orrs	r2, r3
 80052b0:	68bb      	ldr	r3, [r7, #8]
 80052b2:	4313      	orrs	r3, r2
 80052b4:	697a      	ldr	r2, [r7, #20]
 80052b6:	4313      	orrs	r3, r2
 80052b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	697a      	ldr	r2, [r7, #20]
 80052be:	609a      	str	r2, [r3, #8]
}
 80052c0:	bf00      	nop
 80052c2:	371c      	adds	r7, #28
 80052c4:	46bd      	mov	sp, r7
 80052c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ca:	4770      	bx	lr

080052cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80052cc:	b480      	push	{r7}
 80052ce:	b085      	sub	sp, #20
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
 80052d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052dc:	2b01      	cmp	r3, #1
 80052de:	d101      	bne.n	80052e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80052e0:	2302      	movs	r3, #2
 80052e2:	e050      	b.n	8005386 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2201      	movs	r2, #1
 80052e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2202      	movs	r2, #2
 80052f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	685b      	ldr	r3, [r3, #4]
 80052fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	689b      	ldr	r3, [r3, #8]
 8005302:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800530a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	68fa      	ldr	r2, [r7, #12]
 8005312:	4313      	orrs	r3, r2
 8005314:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	68fa      	ldr	r2, [r7, #12]
 800531c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	4a1c      	ldr	r2, [pc, #112]	; (8005394 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005324:	4293      	cmp	r3, r2
 8005326:	d018      	beq.n	800535a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005330:	d013      	beq.n	800535a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	4a18      	ldr	r2, [pc, #96]	; (8005398 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005338:	4293      	cmp	r3, r2
 800533a:	d00e      	beq.n	800535a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4a16      	ldr	r2, [pc, #88]	; (800539c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d009      	beq.n	800535a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	4a15      	ldr	r2, [pc, #84]	; (80053a0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800534c:	4293      	cmp	r3, r2
 800534e:	d004      	beq.n	800535a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	4a13      	ldr	r2, [pc, #76]	; (80053a4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d10c      	bne.n	8005374 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800535a:	68bb      	ldr	r3, [r7, #8]
 800535c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005360:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	685b      	ldr	r3, [r3, #4]
 8005366:	68ba      	ldr	r2, [r7, #8]
 8005368:	4313      	orrs	r3, r2
 800536a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	68ba      	ldr	r2, [r7, #8]
 8005372:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2201      	movs	r2, #1
 8005378:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2200      	movs	r2, #0
 8005380:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005384:	2300      	movs	r3, #0
}
 8005386:	4618      	mov	r0, r3
 8005388:	3714      	adds	r7, #20
 800538a:	46bd      	mov	sp, r7
 800538c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005390:	4770      	bx	lr
 8005392:	bf00      	nop
 8005394:	40010000 	.word	0x40010000
 8005398:	40000400 	.word	0x40000400
 800539c:	40000800 	.word	0x40000800
 80053a0:	40000c00 	.word	0x40000c00
 80053a4:	40014000 	.word	0x40014000

080053a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80053a8:	b480      	push	{r7}
 80053aa:	b083      	sub	sp, #12
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80053b0:	bf00      	nop
 80053b2:	370c      	adds	r7, #12
 80053b4:	46bd      	mov	sp, r7
 80053b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ba:	4770      	bx	lr

080053bc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80053bc:	b480      	push	{r7}
 80053be:	b083      	sub	sp, #12
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80053c4:	bf00      	nop
 80053c6:	370c      	adds	r7, #12
 80053c8:	46bd      	mov	sp, r7
 80053ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ce:	4770      	bx	lr

080053d0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b082      	sub	sp, #8
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d101      	bne.n	80053e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80053de:	2301      	movs	r3, #1
 80053e0:	e03f      	b.n	8005462 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053e8:	b2db      	uxtb	r3, r3
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d106      	bne.n	80053fc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2200      	movs	r2, #0
 80053f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80053f6:	6878      	ldr	r0, [r7, #4]
 80053f8:	f7fc fbae 	bl	8001b58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2224      	movs	r2, #36	; 0x24
 8005400:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	68da      	ldr	r2, [r3, #12]
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005412:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005414:	6878      	ldr	r0, [r7, #4]
 8005416:	f000 fd7b 	bl	8005f10 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	691a      	ldr	r2, [r3, #16]
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005428:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	695a      	ldr	r2, [r3, #20]
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005438:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	68da      	ldr	r2, [r3, #12]
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005448:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2200      	movs	r2, #0
 800544e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2220      	movs	r2, #32
 8005454:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2220      	movs	r2, #32
 800545c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005460:	2300      	movs	r3, #0
}
 8005462:	4618      	mov	r0, r3
 8005464:	3708      	adds	r7, #8
 8005466:	46bd      	mov	sp, r7
 8005468:	bd80      	pop	{r7, pc}

0800546a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800546a:	b580      	push	{r7, lr}
 800546c:	b08a      	sub	sp, #40	; 0x28
 800546e:	af02      	add	r7, sp, #8
 8005470:	60f8      	str	r0, [r7, #12]
 8005472:	60b9      	str	r1, [r7, #8]
 8005474:	603b      	str	r3, [r7, #0]
 8005476:	4613      	mov	r3, r2
 8005478:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800547a:	2300      	movs	r3, #0
 800547c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005484:	b2db      	uxtb	r3, r3
 8005486:	2b20      	cmp	r3, #32
 8005488:	d17c      	bne.n	8005584 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800548a:	68bb      	ldr	r3, [r7, #8]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d002      	beq.n	8005496 <HAL_UART_Transmit+0x2c>
 8005490:	88fb      	ldrh	r3, [r7, #6]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d101      	bne.n	800549a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005496:	2301      	movs	r3, #1
 8005498:	e075      	b.n	8005586 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054a0:	2b01      	cmp	r3, #1
 80054a2:	d101      	bne.n	80054a8 <HAL_UART_Transmit+0x3e>
 80054a4:	2302      	movs	r3, #2
 80054a6:	e06e      	b.n	8005586 <HAL_UART_Transmit+0x11c>
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	2201      	movs	r2, #1
 80054ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	2200      	movs	r2, #0
 80054b4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	2221      	movs	r2, #33	; 0x21
 80054ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80054be:	f7fc fd5f 	bl	8001f80 <HAL_GetTick>
 80054c2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	88fa      	ldrh	r2, [r7, #6]
 80054c8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	88fa      	ldrh	r2, [r7, #6]
 80054ce:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	689b      	ldr	r3, [r3, #8]
 80054d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054d8:	d108      	bne.n	80054ec <HAL_UART_Transmit+0x82>
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	691b      	ldr	r3, [r3, #16]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d104      	bne.n	80054ec <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80054e2:	2300      	movs	r3, #0
 80054e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80054e6:	68bb      	ldr	r3, [r7, #8]
 80054e8:	61bb      	str	r3, [r7, #24]
 80054ea:	e003      	b.n	80054f4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80054ec:	68bb      	ldr	r3, [r7, #8]
 80054ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80054f0:	2300      	movs	r3, #0
 80054f2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	2200      	movs	r2, #0
 80054f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80054fc:	e02a      	b.n	8005554 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	9300      	str	r3, [sp, #0]
 8005502:	697b      	ldr	r3, [r7, #20]
 8005504:	2200      	movs	r2, #0
 8005506:	2180      	movs	r1, #128	; 0x80
 8005508:	68f8      	ldr	r0, [r7, #12]
 800550a:	f000 faf9 	bl	8005b00 <UART_WaitOnFlagUntilTimeout>
 800550e:	4603      	mov	r3, r0
 8005510:	2b00      	cmp	r3, #0
 8005512:	d001      	beq.n	8005518 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005514:	2303      	movs	r3, #3
 8005516:	e036      	b.n	8005586 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005518:	69fb      	ldr	r3, [r7, #28]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d10b      	bne.n	8005536 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800551e:	69bb      	ldr	r3, [r7, #24]
 8005520:	881b      	ldrh	r3, [r3, #0]
 8005522:	461a      	mov	r2, r3
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800552c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800552e:	69bb      	ldr	r3, [r7, #24]
 8005530:	3302      	adds	r3, #2
 8005532:	61bb      	str	r3, [r7, #24]
 8005534:	e007      	b.n	8005546 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005536:	69fb      	ldr	r3, [r7, #28]
 8005538:	781a      	ldrb	r2, [r3, #0]
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005540:	69fb      	ldr	r3, [r7, #28]
 8005542:	3301      	adds	r3, #1
 8005544:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800554a:	b29b      	uxth	r3, r3
 800554c:	3b01      	subs	r3, #1
 800554e:	b29a      	uxth	r2, r3
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005558:	b29b      	uxth	r3, r3
 800555a:	2b00      	cmp	r3, #0
 800555c:	d1cf      	bne.n	80054fe <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	9300      	str	r3, [sp, #0]
 8005562:	697b      	ldr	r3, [r7, #20]
 8005564:	2200      	movs	r2, #0
 8005566:	2140      	movs	r1, #64	; 0x40
 8005568:	68f8      	ldr	r0, [r7, #12]
 800556a:	f000 fac9 	bl	8005b00 <UART_WaitOnFlagUntilTimeout>
 800556e:	4603      	mov	r3, r0
 8005570:	2b00      	cmp	r3, #0
 8005572:	d001      	beq.n	8005578 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005574:	2303      	movs	r3, #3
 8005576:	e006      	b.n	8005586 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	2220      	movs	r2, #32
 800557c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005580:	2300      	movs	r3, #0
 8005582:	e000      	b.n	8005586 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005584:	2302      	movs	r3, #2
  }
}
 8005586:	4618      	mov	r0, r3
 8005588:	3720      	adds	r7, #32
 800558a:	46bd      	mov	sp, r7
 800558c:	bd80      	pop	{r7, pc}
	...

08005590 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005590:	b580      	push	{r7, lr}
 8005592:	b0ba      	sub	sp, #232	; 0xe8
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	68db      	ldr	r3, [r3, #12]
 80055a8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	695b      	ldr	r3, [r3, #20]
 80055b2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80055b6:	2300      	movs	r3, #0
 80055b8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80055bc:	2300      	movs	r3, #0
 80055be:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80055c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055c6:	f003 030f 	and.w	r3, r3, #15
 80055ca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80055ce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d10f      	bne.n	80055f6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80055d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055da:	f003 0320 	and.w	r3, r3, #32
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d009      	beq.n	80055f6 <HAL_UART_IRQHandler+0x66>
 80055e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80055e6:	f003 0320 	and.w	r3, r3, #32
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d003      	beq.n	80055f6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80055ee:	6878      	ldr	r0, [r7, #4]
 80055f0:	f000 fbd3 	bl	8005d9a <UART_Receive_IT>
      return;
 80055f4:	e256      	b.n	8005aa4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80055f6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	f000 80de 	beq.w	80057bc <HAL_UART_IRQHandler+0x22c>
 8005600:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005604:	f003 0301 	and.w	r3, r3, #1
 8005608:	2b00      	cmp	r3, #0
 800560a:	d106      	bne.n	800561a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800560c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005610:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005614:	2b00      	cmp	r3, #0
 8005616:	f000 80d1 	beq.w	80057bc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800561a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800561e:	f003 0301 	and.w	r3, r3, #1
 8005622:	2b00      	cmp	r3, #0
 8005624:	d00b      	beq.n	800563e <HAL_UART_IRQHandler+0xae>
 8005626:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800562a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800562e:	2b00      	cmp	r3, #0
 8005630:	d005      	beq.n	800563e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005636:	f043 0201 	orr.w	r2, r3, #1
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800563e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005642:	f003 0304 	and.w	r3, r3, #4
 8005646:	2b00      	cmp	r3, #0
 8005648:	d00b      	beq.n	8005662 <HAL_UART_IRQHandler+0xd2>
 800564a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800564e:	f003 0301 	and.w	r3, r3, #1
 8005652:	2b00      	cmp	r3, #0
 8005654:	d005      	beq.n	8005662 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800565a:	f043 0202 	orr.w	r2, r3, #2
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005662:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005666:	f003 0302 	and.w	r3, r3, #2
 800566a:	2b00      	cmp	r3, #0
 800566c:	d00b      	beq.n	8005686 <HAL_UART_IRQHandler+0xf6>
 800566e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005672:	f003 0301 	and.w	r3, r3, #1
 8005676:	2b00      	cmp	r3, #0
 8005678:	d005      	beq.n	8005686 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800567e:	f043 0204 	orr.w	r2, r3, #4
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005686:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800568a:	f003 0308 	and.w	r3, r3, #8
 800568e:	2b00      	cmp	r3, #0
 8005690:	d011      	beq.n	80056b6 <HAL_UART_IRQHandler+0x126>
 8005692:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005696:	f003 0320 	and.w	r3, r3, #32
 800569a:	2b00      	cmp	r3, #0
 800569c:	d105      	bne.n	80056aa <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800569e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80056a2:	f003 0301 	and.w	r3, r3, #1
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d005      	beq.n	80056b6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ae:	f043 0208 	orr.w	r2, r3, #8
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	f000 81ed 	beq.w	8005a9a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80056c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056c4:	f003 0320 	and.w	r3, r3, #32
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d008      	beq.n	80056de <HAL_UART_IRQHandler+0x14e>
 80056cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80056d0:	f003 0320 	and.w	r3, r3, #32
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d002      	beq.n	80056de <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80056d8:	6878      	ldr	r0, [r7, #4]
 80056da:	f000 fb5e 	bl	8005d9a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	695b      	ldr	r3, [r3, #20]
 80056e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056e8:	2b40      	cmp	r3, #64	; 0x40
 80056ea:	bf0c      	ite	eq
 80056ec:	2301      	moveq	r3, #1
 80056ee:	2300      	movne	r3, #0
 80056f0:	b2db      	uxtb	r3, r3
 80056f2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056fa:	f003 0308 	and.w	r3, r3, #8
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d103      	bne.n	800570a <HAL_UART_IRQHandler+0x17a>
 8005702:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005706:	2b00      	cmp	r3, #0
 8005708:	d04f      	beq.n	80057aa <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800570a:	6878      	ldr	r0, [r7, #4]
 800570c:	f000 fa66 	bl	8005bdc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	695b      	ldr	r3, [r3, #20]
 8005716:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800571a:	2b40      	cmp	r3, #64	; 0x40
 800571c:	d141      	bne.n	80057a2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	3314      	adds	r3, #20
 8005724:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005728:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800572c:	e853 3f00 	ldrex	r3, [r3]
 8005730:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005734:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005738:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800573c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	3314      	adds	r3, #20
 8005746:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800574a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800574e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005752:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005756:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800575a:	e841 2300 	strex	r3, r2, [r1]
 800575e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005762:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005766:	2b00      	cmp	r3, #0
 8005768:	d1d9      	bne.n	800571e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800576e:	2b00      	cmp	r3, #0
 8005770:	d013      	beq.n	800579a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005776:	4a7d      	ldr	r2, [pc, #500]	; (800596c <HAL_UART_IRQHandler+0x3dc>)
 8005778:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800577e:	4618      	mov	r0, r3
 8005780:	f7fd fd58 	bl	8003234 <HAL_DMA_Abort_IT>
 8005784:	4603      	mov	r3, r0
 8005786:	2b00      	cmp	r3, #0
 8005788:	d016      	beq.n	80057b8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800578e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005790:	687a      	ldr	r2, [r7, #4]
 8005792:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005794:	4610      	mov	r0, r2
 8005796:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005798:	e00e      	b.n	80057b8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800579a:	6878      	ldr	r0, [r7, #4]
 800579c:	f000 f99a 	bl	8005ad4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057a0:	e00a      	b.n	80057b8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80057a2:	6878      	ldr	r0, [r7, #4]
 80057a4:	f000 f996 	bl	8005ad4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057a8:	e006      	b.n	80057b8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80057aa:	6878      	ldr	r0, [r7, #4]
 80057ac:	f000 f992 	bl	8005ad4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2200      	movs	r2, #0
 80057b4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80057b6:	e170      	b.n	8005a9a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057b8:	bf00      	nop
    return;
 80057ba:	e16e      	b.n	8005a9a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057c0:	2b01      	cmp	r3, #1
 80057c2:	f040 814a 	bne.w	8005a5a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80057c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057ca:	f003 0310 	and.w	r3, r3, #16
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	f000 8143 	beq.w	8005a5a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80057d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80057d8:	f003 0310 	and.w	r3, r3, #16
 80057dc:	2b00      	cmp	r3, #0
 80057de:	f000 813c 	beq.w	8005a5a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80057e2:	2300      	movs	r3, #0
 80057e4:	60bb      	str	r3, [r7, #8]
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	60bb      	str	r3, [r7, #8]
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	685b      	ldr	r3, [r3, #4]
 80057f4:	60bb      	str	r3, [r7, #8]
 80057f6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	695b      	ldr	r3, [r3, #20]
 80057fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005802:	2b40      	cmp	r3, #64	; 0x40
 8005804:	f040 80b4 	bne.w	8005970 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	685b      	ldr	r3, [r3, #4]
 8005810:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005814:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005818:	2b00      	cmp	r3, #0
 800581a:	f000 8140 	beq.w	8005a9e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005822:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005826:	429a      	cmp	r2, r3
 8005828:	f080 8139 	bcs.w	8005a9e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005832:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005838:	69db      	ldr	r3, [r3, #28]
 800583a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800583e:	f000 8088 	beq.w	8005952 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	330c      	adds	r3, #12
 8005848:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800584c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005850:	e853 3f00 	ldrex	r3, [r3]
 8005854:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005858:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800585c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005860:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	330c      	adds	r3, #12
 800586a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800586e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005872:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005876:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800587a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800587e:	e841 2300 	strex	r3, r2, [r1]
 8005882:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005886:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800588a:	2b00      	cmp	r3, #0
 800588c:	d1d9      	bne.n	8005842 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	3314      	adds	r3, #20
 8005894:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005896:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005898:	e853 3f00 	ldrex	r3, [r3]
 800589c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800589e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80058a0:	f023 0301 	bic.w	r3, r3, #1
 80058a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	3314      	adds	r3, #20
 80058ae:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80058b2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80058b6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058b8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80058ba:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80058be:	e841 2300 	strex	r3, r2, [r1]
 80058c2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80058c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d1e1      	bne.n	800588e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	3314      	adds	r3, #20
 80058d0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80058d4:	e853 3f00 	ldrex	r3, [r3]
 80058d8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80058da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80058dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80058e0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	3314      	adds	r3, #20
 80058ea:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80058ee:	66fa      	str	r2, [r7, #108]	; 0x6c
 80058f0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058f2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80058f4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80058f6:	e841 2300 	strex	r3, r2, [r1]
 80058fa:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80058fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d1e3      	bne.n	80058ca <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2220      	movs	r2, #32
 8005906:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2200      	movs	r2, #0
 800590e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	330c      	adds	r3, #12
 8005916:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005918:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800591a:	e853 3f00 	ldrex	r3, [r3]
 800591e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005920:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005922:	f023 0310 	bic.w	r3, r3, #16
 8005926:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	330c      	adds	r3, #12
 8005930:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005934:	65ba      	str	r2, [r7, #88]	; 0x58
 8005936:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005938:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800593a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800593c:	e841 2300 	strex	r3, r2, [r1]
 8005940:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005942:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005944:	2b00      	cmp	r3, #0
 8005946:	d1e3      	bne.n	8005910 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800594c:	4618      	mov	r0, r3
 800594e:	f7fd fc01 	bl	8003154 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800595a:	b29b      	uxth	r3, r3
 800595c:	1ad3      	subs	r3, r2, r3
 800595e:	b29b      	uxth	r3, r3
 8005960:	4619      	mov	r1, r3
 8005962:	6878      	ldr	r0, [r7, #4]
 8005964:	f000 f8c0 	bl	8005ae8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005968:	e099      	b.n	8005a9e <HAL_UART_IRQHandler+0x50e>
 800596a:	bf00      	nop
 800596c:	08005ca3 	.word	0x08005ca3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005978:	b29b      	uxth	r3, r3
 800597a:	1ad3      	subs	r3, r2, r3
 800597c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005984:	b29b      	uxth	r3, r3
 8005986:	2b00      	cmp	r3, #0
 8005988:	f000 808b 	beq.w	8005aa2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800598c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005990:	2b00      	cmp	r3, #0
 8005992:	f000 8086 	beq.w	8005aa2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	330c      	adds	r3, #12
 800599c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800599e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059a0:	e853 3f00 	ldrex	r3, [r3]
 80059a4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80059a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059a8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80059ac:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	330c      	adds	r3, #12
 80059b6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80059ba:	647a      	str	r2, [r7, #68]	; 0x44
 80059bc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059be:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80059c0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80059c2:	e841 2300 	strex	r3, r2, [r1]
 80059c6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80059c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d1e3      	bne.n	8005996 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	3314      	adds	r3, #20
 80059d4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059d8:	e853 3f00 	ldrex	r3, [r3]
 80059dc:	623b      	str	r3, [r7, #32]
   return(result);
 80059de:	6a3b      	ldr	r3, [r7, #32]
 80059e0:	f023 0301 	bic.w	r3, r3, #1
 80059e4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	3314      	adds	r3, #20
 80059ee:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80059f2:	633a      	str	r2, [r7, #48]	; 0x30
 80059f4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059f6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80059f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80059fa:	e841 2300 	strex	r3, r2, [r1]
 80059fe:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005a00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d1e3      	bne.n	80059ce <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2220      	movs	r2, #32
 8005a0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2200      	movs	r2, #0
 8005a12:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	330c      	adds	r3, #12
 8005a1a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a1c:	693b      	ldr	r3, [r7, #16]
 8005a1e:	e853 3f00 	ldrex	r3, [r3]
 8005a22:	60fb      	str	r3, [r7, #12]
   return(result);
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	f023 0310 	bic.w	r3, r3, #16
 8005a2a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	330c      	adds	r3, #12
 8005a34:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005a38:	61fa      	str	r2, [r7, #28]
 8005a3a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a3c:	69b9      	ldr	r1, [r7, #24]
 8005a3e:	69fa      	ldr	r2, [r7, #28]
 8005a40:	e841 2300 	strex	r3, r2, [r1]
 8005a44:	617b      	str	r3, [r7, #20]
   return(result);
 8005a46:	697b      	ldr	r3, [r7, #20]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d1e3      	bne.n	8005a14 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005a4c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005a50:	4619      	mov	r1, r3
 8005a52:	6878      	ldr	r0, [r7, #4]
 8005a54:	f000 f848 	bl	8005ae8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005a58:	e023      	b.n	8005aa2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005a5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d009      	beq.n	8005a7a <HAL_UART_IRQHandler+0x4ea>
 8005a66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d003      	beq.n	8005a7a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005a72:	6878      	ldr	r0, [r7, #4]
 8005a74:	f000 f929 	bl	8005cca <UART_Transmit_IT>
    return;
 8005a78:	e014      	b.n	8005aa4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005a7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d00e      	beq.n	8005aa4 <HAL_UART_IRQHandler+0x514>
 8005a86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d008      	beq.n	8005aa4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005a92:	6878      	ldr	r0, [r7, #4]
 8005a94:	f000 f969 	bl	8005d6a <UART_EndTransmit_IT>
    return;
 8005a98:	e004      	b.n	8005aa4 <HAL_UART_IRQHandler+0x514>
    return;
 8005a9a:	bf00      	nop
 8005a9c:	e002      	b.n	8005aa4 <HAL_UART_IRQHandler+0x514>
      return;
 8005a9e:	bf00      	nop
 8005aa0:	e000      	b.n	8005aa4 <HAL_UART_IRQHandler+0x514>
      return;
 8005aa2:	bf00      	nop
  }
}
 8005aa4:	37e8      	adds	r7, #232	; 0xe8
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	bd80      	pop	{r7, pc}
 8005aaa:	bf00      	nop

08005aac <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005aac:	b480      	push	{r7}
 8005aae:	b083      	sub	sp, #12
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005ab4:	bf00      	nop
 8005ab6:	370c      	adds	r7, #12
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005abe:	4770      	bx	lr

08005ac0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005ac0:	b480      	push	{r7}
 8005ac2:	b083      	sub	sp, #12
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005ac8:	bf00      	nop
 8005aca:	370c      	adds	r7, #12
 8005acc:	46bd      	mov	sp, r7
 8005ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad2:	4770      	bx	lr

08005ad4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005ad4:	b480      	push	{r7}
 8005ad6:	b083      	sub	sp, #12
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005adc:	bf00      	nop
 8005ade:	370c      	adds	r7, #12
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae6:	4770      	bx	lr

08005ae8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005ae8:	b480      	push	{r7}
 8005aea:	b083      	sub	sp, #12
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
 8005af0:	460b      	mov	r3, r1
 8005af2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005af4:	bf00      	nop
 8005af6:	370c      	adds	r7, #12
 8005af8:	46bd      	mov	sp, r7
 8005afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afe:	4770      	bx	lr

08005b00 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b090      	sub	sp, #64	; 0x40
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	60f8      	str	r0, [r7, #12]
 8005b08:	60b9      	str	r1, [r7, #8]
 8005b0a:	603b      	str	r3, [r7, #0]
 8005b0c:	4613      	mov	r3, r2
 8005b0e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b10:	e050      	b.n	8005bb4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b14:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005b18:	d04c      	beq.n	8005bb4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005b1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d007      	beq.n	8005b30 <UART_WaitOnFlagUntilTimeout+0x30>
 8005b20:	f7fc fa2e 	bl	8001f80 <HAL_GetTick>
 8005b24:	4602      	mov	r2, r0
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	1ad3      	subs	r3, r2, r3
 8005b2a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005b2c:	429a      	cmp	r2, r3
 8005b2e:	d241      	bcs.n	8005bb4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	330c      	adds	r3, #12
 8005b36:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b3a:	e853 3f00 	ldrex	r3, [r3]
 8005b3e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b42:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005b46:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	330c      	adds	r3, #12
 8005b4e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005b50:	637a      	str	r2, [r7, #52]	; 0x34
 8005b52:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b54:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005b56:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005b58:	e841 2300 	strex	r3, r2, [r1]
 8005b5c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005b5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d1e5      	bne.n	8005b30 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	3314      	adds	r3, #20
 8005b6a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b6c:	697b      	ldr	r3, [r7, #20]
 8005b6e:	e853 3f00 	ldrex	r3, [r3]
 8005b72:	613b      	str	r3, [r7, #16]
   return(result);
 8005b74:	693b      	ldr	r3, [r7, #16]
 8005b76:	f023 0301 	bic.w	r3, r3, #1
 8005b7a:	63bb      	str	r3, [r7, #56]	; 0x38
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	3314      	adds	r3, #20
 8005b82:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005b84:	623a      	str	r2, [r7, #32]
 8005b86:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b88:	69f9      	ldr	r1, [r7, #28]
 8005b8a:	6a3a      	ldr	r2, [r7, #32]
 8005b8c:	e841 2300 	strex	r3, r2, [r1]
 8005b90:	61bb      	str	r3, [r7, #24]
   return(result);
 8005b92:	69bb      	ldr	r3, [r7, #24]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d1e5      	bne.n	8005b64 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	2220      	movs	r2, #32
 8005b9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	2220      	movs	r2, #32
 8005ba4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	2200      	movs	r2, #0
 8005bac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005bb0:	2303      	movs	r3, #3
 8005bb2:	e00f      	b.n	8005bd4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	681a      	ldr	r2, [r3, #0]
 8005bba:	68bb      	ldr	r3, [r7, #8]
 8005bbc:	4013      	ands	r3, r2
 8005bbe:	68ba      	ldr	r2, [r7, #8]
 8005bc0:	429a      	cmp	r2, r3
 8005bc2:	bf0c      	ite	eq
 8005bc4:	2301      	moveq	r3, #1
 8005bc6:	2300      	movne	r3, #0
 8005bc8:	b2db      	uxtb	r3, r3
 8005bca:	461a      	mov	r2, r3
 8005bcc:	79fb      	ldrb	r3, [r7, #7]
 8005bce:	429a      	cmp	r2, r3
 8005bd0:	d09f      	beq.n	8005b12 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005bd2:	2300      	movs	r3, #0
}
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	3740      	adds	r7, #64	; 0x40
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	bd80      	pop	{r7, pc}

08005bdc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005bdc:	b480      	push	{r7}
 8005bde:	b095      	sub	sp, #84	; 0x54
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	330c      	adds	r3, #12
 8005bea:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bee:	e853 3f00 	ldrex	r3, [r3]
 8005bf2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005bf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bf6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005bfa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	330c      	adds	r3, #12
 8005c02:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005c04:	643a      	str	r2, [r7, #64]	; 0x40
 8005c06:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c08:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005c0a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005c0c:	e841 2300 	strex	r3, r2, [r1]
 8005c10:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005c12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d1e5      	bne.n	8005be4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	3314      	adds	r3, #20
 8005c1e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c20:	6a3b      	ldr	r3, [r7, #32]
 8005c22:	e853 3f00 	ldrex	r3, [r3]
 8005c26:	61fb      	str	r3, [r7, #28]
   return(result);
 8005c28:	69fb      	ldr	r3, [r7, #28]
 8005c2a:	f023 0301 	bic.w	r3, r3, #1
 8005c2e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	3314      	adds	r3, #20
 8005c36:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005c38:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005c3a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c3c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005c3e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c40:	e841 2300 	strex	r3, r2, [r1]
 8005c44:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d1e5      	bne.n	8005c18 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c50:	2b01      	cmp	r3, #1
 8005c52:	d119      	bne.n	8005c88 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	330c      	adds	r3, #12
 8005c5a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	e853 3f00 	ldrex	r3, [r3]
 8005c62:	60bb      	str	r3, [r7, #8]
   return(result);
 8005c64:	68bb      	ldr	r3, [r7, #8]
 8005c66:	f023 0310 	bic.w	r3, r3, #16
 8005c6a:	647b      	str	r3, [r7, #68]	; 0x44
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	330c      	adds	r3, #12
 8005c72:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005c74:	61ba      	str	r2, [r7, #24]
 8005c76:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c78:	6979      	ldr	r1, [r7, #20]
 8005c7a:	69ba      	ldr	r2, [r7, #24]
 8005c7c:	e841 2300 	strex	r3, r2, [r1]
 8005c80:	613b      	str	r3, [r7, #16]
   return(result);
 8005c82:	693b      	ldr	r3, [r7, #16]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d1e5      	bne.n	8005c54 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2220      	movs	r2, #32
 8005c8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2200      	movs	r2, #0
 8005c94:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005c96:	bf00      	nop
 8005c98:	3754      	adds	r7, #84	; 0x54
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca0:	4770      	bx	lr

08005ca2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005ca2:	b580      	push	{r7, lr}
 8005ca4:	b084      	sub	sp, #16
 8005ca6:	af00      	add	r7, sp, #0
 8005ca8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cae:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	2200      	movs	r2, #0
 8005cba:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005cbc:	68f8      	ldr	r0, [r7, #12]
 8005cbe:	f7ff ff09 	bl	8005ad4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005cc2:	bf00      	nop
 8005cc4:	3710      	adds	r7, #16
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	bd80      	pop	{r7, pc}

08005cca <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005cca:	b480      	push	{r7}
 8005ccc:	b085      	sub	sp, #20
 8005cce:	af00      	add	r7, sp, #0
 8005cd0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005cd8:	b2db      	uxtb	r3, r3
 8005cda:	2b21      	cmp	r3, #33	; 0x21
 8005cdc:	d13e      	bne.n	8005d5c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	689b      	ldr	r3, [r3, #8]
 8005ce2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ce6:	d114      	bne.n	8005d12 <UART_Transmit_IT+0x48>
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	691b      	ldr	r3, [r3, #16]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d110      	bne.n	8005d12 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	6a1b      	ldr	r3, [r3, #32]
 8005cf4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	881b      	ldrh	r3, [r3, #0]
 8005cfa:	461a      	mov	r2, r3
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005d04:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6a1b      	ldr	r3, [r3, #32]
 8005d0a:	1c9a      	adds	r2, r3, #2
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	621a      	str	r2, [r3, #32]
 8005d10:	e008      	b.n	8005d24 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6a1b      	ldr	r3, [r3, #32]
 8005d16:	1c59      	adds	r1, r3, #1
 8005d18:	687a      	ldr	r2, [r7, #4]
 8005d1a:	6211      	str	r1, [r2, #32]
 8005d1c:	781a      	ldrb	r2, [r3, #0]
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005d28:	b29b      	uxth	r3, r3
 8005d2a:	3b01      	subs	r3, #1
 8005d2c:	b29b      	uxth	r3, r3
 8005d2e:	687a      	ldr	r2, [r7, #4]
 8005d30:	4619      	mov	r1, r3
 8005d32:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d10f      	bne.n	8005d58 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	68da      	ldr	r2, [r3, #12]
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005d46:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	68da      	ldr	r2, [r3, #12]
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005d56:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005d58:	2300      	movs	r3, #0
 8005d5a:	e000      	b.n	8005d5e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005d5c:	2302      	movs	r3, #2
  }
}
 8005d5e:	4618      	mov	r0, r3
 8005d60:	3714      	adds	r7, #20
 8005d62:	46bd      	mov	sp, r7
 8005d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d68:	4770      	bx	lr

08005d6a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005d6a:	b580      	push	{r7, lr}
 8005d6c:	b082      	sub	sp, #8
 8005d6e:	af00      	add	r7, sp, #0
 8005d70:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	68da      	ldr	r2, [r3, #12]
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d80:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	2220      	movs	r2, #32
 8005d86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005d8a:	6878      	ldr	r0, [r7, #4]
 8005d8c:	f7ff fe8e 	bl	8005aac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005d90:	2300      	movs	r3, #0
}
 8005d92:	4618      	mov	r0, r3
 8005d94:	3708      	adds	r7, #8
 8005d96:	46bd      	mov	sp, r7
 8005d98:	bd80      	pop	{r7, pc}

08005d9a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005d9a:	b580      	push	{r7, lr}
 8005d9c:	b08c      	sub	sp, #48	; 0x30
 8005d9e:	af00      	add	r7, sp, #0
 8005da0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005da8:	b2db      	uxtb	r3, r3
 8005daa:	2b22      	cmp	r3, #34	; 0x22
 8005dac:	f040 80ab 	bne.w	8005f06 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	689b      	ldr	r3, [r3, #8]
 8005db4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005db8:	d117      	bne.n	8005dea <UART_Receive_IT+0x50>
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	691b      	ldr	r3, [r3, #16]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d113      	bne.n	8005dea <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dca:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	685b      	ldr	r3, [r3, #4]
 8005dd2:	b29b      	uxth	r3, r3
 8005dd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005dd8:	b29a      	uxth	r2, r3
 8005dda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ddc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005de2:	1c9a      	adds	r2, r3, #2
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	629a      	str	r2, [r3, #40]	; 0x28
 8005de8:	e026      	b.n	8005e38 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dee:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005df0:	2300      	movs	r3, #0
 8005df2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	689b      	ldr	r3, [r3, #8]
 8005df8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005dfc:	d007      	beq.n	8005e0e <UART_Receive_IT+0x74>
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	689b      	ldr	r3, [r3, #8]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d10a      	bne.n	8005e1c <UART_Receive_IT+0x82>
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	691b      	ldr	r3, [r3, #16]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d106      	bne.n	8005e1c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	685b      	ldr	r3, [r3, #4]
 8005e14:	b2da      	uxtb	r2, r3
 8005e16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e18:	701a      	strb	r2, [r3, #0]
 8005e1a:	e008      	b.n	8005e2e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	685b      	ldr	r3, [r3, #4]
 8005e22:	b2db      	uxtb	r3, r3
 8005e24:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e28:	b2da      	uxtb	r2, r3
 8005e2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e2c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e32:	1c5a      	adds	r2, r3, #1
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005e3c:	b29b      	uxth	r3, r3
 8005e3e:	3b01      	subs	r3, #1
 8005e40:	b29b      	uxth	r3, r3
 8005e42:	687a      	ldr	r2, [r7, #4]
 8005e44:	4619      	mov	r1, r3
 8005e46:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d15a      	bne.n	8005f02 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	68da      	ldr	r2, [r3, #12]
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f022 0220 	bic.w	r2, r2, #32
 8005e5a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	68da      	ldr	r2, [r3, #12]
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005e6a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	695a      	ldr	r2, [r3, #20]
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f022 0201 	bic.w	r2, r2, #1
 8005e7a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2220      	movs	r2, #32
 8005e80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e88:	2b01      	cmp	r3, #1
 8005e8a:	d135      	bne.n	8005ef8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2200      	movs	r2, #0
 8005e90:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	330c      	adds	r3, #12
 8005e98:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e9a:	697b      	ldr	r3, [r7, #20]
 8005e9c:	e853 3f00 	ldrex	r3, [r3]
 8005ea0:	613b      	str	r3, [r7, #16]
   return(result);
 8005ea2:	693b      	ldr	r3, [r7, #16]
 8005ea4:	f023 0310 	bic.w	r3, r3, #16
 8005ea8:	627b      	str	r3, [r7, #36]	; 0x24
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	330c      	adds	r3, #12
 8005eb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005eb2:	623a      	str	r2, [r7, #32]
 8005eb4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eb6:	69f9      	ldr	r1, [r7, #28]
 8005eb8:	6a3a      	ldr	r2, [r7, #32]
 8005eba:	e841 2300 	strex	r3, r2, [r1]
 8005ebe:	61bb      	str	r3, [r7, #24]
   return(result);
 8005ec0:	69bb      	ldr	r3, [r7, #24]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d1e5      	bne.n	8005e92 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f003 0310 	and.w	r3, r3, #16
 8005ed0:	2b10      	cmp	r3, #16
 8005ed2:	d10a      	bne.n	8005eea <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005ed4:	2300      	movs	r3, #0
 8005ed6:	60fb      	str	r3, [r7, #12]
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	60fb      	str	r3, [r7, #12]
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	685b      	ldr	r3, [r3, #4]
 8005ee6:	60fb      	str	r3, [r7, #12]
 8005ee8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005eee:	4619      	mov	r1, r3
 8005ef0:	6878      	ldr	r0, [r7, #4]
 8005ef2:	f7ff fdf9 	bl	8005ae8 <HAL_UARTEx_RxEventCallback>
 8005ef6:	e002      	b.n	8005efe <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005ef8:	6878      	ldr	r0, [r7, #4]
 8005efa:	f7ff fde1 	bl	8005ac0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005efe:	2300      	movs	r3, #0
 8005f00:	e002      	b.n	8005f08 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005f02:	2300      	movs	r3, #0
 8005f04:	e000      	b.n	8005f08 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005f06:	2302      	movs	r3, #2
  }
}
 8005f08:	4618      	mov	r0, r3
 8005f0a:	3730      	adds	r7, #48	; 0x30
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	bd80      	pop	{r7, pc}

08005f10 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005f10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005f14:	b0c0      	sub	sp, #256	; 0x100
 8005f16:	af00      	add	r7, sp, #0
 8005f18:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005f1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	691b      	ldr	r3, [r3, #16]
 8005f24:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005f28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f2c:	68d9      	ldr	r1, [r3, #12]
 8005f2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f32:	681a      	ldr	r2, [r3, #0]
 8005f34:	ea40 0301 	orr.w	r3, r0, r1
 8005f38:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005f3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f3e:	689a      	ldr	r2, [r3, #8]
 8005f40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f44:	691b      	ldr	r3, [r3, #16]
 8005f46:	431a      	orrs	r2, r3
 8005f48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f4c:	695b      	ldr	r3, [r3, #20]
 8005f4e:	431a      	orrs	r2, r3
 8005f50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f54:	69db      	ldr	r3, [r3, #28]
 8005f56:	4313      	orrs	r3, r2
 8005f58:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005f5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	68db      	ldr	r3, [r3, #12]
 8005f64:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005f68:	f021 010c 	bic.w	r1, r1, #12
 8005f6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f70:	681a      	ldr	r2, [r3, #0]
 8005f72:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005f76:	430b      	orrs	r3, r1
 8005f78:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005f7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	695b      	ldr	r3, [r3, #20]
 8005f82:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005f86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f8a:	6999      	ldr	r1, [r3, #24]
 8005f8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f90:	681a      	ldr	r2, [r3, #0]
 8005f92:	ea40 0301 	orr.w	r3, r0, r1
 8005f96:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005f98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f9c:	681a      	ldr	r2, [r3, #0]
 8005f9e:	4b8f      	ldr	r3, [pc, #572]	; (80061dc <UART_SetConfig+0x2cc>)
 8005fa0:	429a      	cmp	r2, r3
 8005fa2:	d005      	beq.n	8005fb0 <UART_SetConfig+0xa0>
 8005fa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fa8:	681a      	ldr	r2, [r3, #0]
 8005faa:	4b8d      	ldr	r3, [pc, #564]	; (80061e0 <UART_SetConfig+0x2d0>)
 8005fac:	429a      	cmp	r2, r3
 8005fae:	d104      	bne.n	8005fba <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005fb0:	f7fe f9c8 	bl	8004344 <HAL_RCC_GetPCLK2Freq>
 8005fb4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005fb8:	e003      	b.n	8005fc2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005fba:	f7fe f9af 	bl	800431c <HAL_RCC_GetPCLK1Freq>
 8005fbe:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005fc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fc6:	69db      	ldr	r3, [r3, #28]
 8005fc8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005fcc:	f040 810c 	bne.w	80061e8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005fd0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005fda:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005fde:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005fe2:	4622      	mov	r2, r4
 8005fe4:	462b      	mov	r3, r5
 8005fe6:	1891      	adds	r1, r2, r2
 8005fe8:	65b9      	str	r1, [r7, #88]	; 0x58
 8005fea:	415b      	adcs	r3, r3
 8005fec:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005fee:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005ff2:	4621      	mov	r1, r4
 8005ff4:	eb12 0801 	adds.w	r8, r2, r1
 8005ff8:	4629      	mov	r1, r5
 8005ffa:	eb43 0901 	adc.w	r9, r3, r1
 8005ffe:	f04f 0200 	mov.w	r2, #0
 8006002:	f04f 0300 	mov.w	r3, #0
 8006006:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800600a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800600e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006012:	4690      	mov	r8, r2
 8006014:	4699      	mov	r9, r3
 8006016:	4623      	mov	r3, r4
 8006018:	eb18 0303 	adds.w	r3, r8, r3
 800601c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006020:	462b      	mov	r3, r5
 8006022:	eb49 0303 	adc.w	r3, r9, r3
 8006026:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800602a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800602e:	685b      	ldr	r3, [r3, #4]
 8006030:	2200      	movs	r2, #0
 8006032:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006036:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800603a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800603e:	460b      	mov	r3, r1
 8006040:	18db      	adds	r3, r3, r3
 8006042:	653b      	str	r3, [r7, #80]	; 0x50
 8006044:	4613      	mov	r3, r2
 8006046:	eb42 0303 	adc.w	r3, r2, r3
 800604a:	657b      	str	r3, [r7, #84]	; 0x54
 800604c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006050:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006054:	f7fa fe00 	bl	8000c58 <__aeabi_uldivmod>
 8006058:	4602      	mov	r2, r0
 800605a:	460b      	mov	r3, r1
 800605c:	4b61      	ldr	r3, [pc, #388]	; (80061e4 <UART_SetConfig+0x2d4>)
 800605e:	fba3 2302 	umull	r2, r3, r3, r2
 8006062:	095b      	lsrs	r3, r3, #5
 8006064:	011c      	lsls	r4, r3, #4
 8006066:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800606a:	2200      	movs	r2, #0
 800606c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006070:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006074:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006078:	4642      	mov	r2, r8
 800607a:	464b      	mov	r3, r9
 800607c:	1891      	adds	r1, r2, r2
 800607e:	64b9      	str	r1, [r7, #72]	; 0x48
 8006080:	415b      	adcs	r3, r3
 8006082:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006084:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006088:	4641      	mov	r1, r8
 800608a:	eb12 0a01 	adds.w	sl, r2, r1
 800608e:	4649      	mov	r1, r9
 8006090:	eb43 0b01 	adc.w	fp, r3, r1
 8006094:	f04f 0200 	mov.w	r2, #0
 8006098:	f04f 0300 	mov.w	r3, #0
 800609c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80060a0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80060a4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80060a8:	4692      	mov	sl, r2
 80060aa:	469b      	mov	fp, r3
 80060ac:	4643      	mov	r3, r8
 80060ae:	eb1a 0303 	adds.w	r3, sl, r3
 80060b2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80060b6:	464b      	mov	r3, r9
 80060b8:	eb4b 0303 	adc.w	r3, fp, r3
 80060bc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80060c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060c4:	685b      	ldr	r3, [r3, #4]
 80060c6:	2200      	movs	r2, #0
 80060c8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80060cc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80060d0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80060d4:	460b      	mov	r3, r1
 80060d6:	18db      	adds	r3, r3, r3
 80060d8:	643b      	str	r3, [r7, #64]	; 0x40
 80060da:	4613      	mov	r3, r2
 80060dc:	eb42 0303 	adc.w	r3, r2, r3
 80060e0:	647b      	str	r3, [r7, #68]	; 0x44
 80060e2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80060e6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80060ea:	f7fa fdb5 	bl	8000c58 <__aeabi_uldivmod>
 80060ee:	4602      	mov	r2, r0
 80060f0:	460b      	mov	r3, r1
 80060f2:	4611      	mov	r1, r2
 80060f4:	4b3b      	ldr	r3, [pc, #236]	; (80061e4 <UART_SetConfig+0x2d4>)
 80060f6:	fba3 2301 	umull	r2, r3, r3, r1
 80060fa:	095b      	lsrs	r3, r3, #5
 80060fc:	2264      	movs	r2, #100	; 0x64
 80060fe:	fb02 f303 	mul.w	r3, r2, r3
 8006102:	1acb      	subs	r3, r1, r3
 8006104:	00db      	lsls	r3, r3, #3
 8006106:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800610a:	4b36      	ldr	r3, [pc, #216]	; (80061e4 <UART_SetConfig+0x2d4>)
 800610c:	fba3 2302 	umull	r2, r3, r3, r2
 8006110:	095b      	lsrs	r3, r3, #5
 8006112:	005b      	lsls	r3, r3, #1
 8006114:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006118:	441c      	add	r4, r3
 800611a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800611e:	2200      	movs	r2, #0
 8006120:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006124:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006128:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800612c:	4642      	mov	r2, r8
 800612e:	464b      	mov	r3, r9
 8006130:	1891      	adds	r1, r2, r2
 8006132:	63b9      	str	r1, [r7, #56]	; 0x38
 8006134:	415b      	adcs	r3, r3
 8006136:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006138:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800613c:	4641      	mov	r1, r8
 800613e:	1851      	adds	r1, r2, r1
 8006140:	6339      	str	r1, [r7, #48]	; 0x30
 8006142:	4649      	mov	r1, r9
 8006144:	414b      	adcs	r3, r1
 8006146:	637b      	str	r3, [r7, #52]	; 0x34
 8006148:	f04f 0200 	mov.w	r2, #0
 800614c:	f04f 0300 	mov.w	r3, #0
 8006150:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006154:	4659      	mov	r1, fp
 8006156:	00cb      	lsls	r3, r1, #3
 8006158:	4651      	mov	r1, sl
 800615a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800615e:	4651      	mov	r1, sl
 8006160:	00ca      	lsls	r2, r1, #3
 8006162:	4610      	mov	r0, r2
 8006164:	4619      	mov	r1, r3
 8006166:	4603      	mov	r3, r0
 8006168:	4642      	mov	r2, r8
 800616a:	189b      	adds	r3, r3, r2
 800616c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006170:	464b      	mov	r3, r9
 8006172:	460a      	mov	r2, r1
 8006174:	eb42 0303 	adc.w	r3, r2, r3
 8006178:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800617c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006180:	685b      	ldr	r3, [r3, #4]
 8006182:	2200      	movs	r2, #0
 8006184:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006188:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800618c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006190:	460b      	mov	r3, r1
 8006192:	18db      	adds	r3, r3, r3
 8006194:	62bb      	str	r3, [r7, #40]	; 0x28
 8006196:	4613      	mov	r3, r2
 8006198:	eb42 0303 	adc.w	r3, r2, r3
 800619c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800619e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80061a2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80061a6:	f7fa fd57 	bl	8000c58 <__aeabi_uldivmod>
 80061aa:	4602      	mov	r2, r0
 80061ac:	460b      	mov	r3, r1
 80061ae:	4b0d      	ldr	r3, [pc, #52]	; (80061e4 <UART_SetConfig+0x2d4>)
 80061b0:	fba3 1302 	umull	r1, r3, r3, r2
 80061b4:	095b      	lsrs	r3, r3, #5
 80061b6:	2164      	movs	r1, #100	; 0x64
 80061b8:	fb01 f303 	mul.w	r3, r1, r3
 80061bc:	1ad3      	subs	r3, r2, r3
 80061be:	00db      	lsls	r3, r3, #3
 80061c0:	3332      	adds	r3, #50	; 0x32
 80061c2:	4a08      	ldr	r2, [pc, #32]	; (80061e4 <UART_SetConfig+0x2d4>)
 80061c4:	fba2 2303 	umull	r2, r3, r2, r3
 80061c8:	095b      	lsrs	r3, r3, #5
 80061ca:	f003 0207 	and.w	r2, r3, #7
 80061ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	4422      	add	r2, r4
 80061d6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80061d8:	e105      	b.n	80063e6 <UART_SetConfig+0x4d6>
 80061da:	bf00      	nop
 80061dc:	40011000 	.word	0x40011000
 80061e0:	40011400 	.word	0x40011400
 80061e4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80061e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80061ec:	2200      	movs	r2, #0
 80061ee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80061f2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80061f6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80061fa:	4642      	mov	r2, r8
 80061fc:	464b      	mov	r3, r9
 80061fe:	1891      	adds	r1, r2, r2
 8006200:	6239      	str	r1, [r7, #32]
 8006202:	415b      	adcs	r3, r3
 8006204:	627b      	str	r3, [r7, #36]	; 0x24
 8006206:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800620a:	4641      	mov	r1, r8
 800620c:	1854      	adds	r4, r2, r1
 800620e:	4649      	mov	r1, r9
 8006210:	eb43 0501 	adc.w	r5, r3, r1
 8006214:	f04f 0200 	mov.w	r2, #0
 8006218:	f04f 0300 	mov.w	r3, #0
 800621c:	00eb      	lsls	r3, r5, #3
 800621e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006222:	00e2      	lsls	r2, r4, #3
 8006224:	4614      	mov	r4, r2
 8006226:	461d      	mov	r5, r3
 8006228:	4643      	mov	r3, r8
 800622a:	18e3      	adds	r3, r4, r3
 800622c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006230:	464b      	mov	r3, r9
 8006232:	eb45 0303 	adc.w	r3, r5, r3
 8006236:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800623a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800623e:	685b      	ldr	r3, [r3, #4]
 8006240:	2200      	movs	r2, #0
 8006242:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006246:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800624a:	f04f 0200 	mov.w	r2, #0
 800624e:	f04f 0300 	mov.w	r3, #0
 8006252:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006256:	4629      	mov	r1, r5
 8006258:	008b      	lsls	r3, r1, #2
 800625a:	4621      	mov	r1, r4
 800625c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006260:	4621      	mov	r1, r4
 8006262:	008a      	lsls	r2, r1, #2
 8006264:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006268:	f7fa fcf6 	bl	8000c58 <__aeabi_uldivmod>
 800626c:	4602      	mov	r2, r0
 800626e:	460b      	mov	r3, r1
 8006270:	4b60      	ldr	r3, [pc, #384]	; (80063f4 <UART_SetConfig+0x4e4>)
 8006272:	fba3 2302 	umull	r2, r3, r3, r2
 8006276:	095b      	lsrs	r3, r3, #5
 8006278:	011c      	lsls	r4, r3, #4
 800627a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800627e:	2200      	movs	r2, #0
 8006280:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006284:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006288:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800628c:	4642      	mov	r2, r8
 800628e:	464b      	mov	r3, r9
 8006290:	1891      	adds	r1, r2, r2
 8006292:	61b9      	str	r1, [r7, #24]
 8006294:	415b      	adcs	r3, r3
 8006296:	61fb      	str	r3, [r7, #28]
 8006298:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800629c:	4641      	mov	r1, r8
 800629e:	1851      	adds	r1, r2, r1
 80062a0:	6139      	str	r1, [r7, #16]
 80062a2:	4649      	mov	r1, r9
 80062a4:	414b      	adcs	r3, r1
 80062a6:	617b      	str	r3, [r7, #20]
 80062a8:	f04f 0200 	mov.w	r2, #0
 80062ac:	f04f 0300 	mov.w	r3, #0
 80062b0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80062b4:	4659      	mov	r1, fp
 80062b6:	00cb      	lsls	r3, r1, #3
 80062b8:	4651      	mov	r1, sl
 80062ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80062be:	4651      	mov	r1, sl
 80062c0:	00ca      	lsls	r2, r1, #3
 80062c2:	4610      	mov	r0, r2
 80062c4:	4619      	mov	r1, r3
 80062c6:	4603      	mov	r3, r0
 80062c8:	4642      	mov	r2, r8
 80062ca:	189b      	adds	r3, r3, r2
 80062cc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80062d0:	464b      	mov	r3, r9
 80062d2:	460a      	mov	r2, r1
 80062d4:	eb42 0303 	adc.w	r3, r2, r3
 80062d8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80062dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062e0:	685b      	ldr	r3, [r3, #4]
 80062e2:	2200      	movs	r2, #0
 80062e4:	67bb      	str	r3, [r7, #120]	; 0x78
 80062e6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80062e8:	f04f 0200 	mov.w	r2, #0
 80062ec:	f04f 0300 	mov.w	r3, #0
 80062f0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80062f4:	4649      	mov	r1, r9
 80062f6:	008b      	lsls	r3, r1, #2
 80062f8:	4641      	mov	r1, r8
 80062fa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80062fe:	4641      	mov	r1, r8
 8006300:	008a      	lsls	r2, r1, #2
 8006302:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006306:	f7fa fca7 	bl	8000c58 <__aeabi_uldivmod>
 800630a:	4602      	mov	r2, r0
 800630c:	460b      	mov	r3, r1
 800630e:	4b39      	ldr	r3, [pc, #228]	; (80063f4 <UART_SetConfig+0x4e4>)
 8006310:	fba3 1302 	umull	r1, r3, r3, r2
 8006314:	095b      	lsrs	r3, r3, #5
 8006316:	2164      	movs	r1, #100	; 0x64
 8006318:	fb01 f303 	mul.w	r3, r1, r3
 800631c:	1ad3      	subs	r3, r2, r3
 800631e:	011b      	lsls	r3, r3, #4
 8006320:	3332      	adds	r3, #50	; 0x32
 8006322:	4a34      	ldr	r2, [pc, #208]	; (80063f4 <UART_SetConfig+0x4e4>)
 8006324:	fba2 2303 	umull	r2, r3, r2, r3
 8006328:	095b      	lsrs	r3, r3, #5
 800632a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800632e:	441c      	add	r4, r3
 8006330:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006334:	2200      	movs	r2, #0
 8006336:	673b      	str	r3, [r7, #112]	; 0x70
 8006338:	677a      	str	r2, [r7, #116]	; 0x74
 800633a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800633e:	4642      	mov	r2, r8
 8006340:	464b      	mov	r3, r9
 8006342:	1891      	adds	r1, r2, r2
 8006344:	60b9      	str	r1, [r7, #8]
 8006346:	415b      	adcs	r3, r3
 8006348:	60fb      	str	r3, [r7, #12]
 800634a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800634e:	4641      	mov	r1, r8
 8006350:	1851      	adds	r1, r2, r1
 8006352:	6039      	str	r1, [r7, #0]
 8006354:	4649      	mov	r1, r9
 8006356:	414b      	adcs	r3, r1
 8006358:	607b      	str	r3, [r7, #4]
 800635a:	f04f 0200 	mov.w	r2, #0
 800635e:	f04f 0300 	mov.w	r3, #0
 8006362:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006366:	4659      	mov	r1, fp
 8006368:	00cb      	lsls	r3, r1, #3
 800636a:	4651      	mov	r1, sl
 800636c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006370:	4651      	mov	r1, sl
 8006372:	00ca      	lsls	r2, r1, #3
 8006374:	4610      	mov	r0, r2
 8006376:	4619      	mov	r1, r3
 8006378:	4603      	mov	r3, r0
 800637a:	4642      	mov	r2, r8
 800637c:	189b      	adds	r3, r3, r2
 800637e:	66bb      	str	r3, [r7, #104]	; 0x68
 8006380:	464b      	mov	r3, r9
 8006382:	460a      	mov	r2, r1
 8006384:	eb42 0303 	adc.w	r3, r2, r3
 8006388:	66fb      	str	r3, [r7, #108]	; 0x6c
 800638a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800638e:	685b      	ldr	r3, [r3, #4]
 8006390:	2200      	movs	r2, #0
 8006392:	663b      	str	r3, [r7, #96]	; 0x60
 8006394:	667a      	str	r2, [r7, #100]	; 0x64
 8006396:	f04f 0200 	mov.w	r2, #0
 800639a:	f04f 0300 	mov.w	r3, #0
 800639e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80063a2:	4649      	mov	r1, r9
 80063a4:	008b      	lsls	r3, r1, #2
 80063a6:	4641      	mov	r1, r8
 80063a8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80063ac:	4641      	mov	r1, r8
 80063ae:	008a      	lsls	r2, r1, #2
 80063b0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80063b4:	f7fa fc50 	bl	8000c58 <__aeabi_uldivmod>
 80063b8:	4602      	mov	r2, r0
 80063ba:	460b      	mov	r3, r1
 80063bc:	4b0d      	ldr	r3, [pc, #52]	; (80063f4 <UART_SetConfig+0x4e4>)
 80063be:	fba3 1302 	umull	r1, r3, r3, r2
 80063c2:	095b      	lsrs	r3, r3, #5
 80063c4:	2164      	movs	r1, #100	; 0x64
 80063c6:	fb01 f303 	mul.w	r3, r1, r3
 80063ca:	1ad3      	subs	r3, r2, r3
 80063cc:	011b      	lsls	r3, r3, #4
 80063ce:	3332      	adds	r3, #50	; 0x32
 80063d0:	4a08      	ldr	r2, [pc, #32]	; (80063f4 <UART_SetConfig+0x4e4>)
 80063d2:	fba2 2303 	umull	r2, r3, r2, r3
 80063d6:	095b      	lsrs	r3, r3, #5
 80063d8:	f003 020f 	and.w	r2, r3, #15
 80063dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	4422      	add	r2, r4
 80063e4:	609a      	str	r2, [r3, #8]
}
 80063e6:	bf00      	nop
 80063e8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80063ec:	46bd      	mov	sp, r7
 80063ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80063f2:	bf00      	nop
 80063f4:	51eb851f 	.word	0x51eb851f

080063f8 <__errno>:
 80063f8:	4b01      	ldr	r3, [pc, #4]	; (8006400 <__errno+0x8>)
 80063fa:	6818      	ldr	r0, [r3, #0]
 80063fc:	4770      	bx	lr
 80063fe:	bf00      	nop
 8006400:	2000000c 	.word	0x2000000c

08006404 <__libc_init_array>:
 8006404:	b570      	push	{r4, r5, r6, lr}
 8006406:	4d0d      	ldr	r5, [pc, #52]	; (800643c <__libc_init_array+0x38>)
 8006408:	4c0d      	ldr	r4, [pc, #52]	; (8006440 <__libc_init_array+0x3c>)
 800640a:	1b64      	subs	r4, r4, r5
 800640c:	10a4      	asrs	r4, r4, #2
 800640e:	2600      	movs	r6, #0
 8006410:	42a6      	cmp	r6, r4
 8006412:	d109      	bne.n	8006428 <__libc_init_array+0x24>
 8006414:	4d0b      	ldr	r5, [pc, #44]	; (8006444 <__libc_init_array+0x40>)
 8006416:	4c0c      	ldr	r4, [pc, #48]	; (8006448 <__libc_init_array+0x44>)
 8006418:	f002 ff02 	bl	8009220 <_init>
 800641c:	1b64      	subs	r4, r4, r5
 800641e:	10a4      	asrs	r4, r4, #2
 8006420:	2600      	movs	r6, #0
 8006422:	42a6      	cmp	r6, r4
 8006424:	d105      	bne.n	8006432 <__libc_init_array+0x2e>
 8006426:	bd70      	pop	{r4, r5, r6, pc}
 8006428:	f855 3b04 	ldr.w	r3, [r5], #4
 800642c:	4798      	blx	r3
 800642e:	3601      	adds	r6, #1
 8006430:	e7ee      	b.n	8006410 <__libc_init_array+0xc>
 8006432:	f855 3b04 	ldr.w	r3, [r5], #4
 8006436:	4798      	blx	r3
 8006438:	3601      	adds	r6, #1
 800643a:	e7f2      	b.n	8006422 <__libc_init_array+0x1e>
 800643c:	0800969c 	.word	0x0800969c
 8006440:	0800969c 	.word	0x0800969c
 8006444:	0800969c 	.word	0x0800969c
 8006448:	080096a0 	.word	0x080096a0

0800644c <memset>:
 800644c:	4402      	add	r2, r0
 800644e:	4603      	mov	r3, r0
 8006450:	4293      	cmp	r3, r2
 8006452:	d100      	bne.n	8006456 <memset+0xa>
 8006454:	4770      	bx	lr
 8006456:	f803 1b01 	strb.w	r1, [r3], #1
 800645a:	e7f9      	b.n	8006450 <memset+0x4>

0800645c <__cvt>:
 800645c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006460:	ec55 4b10 	vmov	r4, r5, d0
 8006464:	2d00      	cmp	r5, #0
 8006466:	460e      	mov	r6, r1
 8006468:	4619      	mov	r1, r3
 800646a:	462b      	mov	r3, r5
 800646c:	bfbb      	ittet	lt
 800646e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006472:	461d      	movlt	r5, r3
 8006474:	2300      	movge	r3, #0
 8006476:	232d      	movlt	r3, #45	; 0x2d
 8006478:	700b      	strb	r3, [r1, #0]
 800647a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800647c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006480:	4691      	mov	r9, r2
 8006482:	f023 0820 	bic.w	r8, r3, #32
 8006486:	bfbc      	itt	lt
 8006488:	4622      	movlt	r2, r4
 800648a:	4614      	movlt	r4, r2
 800648c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006490:	d005      	beq.n	800649e <__cvt+0x42>
 8006492:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006496:	d100      	bne.n	800649a <__cvt+0x3e>
 8006498:	3601      	adds	r6, #1
 800649a:	2102      	movs	r1, #2
 800649c:	e000      	b.n	80064a0 <__cvt+0x44>
 800649e:	2103      	movs	r1, #3
 80064a0:	ab03      	add	r3, sp, #12
 80064a2:	9301      	str	r3, [sp, #4]
 80064a4:	ab02      	add	r3, sp, #8
 80064a6:	9300      	str	r3, [sp, #0]
 80064a8:	ec45 4b10 	vmov	d0, r4, r5
 80064ac:	4653      	mov	r3, sl
 80064ae:	4632      	mov	r2, r6
 80064b0:	f000 fcea 	bl	8006e88 <_dtoa_r>
 80064b4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80064b8:	4607      	mov	r7, r0
 80064ba:	d102      	bne.n	80064c2 <__cvt+0x66>
 80064bc:	f019 0f01 	tst.w	r9, #1
 80064c0:	d022      	beq.n	8006508 <__cvt+0xac>
 80064c2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80064c6:	eb07 0906 	add.w	r9, r7, r6
 80064ca:	d110      	bne.n	80064ee <__cvt+0x92>
 80064cc:	783b      	ldrb	r3, [r7, #0]
 80064ce:	2b30      	cmp	r3, #48	; 0x30
 80064d0:	d10a      	bne.n	80064e8 <__cvt+0x8c>
 80064d2:	2200      	movs	r2, #0
 80064d4:	2300      	movs	r3, #0
 80064d6:	4620      	mov	r0, r4
 80064d8:	4629      	mov	r1, r5
 80064da:	f7fa fafd 	bl	8000ad8 <__aeabi_dcmpeq>
 80064de:	b918      	cbnz	r0, 80064e8 <__cvt+0x8c>
 80064e0:	f1c6 0601 	rsb	r6, r6, #1
 80064e4:	f8ca 6000 	str.w	r6, [sl]
 80064e8:	f8da 3000 	ldr.w	r3, [sl]
 80064ec:	4499      	add	r9, r3
 80064ee:	2200      	movs	r2, #0
 80064f0:	2300      	movs	r3, #0
 80064f2:	4620      	mov	r0, r4
 80064f4:	4629      	mov	r1, r5
 80064f6:	f7fa faef 	bl	8000ad8 <__aeabi_dcmpeq>
 80064fa:	b108      	cbz	r0, 8006500 <__cvt+0xa4>
 80064fc:	f8cd 900c 	str.w	r9, [sp, #12]
 8006500:	2230      	movs	r2, #48	; 0x30
 8006502:	9b03      	ldr	r3, [sp, #12]
 8006504:	454b      	cmp	r3, r9
 8006506:	d307      	bcc.n	8006518 <__cvt+0xbc>
 8006508:	9b03      	ldr	r3, [sp, #12]
 800650a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800650c:	1bdb      	subs	r3, r3, r7
 800650e:	4638      	mov	r0, r7
 8006510:	6013      	str	r3, [r2, #0]
 8006512:	b004      	add	sp, #16
 8006514:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006518:	1c59      	adds	r1, r3, #1
 800651a:	9103      	str	r1, [sp, #12]
 800651c:	701a      	strb	r2, [r3, #0]
 800651e:	e7f0      	b.n	8006502 <__cvt+0xa6>

08006520 <__exponent>:
 8006520:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006522:	4603      	mov	r3, r0
 8006524:	2900      	cmp	r1, #0
 8006526:	bfb8      	it	lt
 8006528:	4249      	neglt	r1, r1
 800652a:	f803 2b02 	strb.w	r2, [r3], #2
 800652e:	bfb4      	ite	lt
 8006530:	222d      	movlt	r2, #45	; 0x2d
 8006532:	222b      	movge	r2, #43	; 0x2b
 8006534:	2909      	cmp	r1, #9
 8006536:	7042      	strb	r2, [r0, #1]
 8006538:	dd2a      	ble.n	8006590 <__exponent+0x70>
 800653a:	f10d 0407 	add.w	r4, sp, #7
 800653e:	46a4      	mov	ip, r4
 8006540:	270a      	movs	r7, #10
 8006542:	46a6      	mov	lr, r4
 8006544:	460a      	mov	r2, r1
 8006546:	fb91 f6f7 	sdiv	r6, r1, r7
 800654a:	fb07 1516 	mls	r5, r7, r6, r1
 800654e:	3530      	adds	r5, #48	; 0x30
 8006550:	2a63      	cmp	r2, #99	; 0x63
 8006552:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8006556:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800655a:	4631      	mov	r1, r6
 800655c:	dcf1      	bgt.n	8006542 <__exponent+0x22>
 800655e:	3130      	adds	r1, #48	; 0x30
 8006560:	f1ae 0502 	sub.w	r5, lr, #2
 8006564:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006568:	1c44      	adds	r4, r0, #1
 800656a:	4629      	mov	r1, r5
 800656c:	4561      	cmp	r1, ip
 800656e:	d30a      	bcc.n	8006586 <__exponent+0x66>
 8006570:	f10d 0209 	add.w	r2, sp, #9
 8006574:	eba2 020e 	sub.w	r2, r2, lr
 8006578:	4565      	cmp	r5, ip
 800657a:	bf88      	it	hi
 800657c:	2200      	movhi	r2, #0
 800657e:	4413      	add	r3, r2
 8006580:	1a18      	subs	r0, r3, r0
 8006582:	b003      	add	sp, #12
 8006584:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006586:	f811 2b01 	ldrb.w	r2, [r1], #1
 800658a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800658e:	e7ed      	b.n	800656c <__exponent+0x4c>
 8006590:	2330      	movs	r3, #48	; 0x30
 8006592:	3130      	adds	r1, #48	; 0x30
 8006594:	7083      	strb	r3, [r0, #2]
 8006596:	70c1      	strb	r1, [r0, #3]
 8006598:	1d03      	adds	r3, r0, #4
 800659a:	e7f1      	b.n	8006580 <__exponent+0x60>

0800659c <_printf_float>:
 800659c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065a0:	ed2d 8b02 	vpush	{d8}
 80065a4:	b08d      	sub	sp, #52	; 0x34
 80065a6:	460c      	mov	r4, r1
 80065a8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80065ac:	4616      	mov	r6, r2
 80065ae:	461f      	mov	r7, r3
 80065b0:	4605      	mov	r5, r0
 80065b2:	f001 fa57 	bl	8007a64 <_localeconv_r>
 80065b6:	f8d0 a000 	ldr.w	sl, [r0]
 80065ba:	4650      	mov	r0, sl
 80065bc:	f7f9 fe10 	bl	80001e0 <strlen>
 80065c0:	2300      	movs	r3, #0
 80065c2:	930a      	str	r3, [sp, #40]	; 0x28
 80065c4:	6823      	ldr	r3, [r4, #0]
 80065c6:	9305      	str	r3, [sp, #20]
 80065c8:	f8d8 3000 	ldr.w	r3, [r8]
 80065cc:	f894 b018 	ldrb.w	fp, [r4, #24]
 80065d0:	3307      	adds	r3, #7
 80065d2:	f023 0307 	bic.w	r3, r3, #7
 80065d6:	f103 0208 	add.w	r2, r3, #8
 80065da:	f8c8 2000 	str.w	r2, [r8]
 80065de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065e2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80065e6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80065ea:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80065ee:	9307      	str	r3, [sp, #28]
 80065f0:	f8cd 8018 	str.w	r8, [sp, #24]
 80065f4:	ee08 0a10 	vmov	s16, r0
 80065f8:	4b9f      	ldr	r3, [pc, #636]	; (8006878 <_printf_float+0x2dc>)
 80065fa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80065fe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006602:	f7fa fa9b 	bl	8000b3c <__aeabi_dcmpun>
 8006606:	bb88      	cbnz	r0, 800666c <_printf_float+0xd0>
 8006608:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800660c:	4b9a      	ldr	r3, [pc, #616]	; (8006878 <_printf_float+0x2dc>)
 800660e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006612:	f7fa fa75 	bl	8000b00 <__aeabi_dcmple>
 8006616:	bb48      	cbnz	r0, 800666c <_printf_float+0xd0>
 8006618:	2200      	movs	r2, #0
 800661a:	2300      	movs	r3, #0
 800661c:	4640      	mov	r0, r8
 800661e:	4649      	mov	r1, r9
 8006620:	f7fa fa64 	bl	8000aec <__aeabi_dcmplt>
 8006624:	b110      	cbz	r0, 800662c <_printf_float+0x90>
 8006626:	232d      	movs	r3, #45	; 0x2d
 8006628:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800662c:	4b93      	ldr	r3, [pc, #588]	; (800687c <_printf_float+0x2e0>)
 800662e:	4894      	ldr	r0, [pc, #592]	; (8006880 <_printf_float+0x2e4>)
 8006630:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006634:	bf94      	ite	ls
 8006636:	4698      	movls	r8, r3
 8006638:	4680      	movhi	r8, r0
 800663a:	2303      	movs	r3, #3
 800663c:	6123      	str	r3, [r4, #16]
 800663e:	9b05      	ldr	r3, [sp, #20]
 8006640:	f023 0204 	bic.w	r2, r3, #4
 8006644:	6022      	str	r2, [r4, #0]
 8006646:	f04f 0900 	mov.w	r9, #0
 800664a:	9700      	str	r7, [sp, #0]
 800664c:	4633      	mov	r3, r6
 800664e:	aa0b      	add	r2, sp, #44	; 0x2c
 8006650:	4621      	mov	r1, r4
 8006652:	4628      	mov	r0, r5
 8006654:	f000 f9d8 	bl	8006a08 <_printf_common>
 8006658:	3001      	adds	r0, #1
 800665a:	f040 8090 	bne.w	800677e <_printf_float+0x1e2>
 800665e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006662:	b00d      	add	sp, #52	; 0x34
 8006664:	ecbd 8b02 	vpop	{d8}
 8006668:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800666c:	4642      	mov	r2, r8
 800666e:	464b      	mov	r3, r9
 8006670:	4640      	mov	r0, r8
 8006672:	4649      	mov	r1, r9
 8006674:	f7fa fa62 	bl	8000b3c <__aeabi_dcmpun>
 8006678:	b140      	cbz	r0, 800668c <_printf_float+0xf0>
 800667a:	464b      	mov	r3, r9
 800667c:	2b00      	cmp	r3, #0
 800667e:	bfbc      	itt	lt
 8006680:	232d      	movlt	r3, #45	; 0x2d
 8006682:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006686:	487f      	ldr	r0, [pc, #508]	; (8006884 <_printf_float+0x2e8>)
 8006688:	4b7f      	ldr	r3, [pc, #508]	; (8006888 <_printf_float+0x2ec>)
 800668a:	e7d1      	b.n	8006630 <_printf_float+0x94>
 800668c:	6863      	ldr	r3, [r4, #4]
 800668e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006692:	9206      	str	r2, [sp, #24]
 8006694:	1c5a      	adds	r2, r3, #1
 8006696:	d13f      	bne.n	8006718 <_printf_float+0x17c>
 8006698:	2306      	movs	r3, #6
 800669a:	6063      	str	r3, [r4, #4]
 800669c:	9b05      	ldr	r3, [sp, #20]
 800669e:	6861      	ldr	r1, [r4, #4]
 80066a0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80066a4:	2300      	movs	r3, #0
 80066a6:	9303      	str	r3, [sp, #12]
 80066a8:	ab0a      	add	r3, sp, #40	; 0x28
 80066aa:	e9cd b301 	strd	fp, r3, [sp, #4]
 80066ae:	ab09      	add	r3, sp, #36	; 0x24
 80066b0:	ec49 8b10 	vmov	d0, r8, r9
 80066b4:	9300      	str	r3, [sp, #0]
 80066b6:	6022      	str	r2, [r4, #0]
 80066b8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80066bc:	4628      	mov	r0, r5
 80066be:	f7ff fecd 	bl	800645c <__cvt>
 80066c2:	9b06      	ldr	r3, [sp, #24]
 80066c4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80066c6:	2b47      	cmp	r3, #71	; 0x47
 80066c8:	4680      	mov	r8, r0
 80066ca:	d108      	bne.n	80066de <_printf_float+0x142>
 80066cc:	1cc8      	adds	r0, r1, #3
 80066ce:	db02      	blt.n	80066d6 <_printf_float+0x13a>
 80066d0:	6863      	ldr	r3, [r4, #4]
 80066d2:	4299      	cmp	r1, r3
 80066d4:	dd41      	ble.n	800675a <_printf_float+0x1be>
 80066d6:	f1ab 0b02 	sub.w	fp, fp, #2
 80066da:	fa5f fb8b 	uxtb.w	fp, fp
 80066de:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80066e2:	d820      	bhi.n	8006726 <_printf_float+0x18a>
 80066e4:	3901      	subs	r1, #1
 80066e6:	465a      	mov	r2, fp
 80066e8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80066ec:	9109      	str	r1, [sp, #36]	; 0x24
 80066ee:	f7ff ff17 	bl	8006520 <__exponent>
 80066f2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80066f4:	1813      	adds	r3, r2, r0
 80066f6:	2a01      	cmp	r2, #1
 80066f8:	4681      	mov	r9, r0
 80066fa:	6123      	str	r3, [r4, #16]
 80066fc:	dc02      	bgt.n	8006704 <_printf_float+0x168>
 80066fe:	6822      	ldr	r2, [r4, #0]
 8006700:	07d2      	lsls	r2, r2, #31
 8006702:	d501      	bpl.n	8006708 <_printf_float+0x16c>
 8006704:	3301      	adds	r3, #1
 8006706:	6123      	str	r3, [r4, #16]
 8006708:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800670c:	2b00      	cmp	r3, #0
 800670e:	d09c      	beq.n	800664a <_printf_float+0xae>
 8006710:	232d      	movs	r3, #45	; 0x2d
 8006712:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006716:	e798      	b.n	800664a <_printf_float+0xae>
 8006718:	9a06      	ldr	r2, [sp, #24]
 800671a:	2a47      	cmp	r2, #71	; 0x47
 800671c:	d1be      	bne.n	800669c <_printf_float+0x100>
 800671e:	2b00      	cmp	r3, #0
 8006720:	d1bc      	bne.n	800669c <_printf_float+0x100>
 8006722:	2301      	movs	r3, #1
 8006724:	e7b9      	b.n	800669a <_printf_float+0xfe>
 8006726:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800672a:	d118      	bne.n	800675e <_printf_float+0x1c2>
 800672c:	2900      	cmp	r1, #0
 800672e:	6863      	ldr	r3, [r4, #4]
 8006730:	dd0b      	ble.n	800674a <_printf_float+0x1ae>
 8006732:	6121      	str	r1, [r4, #16]
 8006734:	b913      	cbnz	r3, 800673c <_printf_float+0x1a0>
 8006736:	6822      	ldr	r2, [r4, #0]
 8006738:	07d0      	lsls	r0, r2, #31
 800673a:	d502      	bpl.n	8006742 <_printf_float+0x1a6>
 800673c:	3301      	adds	r3, #1
 800673e:	440b      	add	r3, r1
 8006740:	6123      	str	r3, [r4, #16]
 8006742:	65a1      	str	r1, [r4, #88]	; 0x58
 8006744:	f04f 0900 	mov.w	r9, #0
 8006748:	e7de      	b.n	8006708 <_printf_float+0x16c>
 800674a:	b913      	cbnz	r3, 8006752 <_printf_float+0x1b6>
 800674c:	6822      	ldr	r2, [r4, #0]
 800674e:	07d2      	lsls	r2, r2, #31
 8006750:	d501      	bpl.n	8006756 <_printf_float+0x1ba>
 8006752:	3302      	adds	r3, #2
 8006754:	e7f4      	b.n	8006740 <_printf_float+0x1a4>
 8006756:	2301      	movs	r3, #1
 8006758:	e7f2      	b.n	8006740 <_printf_float+0x1a4>
 800675a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800675e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006760:	4299      	cmp	r1, r3
 8006762:	db05      	blt.n	8006770 <_printf_float+0x1d4>
 8006764:	6823      	ldr	r3, [r4, #0]
 8006766:	6121      	str	r1, [r4, #16]
 8006768:	07d8      	lsls	r0, r3, #31
 800676a:	d5ea      	bpl.n	8006742 <_printf_float+0x1a6>
 800676c:	1c4b      	adds	r3, r1, #1
 800676e:	e7e7      	b.n	8006740 <_printf_float+0x1a4>
 8006770:	2900      	cmp	r1, #0
 8006772:	bfd4      	ite	le
 8006774:	f1c1 0202 	rsble	r2, r1, #2
 8006778:	2201      	movgt	r2, #1
 800677a:	4413      	add	r3, r2
 800677c:	e7e0      	b.n	8006740 <_printf_float+0x1a4>
 800677e:	6823      	ldr	r3, [r4, #0]
 8006780:	055a      	lsls	r2, r3, #21
 8006782:	d407      	bmi.n	8006794 <_printf_float+0x1f8>
 8006784:	6923      	ldr	r3, [r4, #16]
 8006786:	4642      	mov	r2, r8
 8006788:	4631      	mov	r1, r6
 800678a:	4628      	mov	r0, r5
 800678c:	47b8      	blx	r7
 800678e:	3001      	adds	r0, #1
 8006790:	d12c      	bne.n	80067ec <_printf_float+0x250>
 8006792:	e764      	b.n	800665e <_printf_float+0xc2>
 8006794:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006798:	f240 80e0 	bls.w	800695c <_printf_float+0x3c0>
 800679c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80067a0:	2200      	movs	r2, #0
 80067a2:	2300      	movs	r3, #0
 80067a4:	f7fa f998 	bl	8000ad8 <__aeabi_dcmpeq>
 80067a8:	2800      	cmp	r0, #0
 80067aa:	d034      	beq.n	8006816 <_printf_float+0x27a>
 80067ac:	4a37      	ldr	r2, [pc, #220]	; (800688c <_printf_float+0x2f0>)
 80067ae:	2301      	movs	r3, #1
 80067b0:	4631      	mov	r1, r6
 80067b2:	4628      	mov	r0, r5
 80067b4:	47b8      	blx	r7
 80067b6:	3001      	adds	r0, #1
 80067b8:	f43f af51 	beq.w	800665e <_printf_float+0xc2>
 80067bc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80067c0:	429a      	cmp	r2, r3
 80067c2:	db02      	blt.n	80067ca <_printf_float+0x22e>
 80067c4:	6823      	ldr	r3, [r4, #0]
 80067c6:	07d8      	lsls	r0, r3, #31
 80067c8:	d510      	bpl.n	80067ec <_printf_float+0x250>
 80067ca:	ee18 3a10 	vmov	r3, s16
 80067ce:	4652      	mov	r2, sl
 80067d0:	4631      	mov	r1, r6
 80067d2:	4628      	mov	r0, r5
 80067d4:	47b8      	blx	r7
 80067d6:	3001      	adds	r0, #1
 80067d8:	f43f af41 	beq.w	800665e <_printf_float+0xc2>
 80067dc:	f04f 0800 	mov.w	r8, #0
 80067e0:	f104 091a 	add.w	r9, r4, #26
 80067e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80067e6:	3b01      	subs	r3, #1
 80067e8:	4543      	cmp	r3, r8
 80067ea:	dc09      	bgt.n	8006800 <_printf_float+0x264>
 80067ec:	6823      	ldr	r3, [r4, #0]
 80067ee:	079b      	lsls	r3, r3, #30
 80067f0:	f100 8105 	bmi.w	80069fe <_printf_float+0x462>
 80067f4:	68e0      	ldr	r0, [r4, #12]
 80067f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80067f8:	4298      	cmp	r0, r3
 80067fa:	bfb8      	it	lt
 80067fc:	4618      	movlt	r0, r3
 80067fe:	e730      	b.n	8006662 <_printf_float+0xc6>
 8006800:	2301      	movs	r3, #1
 8006802:	464a      	mov	r2, r9
 8006804:	4631      	mov	r1, r6
 8006806:	4628      	mov	r0, r5
 8006808:	47b8      	blx	r7
 800680a:	3001      	adds	r0, #1
 800680c:	f43f af27 	beq.w	800665e <_printf_float+0xc2>
 8006810:	f108 0801 	add.w	r8, r8, #1
 8006814:	e7e6      	b.n	80067e4 <_printf_float+0x248>
 8006816:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006818:	2b00      	cmp	r3, #0
 800681a:	dc39      	bgt.n	8006890 <_printf_float+0x2f4>
 800681c:	4a1b      	ldr	r2, [pc, #108]	; (800688c <_printf_float+0x2f0>)
 800681e:	2301      	movs	r3, #1
 8006820:	4631      	mov	r1, r6
 8006822:	4628      	mov	r0, r5
 8006824:	47b8      	blx	r7
 8006826:	3001      	adds	r0, #1
 8006828:	f43f af19 	beq.w	800665e <_printf_float+0xc2>
 800682c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006830:	4313      	orrs	r3, r2
 8006832:	d102      	bne.n	800683a <_printf_float+0x29e>
 8006834:	6823      	ldr	r3, [r4, #0]
 8006836:	07d9      	lsls	r1, r3, #31
 8006838:	d5d8      	bpl.n	80067ec <_printf_float+0x250>
 800683a:	ee18 3a10 	vmov	r3, s16
 800683e:	4652      	mov	r2, sl
 8006840:	4631      	mov	r1, r6
 8006842:	4628      	mov	r0, r5
 8006844:	47b8      	blx	r7
 8006846:	3001      	adds	r0, #1
 8006848:	f43f af09 	beq.w	800665e <_printf_float+0xc2>
 800684c:	f04f 0900 	mov.w	r9, #0
 8006850:	f104 0a1a 	add.w	sl, r4, #26
 8006854:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006856:	425b      	negs	r3, r3
 8006858:	454b      	cmp	r3, r9
 800685a:	dc01      	bgt.n	8006860 <_printf_float+0x2c4>
 800685c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800685e:	e792      	b.n	8006786 <_printf_float+0x1ea>
 8006860:	2301      	movs	r3, #1
 8006862:	4652      	mov	r2, sl
 8006864:	4631      	mov	r1, r6
 8006866:	4628      	mov	r0, r5
 8006868:	47b8      	blx	r7
 800686a:	3001      	adds	r0, #1
 800686c:	f43f aef7 	beq.w	800665e <_printf_float+0xc2>
 8006870:	f109 0901 	add.w	r9, r9, #1
 8006874:	e7ee      	b.n	8006854 <_printf_float+0x2b8>
 8006876:	bf00      	nop
 8006878:	7fefffff 	.word	0x7fefffff
 800687c:	080092c0 	.word	0x080092c0
 8006880:	080092c4 	.word	0x080092c4
 8006884:	080092cc 	.word	0x080092cc
 8006888:	080092c8 	.word	0x080092c8
 800688c:	080092d0 	.word	0x080092d0
 8006890:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006892:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006894:	429a      	cmp	r2, r3
 8006896:	bfa8      	it	ge
 8006898:	461a      	movge	r2, r3
 800689a:	2a00      	cmp	r2, #0
 800689c:	4691      	mov	r9, r2
 800689e:	dc37      	bgt.n	8006910 <_printf_float+0x374>
 80068a0:	f04f 0b00 	mov.w	fp, #0
 80068a4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80068a8:	f104 021a 	add.w	r2, r4, #26
 80068ac:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80068ae:	9305      	str	r3, [sp, #20]
 80068b0:	eba3 0309 	sub.w	r3, r3, r9
 80068b4:	455b      	cmp	r3, fp
 80068b6:	dc33      	bgt.n	8006920 <_printf_float+0x384>
 80068b8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80068bc:	429a      	cmp	r2, r3
 80068be:	db3b      	blt.n	8006938 <_printf_float+0x39c>
 80068c0:	6823      	ldr	r3, [r4, #0]
 80068c2:	07da      	lsls	r2, r3, #31
 80068c4:	d438      	bmi.n	8006938 <_printf_float+0x39c>
 80068c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80068c8:	9a05      	ldr	r2, [sp, #20]
 80068ca:	9909      	ldr	r1, [sp, #36]	; 0x24
 80068cc:	1a9a      	subs	r2, r3, r2
 80068ce:	eba3 0901 	sub.w	r9, r3, r1
 80068d2:	4591      	cmp	r9, r2
 80068d4:	bfa8      	it	ge
 80068d6:	4691      	movge	r9, r2
 80068d8:	f1b9 0f00 	cmp.w	r9, #0
 80068dc:	dc35      	bgt.n	800694a <_printf_float+0x3ae>
 80068de:	f04f 0800 	mov.w	r8, #0
 80068e2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80068e6:	f104 0a1a 	add.w	sl, r4, #26
 80068ea:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80068ee:	1a9b      	subs	r3, r3, r2
 80068f0:	eba3 0309 	sub.w	r3, r3, r9
 80068f4:	4543      	cmp	r3, r8
 80068f6:	f77f af79 	ble.w	80067ec <_printf_float+0x250>
 80068fa:	2301      	movs	r3, #1
 80068fc:	4652      	mov	r2, sl
 80068fe:	4631      	mov	r1, r6
 8006900:	4628      	mov	r0, r5
 8006902:	47b8      	blx	r7
 8006904:	3001      	adds	r0, #1
 8006906:	f43f aeaa 	beq.w	800665e <_printf_float+0xc2>
 800690a:	f108 0801 	add.w	r8, r8, #1
 800690e:	e7ec      	b.n	80068ea <_printf_float+0x34e>
 8006910:	4613      	mov	r3, r2
 8006912:	4631      	mov	r1, r6
 8006914:	4642      	mov	r2, r8
 8006916:	4628      	mov	r0, r5
 8006918:	47b8      	blx	r7
 800691a:	3001      	adds	r0, #1
 800691c:	d1c0      	bne.n	80068a0 <_printf_float+0x304>
 800691e:	e69e      	b.n	800665e <_printf_float+0xc2>
 8006920:	2301      	movs	r3, #1
 8006922:	4631      	mov	r1, r6
 8006924:	4628      	mov	r0, r5
 8006926:	9205      	str	r2, [sp, #20]
 8006928:	47b8      	blx	r7
 800692a:	3001      	adds	r0, #1
 800692c:	f43f ae97 	beq.w	800665e <_printf_float+0xc2>
 8006930:	9a05      	ldr	r2, [sp, #20]
 8006932:	f10b 0b01 	add.w	fp, fp, #1
 8006936:	e7b9      	b.n	80068ac <_printf_float+0x310>
 8006938:	ee18 3a10 	vmov	r3, s16
 800693c:	4652      	mov	r2, sl
 800693e:	4631      	mov	r1, r6
 8006940:	4628      	mov	r0, r5
 8006942:	47b8      	blx	r7
 8006944:	3001      	adds	r0, #1
 8006946:	d1be      	bne.n	80068c6 <_printf_float+0x32a>
 8006948:	e689      	b.n	800665e <_printf_float+0xc2>
 800694a:	9a05      	ldr	r2, [sp, #20]
 800694c:	464b      	mov	r3, r9
 800694e:	4442      	add	r2, r8
 8006950:	4631      	mov	r1, r6
 8006952:	4628      	mov	r0, r5
 8006954:	47b8      	blx	r7
 8006956:	3001      	adds	r0, #1
 8006958:	d1c1      	bne.n	80068de <_printf_float+0x342>
 800695a:	e680      	b.n	800665e <_printf_float+0xc2>
 800695c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800695e:	2a01      	cmp	r2, #1
 8006960:	dc01      	bgt.n	8006966 <_printf_float+0x3ca>
 8006962:	07db      	lsls	r3, r3, #31
 8006964:	d538      	bpl.n	80069d8 <_printf_float+0x43c>
 8006966:	2301      	movs	r3, #1
 8006968:	4642      	mov	r2, r8
 800696a:	4631      	mov	r1, r6
 800696c:	4628      	mov	r0, r5
 800696e:	47b8      	blx	r7
 8006970:	3001      	adds	r0, #1
 8006972:	f43f ae74 	beq.w	800665e <_printf_float+0xc2>
 8006976:	ee18 3a10 	vmov	r3, s16
 800697a:	4652      	mov	r2, sl
 800697c:	4631      	mov	r1, r6
 800697e:	4628      	mov	r0, r5
 8006980:	47b8      	blx	r7
 8006982:	3001      	adds	r0, #1
 8006984:	f43f ae6b 	beq.w	800665e <_printf_float+0xc2>
 8006988:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800698c:	2200      	movs	r2, #0
 800698e:	2300      	movs	r3, #0
 8006990:	f7fa f8a2 	bl	8000ad8 <__aeabi_dcmpeq>
 8006994:	b9d8      	cbnz	r0, 80069ce <_printf_float+0x432>
 8006996:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006998:	f108 0201 	add.w	r2, r8, #1
 800699c:	3b01      	subs	r3, #1
 800699e:	4631      	mov	r1, r6
 80069a0:	4628      	mov	r0, r5
 80069a2:	47b8      	blx	r7
 80069a4:	3001      	adds	r0, #1
 80069a6:	d10e      	bne.n	80069c6 <_printf_float+0x42a>
 80069a8:	e659      	b.n	800665e <_printf_float+0xc2>
 80069aa:	2301      	movs	r3, #1
 80069ac:	4652      	mov	r2, sl
 80069ae:	4631      	mov	r1, r6
 80069b0:	4628      	mov	r0, r5
 80069b2:	47b8      	blx	r7
 80069b4:	3001      	adds	r0, #1
 80069b6:	f43f ae52 	beq.w	800665e <_printf_float+0xc2>
 80069ba:	f108 0801 	add.w	r8, r8, #1
 80069be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80069c0:	3b01      	subs	r3, #1
 80069c2:	4543      	cmp	r3, r8
 80069c4:	dcf1      	bgt.n	80069aa <_printf_float+0x40e>
 80069c6:	464b      	mov	r3, r9
 80069c8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80069cc:	e6dc      	b.n	8006788 <_printf_float+0x1ec>
 80069ce:	f04f 0800 	mov.w	r8, #0
 80069d2:	f104 0a1a 	add.w	sl, r4, #26
 80069d6:	e7f2      	b.n	80069be <_printf_float+0x422>
 80069d8:	2301      	movs	r3, #1
 80069da:	4642      	mov	r2, r8
 80069dc:	e7df      	b.n	800699e <_printf_float+0x402>
 80069de:	2301      	movs	r3, #1
 80069e0:	464a      	mov	r2, r9
 80069e2:	4631      	mov	r1, r6
 80069e4:	4628      	mov	r0, r5
 80069e6:	47b8      	blx	r7
 80069e8:	3001      	adds	r0, #1
 80069ea:	f43f ae38 	beq.w	800665e <_printf_float+0xc2>
 80069ee:	f108 0801 	add.w	r8, r8, #1
 80069f2:	68e3      	ldr	r3, [r4, #12]
 80069f4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80069f6:	1a5b      	subs	r3, r3, r1
 80069f8:	4543      	cmp	r3, r8
 80069fa:	dcf0      	bgt.n	80069de <_printf_float+0x442>
 80069fc:	e6fa      	b.n	80067f4 <_printf_float+0x258>
 80069fe:	f04f 0800 	mov.w	r8, #0
 8006a02:	f104 0919 	add.w	r9, r4, #25
 8006a06:	e7f4      	b.n	80069f2 <_printf_float+0x456>

08006a08 <_printf_common>:
 8006a08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a0c:	4616      	mov	r6, r2
 8006a0e:	4699      	mov	r9, r3
 8006a10:	688a      	ldr	r2, [r1, #8]
 8006a12:	690b      	ldr	r3, [r1, #16]
 8006a14:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006a18:	4293      	cmp	r3, r2
 8006a1a:	bfb8      	it	lt
 8006a1c:	4613      	movlt	r3, r2
 8006a1e:	6033      	str	r3, [r6, #0]
 8006a20:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006a24:	4607      	mov	r7, r0
 8006a26:	460c      	mov	r4, r1
 8006a28:	b10a      	cbz	r2, 8006a2e <_printf_common+0x26>
 8006a2a:	3301      	adds	r3, #1
 8006a2c:	6033      	str	r3, [r6, #0]
 8006a2e:	6823      	ldr	r3, [r4, #0]
 8006a30:	0699      	lsls	r1, r3, #26
 8006a32:	bf42      	ittt	mi
 8006a34:	6833      	ldrmi	r3, [r6, #0]
 8006a36:	3302      	addmi	r3, #2
 8006a38:	6033      	strmi	r3, [r6, #0]
 8006a3a:	6825      	ldr	r5, [r4, #0]
 8006a3c:	f015 0506 	ands.w	r5, r5, #6
 8006a40:	d106      	bne.n	8006a50 <_printf_common+0x48>
 8006a42:	f104 0a19 	add.w	sl, r4, #25
 8006a46:	68e3      	ldr	r3, [r4, #12]
 8006a48:	6832      	ldr	r2, [r6, #0]
 8006a4a:	1a9b      	subs	r3, r3, r2
 8006a4c:	42ab      	cmp	r3, r5
 8006a4e:	dc26      	bgt.n	8006a9e <_printf_common+0x96>
 8006a50:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006a54:	1e13      	subs	r3, r2, #0
 8006a56:	6822      	ldr	r2, [r4, #0]
 8006a58:	bf18      	it	ne
 8006a5a:	2301      	movne	r3, #1
 8006a5c:	0692      	lsls	r2, r2, #26
 8006a5e:	d42b      	bmi.n	8006ab8 <_printf_common+0xb0>
 8006a60:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006a64:	4649      	mov	r1, r9
 8006a66:	4638      	mov	r0, r7
 8006a68:	47c0      	blx	r8
 8006a6a:	3001      	adds	r0, #1
 8006a6c:	d01e      	beq.n	8006aac <_printf_common+0xa4>
 8006a6e:	6823      	ldr	r3, [r4, #0]
 8006a70:	68e5      	ldr	r5, [r4, #12]
 8006a72:	6832      	ldr	r2, [r6, #0]
 8006a74:	f003 0306 	and.w	r3, r3, #6
 8006a78:	2b04      	cmp	r3, #4
 8006a7a:	bf08      	it	eq
 8006a7c:	1aad      	subeq	r5, r5, r2
 8006a7e:	68a3      	ldr	r3, [r4, #8]
 8006a80:	6922      	ldr	r2, [r4, #16]
 8006a82:	bf0c      	ite	eq
 8006a84:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006a88:	2500      	movne	r5, #0
 8006a8a:	4293      	cmp	r3, r2
 8006a8c:	bfc4      	itt	gt
 8006a8e:	1a9b      	subgt	r3, r3, r2
 8006a90:	18ed      	addgt	r5, r5, r3
 8006a92:	2600      	movs	r6, #0
 8006a94:	341a      	adds	r4, #26
 8006a96:	42b5      	cmp	r5, r6
 8006a98:	d11a      	bne.n	8006ad0 <_printf_common+0xc8>
 8006a9a:	2000      	movs	r0, #0
 8006a9c:	e008      	b.n	8006ab0 <_printf_common+0xa8>
 8006a9e:	2301      	movs	r3, #1
 8006aa0:	4652      	mov	r2, sl
 8006aa2:	4649      	mov	r1, r9
 8006aa4:	4638      	mov	r0, r7
 8006aa6:	47c0      	blx	r8
 8006aa8:	3001      	adds	r0, #1
 8006aaa:	d103      	bne.n	8006ab4 <_printf_common+0xac>
 8006aac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006ab0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ab4:	3501      	adds	r5, #1
 8006ab6:	e7c6      	b.n	8006a46 <_printf_common+0x3e>
 8006ab8:	18e1      	adds	r1, r4, r3
 8006aba:	1c5a      	adds	r2, r3, #1
 8006abc:	2030      	movs	r0, #48	; 0x30
 8006abe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006ac2:	4422      	add	r2, r4
 8006ac4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006ac8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006acc:	3302      	adds	r3, #2
 8006ace:	e7c7      	b.n	8006a60 <_printf_common+0x58>
 8006ad0:	2301      	movs	r3, #1
 8006ad2:	4622      	mov	r2, r4
 8006ad4:	4649      	mov	r1, r9
 8006ad6:	4638      	mov	r0, r7
 8006ad8:	47c0      	blx	r8
 8006ada:	3001      	adds	r0, #1
 8006adc:	d0e6      	beq.n	8006aac <_printf_common+0xa4>
 8006ade:	3601      	adds	r6, #1
 8006ae0:	e7d9      	b.n	8006a96 <_printf_common+0x8e>
	...

08006ae4 <_printf_i>:
 8006ae4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006ae8:	7e0f      	ldrb	r7, [r1, #24]
 8006aea:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006aec:	2f78      	cmp	r7, #120	; 0x78
 8006aee:	4691      	mov	r9, r2
 8006af0:	4680      	mov	r8, r0
 8006af2:	460c      	mov	r4, r1
 8006af4:	469a      	mov	sl, r3
 8006af6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006afa:	d807      	bhi.n	8006b0c <_printf_i+0x28>
 8006afc:	2f62      	cmp	r7, #98	; 0x62
 8006afe:	d80a      	bhi.n	8006b16 <_printf_i+0x32>
 8006b00:	2f00      	cmp	r7, #0
 8006b02:	f000 80d8 	beq.w	8006cb6 <_printf_i+0x1d2>
 8006b06:	2f58      	cmp	r7, #88	; 0x58
 8006b08:	f000 80a3 	beq.w	8006c52 <_printf_i+0x16e>
 8006b0c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006b10:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006b14:	e03a      	b.n	8006b8c <_printf_i+0xa8>
 8006b16:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006b1a:	2b15      	cmp	r3, #21
 8006b1c:	d8f6      	bhi.n	8006b0c <_printf_i+0x28>
 8006b1e:	a101      	add	r1, pc, #4	; (adr r1, 8006b24 <_printf_i+0x40>)
 8006b20:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006b24:	08006b7d 	.word	0x08006b7d
 8006b28:	08006b91 	.word	0x08006b91
 8006b2c:	08006b0d 	.word	0x08006b0d
 8006b30:	08006b0d 	.word	0x08006b0d
 8006b34:	08006b0d 	.word	0x08006b0d
 8006b38:	08006b0d 	.word	0x08006b0d
 8006b3c:	08006b91 	.word	0x08006b91
 8006b40:	08006b0d 	.word	0x08006b0d
 8006b44:	08006b0d 	.word	0x08006b0d
 8006b48:	08006b0d 	.word	0x08006b0d
 8006b4c:	08006b0d 	.word	0x08006b0d
 8006b50:	08006c9d 	.word	0x08006c9d
 8006b54:	08006bc1 	.word	0x08006bc1
 8006b58:	08006c7f 	.word	0x08006c7f
 8006b5c:	08006b0d 	.word	0x08006b0d
 8006b60:	08006b0d 	.word	0x08006b0d
 8006b64:	08006cbf 	.word	0x08006cbf
 8006b68:	08006b0d 	.word	0x08006b0d
 8006b6c:	08006bc1 	.word	0x08006bc1
 8006b70:	08006b0d 	.word	0x08006b0d
 8006b74:	08006b0d 	.word	0x08006b0d
 8006b78:	08006c87 	.word	0x08006c87
 8006b7c:	682b      	ldr	r3, [r5, #0]
 8006b7e:	1d1a      	adds	r2, r3, #4
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	602a      	str	r2, [r5, #0]
 8006b84:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006b88:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006b8c:	2301      	movs	r3, #1
 8006b8e:	e0a3      	b.n	8006cd8 <_printf_i+0x1f4>
 8006b90:	6820      	ldr	r0, [r4, #0]
 8006b92:	6829      	ldr	r1, [r5, #0]
 8006b94:	0606      	lsls	r6, r0, #24
 8006b96:	f101 0304 	add.w	r3, r1, #4
 8006b9a:	d50a      	bpl.n	8006bb2 <_printf_i+0xce>
 8006b9c:	680e      	ldr	r6, [r1, #0]
 8006b9e:	602b      	str	r3, [r5, #0]
 8006ba0:	2e00      	cmp	r6, #0
 8006ba2:	da03      	bge.n	8006bac <_printf_i+0xc8>
 8006ba4:	232d      	movs	r3, #45	; 0x2d
 8006ba6:	4276      	negs	r6, r6
 8006ba8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006bac:	485e      	ldr	r0, [pc, #376]	; (8006d28 <_printf_i+0x244>)
 8006bae:	230a      	movs	r3, #10
 8006bb0:	e019      	b.n	8006be6 <_printf_i+0x102>
 8006bb2:	680e      	ldr	r6, [r1, #0]
 8006bb4:	602b      	str	r3, [r5, #0]
 8006bb6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006bba:	bf18      	it	ne
 8006bbc:	b236      	sxthne	r6, r6
 8006bbe:	e7ef      	b.n	8006ba0 <_printf_i+0xbc>
 8006bc0:	682b      	ldr	r3, [r5, #0]
 8006bc2:	6820      	ldr	r0, [r4, #0]
 8006bc4:	1d19      	adds	r1, r3, #4
 8006bc6:	6029      	str	r1, [r5, #0]
 8006bc8:	0601      	lsls	r1, r0, #24
 8006bca:	d501      	bpl.n	8006bd0 <_printf_i+0xec>
 8006bcc:	681e      	ldr	r6, [r3, #0]
 8006bce:	e002      	b.n	8006bd6 <_printf_i+0xf2>
 8006bd0:	0646      	lsls	r6, r0, #25
 8006bd2:	d5fb      	bpl.n	8006bcc <_printf_i+0xe8>
 8006bd4:	881e      	ldrh	r6, [r3, #0]
 8006bd6:	4854      	ldr	r0, [pc, #336]	; (8006d28 <_printf_i+0x244>)
 8006bd8:	2f6f      	cmp	r7, #111	; 0x6f
 8006bda:	bf0c      	ite	eq
 8006bdc:	2308      	moveq	r3, #8
 8006bde:	230a      	movne	r3, #10
 8006be0:	2100      	movs	r1, #0
 8006be2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006be6:	6865      	ldr	r5, [r4, #4]
 8006be8:	60a5      	str	r5, [r4, #8]
 8006bea:	2d00      	cmp	r5, #0
 8006bec:	bfa2      	ittt	ge
 8006bee:	6821      	ldrge	r1, [r4, #0]
 8006bf0:	f021 0104 	bicge.w	r1, r1, #4
 8006bf4:	6021      	strge	r1, [r4, #0]
 8006bf6:	b90e      	cbnz	r6, 8006bfc <_printf_i+0x118>
 8006bf8:	2d00      	cmp	r5, #0
 8006bfa:	d04d      	beq.n	8006c98 <_printf_i+0x1b4>
 8006bfc:	4615      	mov	r5, r2
 8006bfe:	fbb6 f1f3 	udiv	r1, r6, r3
 8006c02:	fb03 6711 	mls	r7, r3, r1, r6
 8006c06:	5dc7      	ldrb	r7, [r0, r7]
 8006c08:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006c0c:	4637      	mov	r7, r6
 8006c0e:	42bb      	cmp	r3, r7
 8006c10:	460e      	mov	r6, r1
 8006c12:	d9f4      	bls.n	8006bfe <_printf_i+0x11a>
 8006c14:	2b08      	cmp	r3, #8
 8006c16:	d10b      	bne.n	8006c30 <_printf_i+0x14c>
 8006c18:	6823      	ldr	r3, [r4, #0]
 8006c1a:	07de      	lsls	r6, r3, #31
 8006c1c:	d508      	bpl.n	8006c30 <_printf_i+0x14c>
 8006c1e:	6923      	ldr	r3, [r4, #16]
 8006c20:	6861      	ldr	r1, [r4, #4]
 8006c22:	4299      	cmp	r1, r3
 8006c24:	bfde      	ittt	le
 8006c26:	2330      	movle	r3, #48	; 0x30
 8006c28:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006c2c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8006c30:	1b52      	subs	r2, r2, r5
 8006c32:	6122      	str	r2, [r4, #16]
 8006c34:	f8cd a000 	str.w	sl, [sp]
 8006c38:	464b      	mov	r3, r9
 8006c3a:	aa03      	add	r2, sp, #12
 8006c3c:	4621      	mov	r1, r4
 8006c3e:	4640      	mov	r0, r8
 8006c40:	f7ff fee2 	bl	8006a08 <_printf_common>
 8006c44:	3001      	adds	r0, #1
 8006c46:	d14c      	bne.n	8006ce2 <_printf_i+0x1fe>
 8006c48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006c4c:	b004      	add	sp, #16
 8006c4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c52:	4835      	ldr	r0, [pc, #212]	; (8006d28 <_printf_i+0x244>)
 8006c54:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006c58:	6829      	ldr	r1, [r5, #0]
 8006c5a:	6823      	ldr	r3, [r4, #0]
 8006c5c:	f851 6b04 	ldr.w	r6, [r1], #4
 8006c60:	6029      	str	r1, [r5, #0]
 8006c62:	061d      	lsls	r5, r3, #24
 8006c64:	d514      	bpl.n	8006c90 <_printf_i+0x1ac>
 8006c66:	07df      	lsls	r7, r3, #31
 8006c68:	bf44      	itt	mi
 8006c6a:	f043 0320 	orrmi.w	r3, r3, #32
 8006c6e:	6023      	strmi	r3, [r4, #0]
 8006c70:	b91e      	cbnz	r6, 8006c7a <_printf_i+0x196>
 8006c72:	6823      	ldr	r3, [r4, #0]
 8006c74:	f023 0320 	bic.w	r3, r3, #32
 8006c78:	6023      	str	r3, [r4, #0]
 8006c7a:	2310      	movs	r3, #16
 8006c7c:	e7b0      	b.n	8006be0 <_printf_i+0xfc>
 8006c7e:	6823      	ldr	r3, [r4, #0]
 8006c80:	f043 0320 	orr.w	r3, r3, #32
 8006c84:	6023      	str	r3, [r4, #0]
 8006c86:	2378      	movs	r3, #120	; 0x78
 8006c88:	4828      	ldr	r0, [pc, #160]	; (8006d2c <_printf_i+0x248>)
 8006c8a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006c8e:	e7e3      	b.n	8006c58 <_printf_i+0x174>
 8006c90:	0659      	lsls	r1, r3, #25
 8006c92:	bf48      	it	mi
 8006c94:	b2b6      	uxthmi	r6, r6
 8006c96:	e7e6      	b.n	8006c66 <_printf_i+0x182>
 8006c98:	4615      	mov	r5, r2
 8006c9a:	e7bb      	b.n	8006c14 <_printf_i+0x130>
 8006c9c:	682b      	ldr	r3, [r5, #0]
 8006c9e:	6826      	ldr	r6, [r4, #0]
 8006ca0:	6961      	ldr	r1, [r4, #20]
 8006ca2:	1d18      	adds	r0, r3, #4
 8006ca4:	6028      	str	r0, [r5, #0]
 8006ca6:	0635      	lsls	r5, r6, #24
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	d501      	bpl.n	8006cb0 <_printf_i+0x1cc>
 8006cac:	6019      	str	r1, [r3, #0]
 8006cae:	e002      	b.n	8006cb6 <_printf_i+0x1d2>
 8006cb0:	0670      	lsls	r0, r6, #25
 8006cb2:	d5fb      	bpl.n	8006cac <_printf_i+0x1c8>
 8006cb4:	8019      	strh	r1, [r3, #0]
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	6123      	str	r3, [r4, #16]
 8006cba:	4615      	mov	r5, r2
 8006cbc:	e7ba      	b.n	8006c34 <_printf_i+0x150>
 8006cbe:	682b      	ldr	r3, [r5, #0]
 8006cc0:	1d1a      	adds	r2, r3, #4
 8006cc2:	602a      	str	r2, [r5, #0]
 8006cc4:	681d      	ldr	r5, [r3, #0]
 8006cc6:	6862      	ldr	r2, [r4, #4]
 8006cc8:	2100      	movs	r1, #0
 8006cca:	4628      	mov	r0, r5
 8006ccc:	f7f9 fa90 	bl	80001f0 <memchr>
 8006cd0:	b108      	cbz	r0, 8006cd6 <_printf_i+0x1f2>
 8006cd2:	1b40      	subs	r0, r0, r5
 8006cd4:	6060      	str	r0, [r4, #4]
 8006cd6:	6863      	ldr	r3, [r4, #4]
 8006cd8:	6123      	str	r3, [r4, #16]
 8006cda:	2300      	movs	r3, #0
 8006cdc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006ce0:	e7a8      	b.n	8006c34 <_printf_i+0x150>
 8006ce2:	6923      	ldr	r3, [r4, #16]
 8006ce4:	462a      	mov	r2, r5
 8006ce6:	4649      	mov	r1, r9
 8006ce8:	4640      	mov	r0, r8
 8006cea:	47d0      	blx	sl
 8006cec:	3001      	adds	r0, #1
 8006cee:	d0ab      	beq.n	8006c48 <_printf_i+0x164>
 8006cf0:	6823      	ldr	r3, [r4, #0]
 8006cf2:	079b      	lsls	r3, r3, #30
 8006cf4:	d413      	bmi.n	8006d1e <_printf_i+0x23a>
 8006cf6:	68e0      	ldr	r0, [r4, #12]
 8006cf8:	9b03      	ldr	r3, [sp, #12]
 8006cfa:	4298      	cmp	r0, r3
 8006cfc:	bfb8      	it	lt
 8006cfe:	4618      	movlt	r0, r3
 8006d00:	e7a4      	b.n	8006c4c <_printf_i+0x168>
 8006d02:	2301      	movs	r3, #1
 8006d04:	4632      	mov	r2, r6
 8006d06:	4649      	mov	r1, r9
 8006d08:	4640      	mov	r0, r8
 8006d0a:	47d0      	blx	sl
 8006d0c:	3001      	adds	r0, #1
 8006d0e:	d09b      	beq.n	8006c48 <_printf_i+0x164>
 8006d10:	3501      	adds	r5, #1
 8006d12:	68e3      	ldr	r3, [r4, #12]
 8006d14:	9903      	ldr	r1, [sp, #12]
 8006d16:	1a5b      	subs	r3, r3, r1
 8006d18:	42ab      	cmp	r3, r5
 8006d1a:	dcf2      	bgt.n	8006d02 <_printf_i+0x21e>
 8006d1c:	e7eb      	b.n	8006cf6 <_printf_i+0x212>
 8006d1e:	2500      	movs	r5, #0
 8006d20:	f104 0619 	add.w	r6, r4, #25
 8006d24:	e7f5      	b.n	8006d12 <_printf_i+0x22e>
 8006d26:	bf00      	nop
 8006d28:	080092d2 	.word	0x080092d2
 8006d2c:	080092e3 	.word	0x080092e3

08006d30 <siprintf>:
 8006d30:	b40e      	push	{r1, r2, r3}
 8006d32:	b500      	push	{lr}
 8006d34:	b09c      	sub	sp, #112	; 0x70
 8006d36:	ab1d      	add	r3, sp, #116	; 0x74
 8006d38:	9002      	str	r0, [sp, #8]
 8006d3a:	9006      	str	r0, [sp, #24]
 8006d3c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006d40:	4809      	ldr	r0, [pc, #36]	; (8006d68 <siprintf+0x38>)
 8006d42:	9107      	str	r1, [sp, #28]
 8006d44:	9104      	str	r1, [sp, #16]
 8006d46:	4909      	ldr	r1, [pc, #36]	; (8006d6c <siprintf+0x3c>)
 8006d48:	f853 2b04 	ldr.w	r2, [r3], #4
 8006d4c:	9105      	str	r1, [sp, #20]
 8006d4e:	6800      	ldr	r0, [r0, #0]
 8006d50:	9301      	str	r3, [sp, #4]
 8006d52:	a902      	add	r1, sp, #8
 8006d54:	f001 fb76 	bl	8008444 <_svfiprintf_r>
 8006d58:	9b02      	ldr	r3, [sp, #8]
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	701a      	strb	r2, [r3, #0]
 8006d5e:	b01c      	add	sp, #112	; 0x70
 8006d60:	f85d eb04 	ldr.w	lr, [sp], #4
 8006d64:	b003      	add	sp, #12
 8006d66:	4770      	bx	lr
 8006d68:	2000000c 	.word	0x2000000c
 8006d6c:	ffff0208 	.word	0xffff0208

08006d70 <quorem>:
 8006d70:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d74:	6903      	ldr	r3, [r0, #16]
 8006d76:	690c      	ldr	r4, [r1, #16]
 8006d78:	42a3      	cmp	r3, r4
 8006d7a:	4607      	mov	r7, r0
 8006d7c:	f2c0 8081 	blt.w	8006e82 <quorem+0x112>
 8006d80:	3c01      	subs	r4, #1
 8006d82:	f101 0814 	add.w	r8, r1, #20
 8006d86:	f100 0514 	add.w	r5, r0, #20
 8006d8a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006d8e:	9301      	str	r3, [sp, #4]
 8006d90:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006d94:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006d98:	3301      	adds	r3, #1
 8006d9a:	429a      	cmp	r2, r3
 8006d9c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006da0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006da4:	fbb2 f6f3 	udiv	r6, r2, r3
 8006da8:	d331      	bcc.n	8006e0e <quorem+0x9e>
 8006daa:	f04f 0e00 	mov.w	lr, #0
 8006dae:	4640      	mov	r0, r8
 8006db0:	46ac      	mov	ip, r5
 8006db2:	46f2      	mov	sl, lr
 8006db4:	f850 2b04 	ldr.w	r2, [r0], #4
 8006db8:	b293      	uxth	r3, r2
 8006dba:	fb06 e303 	mla	r3, r6, r3, lr
 8006dbe:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006dc2:	b29b      	uxth	r3, r3
 8006dc4:	ebaa 0303 	sub.w	r3, sl, r3
 8006dc8:	f8dc a000 	ldr.w	sl, [ip]
 8006dcc:	0c12      	lsrs	r2, r2, #16
 8006dce:	fa13 f38a 	uxtah	r3, r3, sl
 8006dd2:	fb06 e202 	mla	r2, r6, r2, lr
 8006dd6:	9300      	str	r3, [sp, #0]
 8006dd8:	9b00      	ldr	r3, [sp, #0]
 8006dda:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006dde:	b292      	uxth	r2, r2
 8006de0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006de4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006de8:	f8bd 3000 	ldrh.w	r3, [sp]
 8006dec:	4581      	cmp	r9, r0
 8006dee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006df2:	f84c 3b04 	str.w	r3, [ip], #4
 8006df6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006dfa:	d2db      	bcs.n	8006db4 <quorem+0x44>
 8006dfc:	f855 300b 	ldr.w	r3, [r5, fp]
 8006e00:	b92b      	cbnz	r3, 8006e0e <quorem+0x9e>
 8006e02:	9b01      	ldr	r3, [sp, #4]
 8006e04:	3b04      	subs	r3, #4
 8006e06:	429d      	cmp	r5, r3
 8006e08:	461a      	mov	r2, r3
 8006e0a:	d32e      	bcc.n	8006e6a <quorem+0xfa>
 8006e0c:	613c      	str	r4, [r7, #16]
 8006e0e:	4638      	mov	r0, r7
 8006e10:	f001 f8c4 	bl	8007f9c <__mcmp>
 8006e14:	2800      	cmp	r0, #0
 8006e16:	db24      	blt.n	8006e62 <quorem+0xf2>
 8006e18:	3601      	adds	r6, #1
 8006e1a:	4628      	mov	r0, r5
 8006e1c:	f04f 0c00 	mov.w	ip, #0
 8006e20:	f858 2b04 	ldr.w	r2, [r8], #4
 8006e24:	f8d0 e000 	ldr.w	lr, [r0]
 8006e28:	b293      	uxth	r3, r2
 8006e2a:	ebac 0303 	sub.w	r3, ip, r3
 8006e2e:	0c12      	lsrs	r2, r2, #16
 8006e30:	fa13 f38e 	uxtah	r3, r3, lr
 8006e34:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006e38:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006e3c:	b29b      	uxth	r3, r3
 8006e3e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006e42:	45c1      	cmp	r9, r8
 8006e44:	f840 3b04 	str.w	r3, [r0], #4
 8006e48:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006e4c:	d2e8      	bcs.n	8006e20 <quorem+0xb0>
 8006e4e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006e52:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006e56:	b922      	cbnz	r2, 8006e62 <quorem+0xf2>
 8006e58:	3b04      	subs	r3, #4
 8006e5a:	429d      	cmp	r5, r3
 8006e5c:	461a      	mov	r2, r3
 8006e5e:	d30a      	bcc.n	8006e76 <quorem+0x106>
 8006e60:	613c      	str	r4, [r7, #16]
 8006e62:	4630      	mov	r0, r6
 8006e64:	b003      	add	sp, #12
 8006e66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e6a:	6812      	ldr	r2, [r2, #0]
 8006e6c:	3b04      	subs	r3, #4
 8006e6e:	2a00      	cmp	r2, #0
 8006e70:	d1cc      	bne.n	8006e0c <quorem+0x9c>
 8006e72:	3c01      	subs	r4, #1
 8006e74:	e7c7      	b.n	8006e06 <quorem+0x96>
 8006e76:	6812      	ldr	r2, [r2, #0]
 8006e78:	3b04      	subs	r3, #4
 8006e7a:	2a00      	cmp	r2, #0
 8006e7c:	d1f0      	bne.n	8006e60 <quorem+0xf0>
 8006e7e:	3c01      	subs	r4, #1
 8006e80:	e7eb      	b.n	8006e5a <quorem+0xea>
 8006e82:	2000      	movs	r0, #0
 8006e84:	e7ee      	b.n	8006e64 <quorem+0xf4>
	...

08006e88 <_dtoa_r>:
 8006e88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e8c:	ed2d 8b04 	vpush	{d8-d9}
 8006e90:	ec57 6b10 	vmov	r6, r7, d0
 8006e94:	b093      	sub	sp, #76	; 0x4c
 8006e96:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006e98:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006e9c:	9106      	str	r1, [sp, #24]
 8006e9e:	ee10 aa10 	vmov	sl, s0
 8006ea2:	4604      	mov	r4, r0
 8006ea4:	9209      	str	r2, [sp, #36]	; 0x24
 8006ea6:	930c      	str	r3, [sp, #48]	; 0x30
 8006ea8:	46bb      	mov	fp, r7
 8006eaa:	b975      	cbnz	r5, 8006eca <_dtoa_r+0x42>
 8006eac:	2010      	movs	r0, #16
 8006eae:	f000 fddd 	bl	8007a6c <malloc>
 8006eb2:	4602      	mov	r2, r0
 8006eb4:	6260      	str	r0, [r4, #36]	; 0x24
 8006eb6:	b920      	cbnz	r0, 8006ec2 <_dtoa_r+0x3a>
 8006eb8:	4ba7      	ldr	r3, [pc, #668]	; (8007158 <_dtoa_r+0x2d0>)
 8006eba:	21ea      	movs	r1, #234	; 0xea
 8006ebc:	48a7      	ldr	r0, [pc, #668]	; (800715c <_dtoa_r+0x2d4>)
 8006ebe:	f001 fbd1 	bl	8008664 <__assert_func>
 8006ec2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006ec6:	6005      	str	r5, [r0, #0]
 8006ec8:	60c5      	str	r5, [r0, #12]
 8006eca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006ecc:	6819      	ldr	r1, [r3, #0]
 8006ece:	b151      	cbz	r1, 8006ee6 <_dtoa_r+0x5e>
 8006ed0:	685a      	ldr	r2, [r3, #4]
 8006ed2:	604a      	str	r2, [r1, #4]
 8006ed4:	2301      	movs	r3, #1
 8006ed6:	4093      	lsls	r3, r2
 8006ed8:	608b      	str	r3, [r1, #8]
 8006eda:	4620      	mov	r0, r4
 8006edc:	f000 fe1c 	bl	8007b18 <_Bfree>
 8006ee0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	601a      	str	r2, [r3, #0]
 8006ee6:	1e3b      	subs	r3, r7, #0
 8006ee8:	bfaa      	itet	ge
 8006eea:	2300      	movge	r3, #0
 8006eec:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8006ef0:	f8c8 3000 	strge.w	r3, [r8]
 8006ef4:	4b9a      	ldr	r3, [pc, #616]	; (8007160 <_dtoa_r+0x2d8>)
 8006ef6:	bfbc      	itt	lt
 8006ef8:	2201      	movlt	r2, #1
 8006efa:	f8c8 2000 	strlt.w	r2, [r8]
 8006efe:	ea33 030b 	bics.w	r3, r3, fp
 8006f02:	d11b      	bne.n	8006f3c <_dtoa_r+0xb4>
 8006f04:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006f06:	f242 730f 	movw	r3, #9999	; 0x270f
 8006f0a:	6013      	str	r3, [r2, #0]
 8006f0c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006f10:	4333      	orrs	r3, r6
 8006f12:	f000 8592 	beq.w	8007a3a <_dtoa_r+0xbb2>
 8006f16:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006f18:	b963      	cbnz	r3, 8006f34 <_dtoa_r+0xac>
 8006f1a:	4b92      	ldr	r3, [pc, #584]	; (8007164 <_dtoa_r+0x2dc>)
 8006f1c:	e022      	b.n	8006f64 <_dtoa_r+0xdc>
 8006f1e:	4b92      	ldr	r3, [pc, #584]	; (8007168 <_dtoa_r+0x2e0>)
 8006f20:	9301      	str	r3, [sp, #4]
 8006f22:	3308      	adds	r3, #8
 8006f24:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006f26:	6013      	str	r3, [r2, #0]
 8006f28:	9801      	ldr	r0, [sp, #4]
 8006f2a:	b013      	add	sp, #76	; 0x4c
 8006f2c:	ecbd 8b04 	vpop	{d8-d9}
 8006f30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f34:	4b8b      	ldr	r3, [pc, #556]	; (8007164 <_dtoa_r+0x2dc>)
 8006f36:	9301      	str	r3, [sp, #4]
 8006f38:	3303      	adds	r3, #3
 8006f3a:	e7f3      	b.n	8006f24 <_dtoa_r+0x9c>
 8006f3c:	2200      	movs	r2, #0
 8006f3e:	2300      	movs	r3, #0
 8006f40:	4650      	mov	r0, sl
 8006f42:	4659      	mov	r1, fp
 8006f44:	f7f9 fdc8 	bl	8000ad8 <__aeabi_dcmpeq>
 8006f48:	ec4b ab19 	vmov	d9, sl, fp
 8006f4c:	4680      	mov	r8, r0
 8006f4e:	b158      	cbz	r0, 8006f68 <_dtoa_r+0xe0>
 8006f50:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006f52:	2301      	movs	r3, #1
 8006f54:	6013      	str	r3, [r2, #0]
 8006f56:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	f000 856b 	beq.w	8007a34 <_dtoa_r+0xbac>
 8006f5e:	4883      	ldr	r0, [pc, #524]	; (800716c <_dtoa_r+0x2e4>)
 8006f60:	6018      	str	r0, [r3, #0]
 8006f62:	1e43      	subs	r3, r0, #1
 8006f64:	9301      	str	r3, [sp, #4]
 8006f66:	e7df      	b.n	8006f28 <_dtoa_r+0xa0>
 8006f68:	ec4b ab10 	vmov	d0, sl, fp
 8006f6c:	aa10      	add	r2, sp, #64	; 0x40
 8006f6e:	a911      	add	r1, sp, #68	; 0x44
 8006f70:	4620      	mov	r0, r4
 8006f72:	f001 f8b9 	bl	80080e8 <__d2b>
 8006f76:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8006f7a:	ee08 0a10 	vmov	s16, r0
 8006f7e:	2d00      	cmp	r5, #0
 8006f80:	f000 8084 	beq.w	800708c <_dtoa_r+0x204>
 8006f84:	ee19 3a90 	vmov	r3, s19
 8006f88:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006f8c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8006f90:	4656      	mov	r6, sl
 8006f92:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8006f96:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006f9a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8006f9e:	4b74      	ldr	r3, [pc, #464]	; (8007170 <_dtoa_r+0x2e8>)
 8006fa0:	2200      	movs	r2, #0
 8006fa2:	4630      	mov	r0, r6
 8006fa4:	4639      	mov	r1, r7
 8006fa6:	f7f9 f977 	bl	8000298 <__aeabi_dsub>
 8006faa:	a365      	add	r3, pc, #404	; (adr r3, 8007140 <_dtoa_r+0x2b8>)
 8006fac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fb0:	f7f9 fb2a 	bl	8000608 <__aeabi_dmul>
 8006fb4:	a364      	add	r3, pc, #400	; (adr r3, 8007148 <_dtoa_r+0x2c0>)
 8006fb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fba:	f7f9 f96f 	bl	800029c <__adddf3>
 8006fbe:	4606      	mov	r6, r0
 8006fc0:	4628      	mov	r0, r5
 8006fc2:	460f      	mov	r7, r1
 8006fc4:	f7f9 fab6 	bl	8000534 <__aeabi_i2d>
 8006fc8:	a361      	add	r3, pc, #388	; (adr r3, 8007150 <_dtoa_r+0x2c8>)
 8006fca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fce:	f7f9 fb1b 	bl	8000608 <__aeabi_dmul>
 8006fd2:	4602      	mov	r2, r0
 8006fd4:	460b      	mov	r3, r1
 8006fd6:	4630      	mov	r0, r6
 8006fd8:	4639      	mov	r1, r7
 8006fda:	f7f9 f95f 	bl	800029c <__adddf3>
 8006fde:	4606      	mov	r6, r0
 8006fe0:	460f      	mov	r7, r1
 8006fe2:	f7f9 fdc1 	bl	8000b68 <__aeabi_d2iz>
 8006fe6:	2200      	movs	r2, #0
 8006fe8:	9000      	str	r0, [sp, #0]
 8006fea:	2300      	movs	r3, #0
 8006fec:	4630      	mov	r0, r6
 8006fee:	4639      	mov	r1, r7
 8006ff0:	f7f9 fd7c 	bl	8000aec <__aeabi_dcmplt>
 8006ff4:	b150      	cbz	r0, 800700c <_dtoa_r+0x184>
 8006ff6:	9800      	ldr	r0, [sp, #0]
 8006ff8:	f7f9 fa9c 	bl	8000534 <__aeabi_i2d>
 8006ffc:	4632      	mov	r2, r6
 8006ffe:	463b      	mov	r3, r7
 8007000:	f7f9 fd6a 	bl	8000ad8 <__aeabi_dcmpeq>
 8007004:	b910      	cbnz	r0, 800700c <_dtoa_r+0x184>
 8007006:	9b00      	ldr	r3, [sp, #0]
 8007008:	3b01      	subs	r3, #1
 800700a:	9300      	str	r3, [sp, #0]
 800700c:	9b00      	ldr	r3, [sp, #0]
 800700e:	2b16      	cmp	r3, #22
 8007010:	d85a      	bhi.n	80070c8 <_dtoa_r+0x240>
 8007012:	9a00      	ldr	r2, [sp, #0]
 8007014:	4b57      	ldr	r3, [pc, #348]	; (8007174 <_dtoa_r+0x2ec>)
 8007016:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800701a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800701e:	ec51 0b19 	vmov	r0, r1, d9
 8007022:	f7f9 fd63 	bl	8000aec <__aeabi_dcmplt>
 8007026:	2800      	cmp	r0, #0
 8007028:	d050      	beq.n	80070cc <_dtoa_r+0x244>
 800702a:	9b00      	ldr	r3, [sp, #0]
 800702c:	3b01      	subs	r3, #1
 800702e:	9300      	str	r3, [sp, #0]
 8007030:	2300      	movs	r3, #0
 8007032:	930b      	str	r3, [sp, #44]	; 0x2c
 8007034:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007036:	1b5d      	subs	r5, r3, r5
 8007038:	1e6b      	subs	r3, r5, #1
 800703a:	9305      	str	r3, [sp, #20]
 800703c:	bf45      	ittet	mi
 800703e:	f1c5 0301 	rsbmi	r3, r5, #1
 8007042:	9304      	strmi	r3, [sp, #16]
 8007044:	2300      	movpl	r3, #0
 8007046:	2300      	movmi	r3, #0
 8007048:	bf4c      	ite	mi
 800704a:	9305      	strmi	r3, [sp, #20]
 800704c:	9304      	strpl	r3, [sp, #16]
 800704e:	9b00      	ldr	r3, [sp, #0]
 8007050:	2b00      	cmp	r3, #0
 8007052:	db3d      	blt.n	80070d0 <_dtoa_r+0x248>
 8007054:	9b05      	ldr	r3, [sp, #20]
 8007056:	9a00      	ldr	r2, [sp, #0]
 8007058:	920a      	str	r2, [sp, #40]	; 0x28
 800705a:	4413      	add	r3, r2
 800705c:	9305      	str	r3, [sp, #20]
 800705e:	2300      	movs	r3, #0
 8007060:	9307      	str	r3, [sp, #28]
 8007062:	9b06      	ldr	r3, [sp, #24]
 8007064:	2b09      	cmp	r3, #9
 8007066:	f200 8089 	bhi.w	800717c <_dtoa_r+0x2f4>
 800706a:	2b05      	cmp	r3, #5
 800706c:	bfc4      	itt	gt
 800706e:	3b04      	subgt	r3, #4
 8007070:	9306      	strgt	r3, [sp, #24]
 8007072:	9b06      	ldr	r3, [sp, #24]
 8007074:	f1a3 0302 	sub.w	r3, r3, #2
 8007078:	bfcc      	ite	gt
 800707a:	2500      	movgt	r5, #0
 800707c:	2501      	movle	r5, #1
 800707e:	2b03      	cmp	r3, #3
 8007080:	f200 8087 	bhi.w	8007192 <_dtoa_r+0x30a>
 8007084:	e8df f003 	tbb	[pc, r3]
 8007088:	59383a2d 	.word	0x59383a2d
 800708c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007090:	441d      	add	r5, r3
 8007092:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007096:	2b20      	cmp	r3, #32
 8007098:	bfc1      	itttt	gt
 800709a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800709e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80070a2:	fa0b f303 	lslgt.w	r3, fp, r3
 80070a6:	fa26 f000 	lsrgt.w	r0, r6, r0
 80070aa:	bfda      	itte	le
 80070ac:	f1c3 0320 	rsble	r3, r3, #32
 80070b0:	fa06 f003 	lslle.w	r0, r6, r3
 80070b4:	4318      	orrgt	r0, r3
 80070b6:	f7f9 fa2d 	bl	8000514 <__aeabi_ui2d>
 80070ba:	2301      	movs	r3, #1
 80070bc:	4606      	mov	r6, r0
 80070be:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80070c2:	3d01      	subs	r5, #1
 80070c4:	930e      	str	r3, [sp, #56]	; 0x38
 80070c6:	e76a      	b.n	8006f9e <_dtoa_r+0x116>
 80070c8:	2301      	movs	r3, #1
 80070ca:	e7b2      	b.n	8007032 <_dtoa_r+0x1aa>
 80070cc:	900b      	str	r0, [sp, #44]	; 0x2c
 80070ce:	e7b1      	b.n	8007034 <_dtoa_r+0x1ac>
 80070d0:	9b04      	ldr	r3, [sp, #16]
 80070d2:	9a00      	ldr	r2, [sp, #0]
 80070d4:	1a9b      	subs	r3, r3, r2
 80070d6:	9304      	str	r3, [sp, #16]
 80070d8:	4253      	negs	r3, r2
 80070da:	9307      	str	r3, [sp, #28]
 80070dc:	2300      	movs	r3, #0
 80070de:	930a      	str	r3, [sp, #40]	; 0x28
 80070e0:	e7bf      	b.n	8007062 <_dtoa_r+0x1da>
 80070e2:	2300      	movs	r3, #0
 80070e4:	9308      	str	r3, [sp, #32]
 80070e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	dc55      	bgt.n	8007198 <_dtoa_r+0x310>
 80070ec:	2301      	movs	r3, #1
 80070ee:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80070f2:	461a      	mov	r2, r3
 80070f4:	9209      	str	r2, [sp, #36]	; 0x24
 80070f6:	e00c      	b.n	8007112 <_dtoa_r+0x28a>
 80070f8:	2301      	movs	r3, #1
 80070fa:	e7f3      	b.n	80070e4 <_dtoa_r+0x25c>
 80070fc:	2300      	movs	r3, #0
 80070fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007100:	9308      	str	r3, [sp, #32]
 8007102:	9b00      	ldr	r3, [sp, #0]
 8007104:	4413      	add	r3, r2
 8007106:	9302      	str	r3, [sp, #8]
 8007108:	3301      	adds	r3, #1
 800710a:	2b01      	cmp	r3, #1
 800710c:	9303      	str	r3, [sp, #12]
 800710e:	bfb8      	it	lt
 8007110:	2301      	movlt	r3, #1
 8007112:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007114:	2200      	movs	r2, #0
 8007116:	6042      	str	r2, [r0, #4]
 8007118:	2204      	movs	r2, #4
 800711a:	f102 0614 	add.w	r6, r2, #20
 800711e:	429e      	cmp	r6, r3
 8007120:	6841      	ldr	r1, [r0, #4]
 8007122:	d93d      	bls.n	80071a0 <_dtoa_r+0x318>
 8007124:	4620      	mov	r0, r4
 8007126:	f000 fcb7 	bl	8007a98 <_Balloc>
 800712a:	9001      	str	r0, [sp, #4]
 800712c:	2800      	cmp	r0, #0
 800712e:	d13b      	bne.n	80071a8 <_dtoa_r+0x320>
 8007130:	4b11      	ldr	r3, [pc, #68]	; (8007178 <_dtoa_r+0x2f0>)
 8007132:	4602      	mov	r2, r0
 8007134:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007138:	e6c0      	b.n	8006ebc <_dtoa_r+0x34>
 800713a:	2301      	movs	r3, #1
 800713c:	e7df      	b.n	80070fe <_dtoa_r+0x276>
 800713e:	bf00      	nop
 8007140:	636f4361 	.word	0x636f4361
 8007144:	3fd287a7 	.word	0x3fd287a7
 8007148:	8b60c8b3 	.word	0x8b60c8b3
 800714c:	3fc68a28 	.word	0x3fc68a28
 8007150:	509f79fb 	.word	0x509f79fb
 8007154:	3fd34413 	.word	0x3fd34413
 8007158:	08009301 	.word	0x08009301
 800715c:	08009318 	.word	0x08009318
 8007160:	7ff00000 	.word	0x7ff00000
 8007164:	080092fd 	.word	0x080092fd
 8007168:	080092f4 	.word	0x080092f4
 800716c:	080092d1 	.word	0x080092d1
 8007170:	3ff80000 	.word	0x3ff80000
 8007174:	08009408 	.word	0x08009408
 8007178:	08009373 	.word	0x08009373
 800717c:	2501      	movs	r5, #1
 800717e:	2300      	movs	r3, #0
 8007180:	9306      	str	r3, [sp, #24]
 8007182:	9508      	str	r5, [sp, #32]
 8007184:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007188:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800718c:	2200      	movs	r2, #0
 800718e:	2312      	movs	r3, #18
 8007190:	e7b0      	b.n	80070f4 <_dtoa_r+0x26c>
 8007192:	2301      	movs	r3, #1
 8007194:	9308      	str	r3, [sp, #32]
 8007196:	e7f5      	b.n	8007184 <_dtoa_r+0x2fc>
 8007198:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800719a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800719e:	e7b8      	b.n	8007112 <_dtoa_r+0x28a>
 80071a0:	3101      	adds	r1, #1
 80071a2:	6041      	str	r1, [r0, #4]
 80071a4:	0052      	lsls	r2, r2, #1
 80071a6:	e7b8      	b.n	800711a <_dtoa_r+0x292>
 80071a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80071aa:	9a01      	ldr	r2, [sp, #4]
 80071ac:	601a      	str	r2, [r3, #0]
 80071ae:	9b03      	ldr	r3, [sp, #12]
 80071b0:	2b0e      	cmp	r3, #14
 80071b2:	f200 809d 	bhi.w	80072f0 <_dtoa_r+0x468>
 80071b6:	2d00      	cmp	r5, #0
 80071b8:	f000 809a 	beq.w	80072f0 <_dtoa_r+0x468>
 80071bc:	9b00      	ldr	r3, [sp, #0]
 80071be:	2b00      	cmp	r3, #0
 80071c0:	dd32      	ble.n	8007228 <_dtoa_r+0x3a0>
 80071c2:	4ab7      	ldr	r2, [pc, #732]	; (80074a0 <_dtoa_r+0x618>)
 80071c4:	f003 030f 	and.w	r3, r3, #15
 80071c8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80071cc:	e9d3 8900 	ldrd	r8, r9, [r3]
 80071d0:	9b00      	ldr	r3, [sp, #0]
 80071d2:	05d8      	lsls	r0, r3, #23
 80071d4:	ea4f 1723 	mov.w	r7, r3, asr #4
 80071d8:	d516      	bpl.n	8007208 <_dtoa_r+0x380>
 80071da:	4bb2      	ldr	r3, [pc, #712]	; (80074a4 <_dtoa_r+0x61c>)
 80071dc:	ec51 0b19 	vmov	r0, r1, d9
 80071e0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80071e4:	f7f9 fb3a 	bl	800085c <__aeabi_ddiv>
 80071e8:	f007 070f 	and.w	r7, r7, #15
 80071ec:	4682      	mov	sl, r0
 80071ee:	468b      	mov	fp, r1
 80071f0:	2503      	movs	r5, #3
 80071f2:	4eac      	ldr	r6, [pc, #688]	; (80074a4 <_dtoa_r+0x61c>)
 80071f4:	b957      	cbnz	r7, 800720c <_dtoa_r+0x384>
 80071f6:	4642      	mov	r2, r8
 80071f8:	464b      	mov	r3, r9
 80071fa:	4650      	mov	r0, sl
 80071fc:	4659      	mov	r1, fp
 80071fe:	f7f9 fb2d 	bl	800085c <__aeabi_ddiv>
 8007202:	4682      	mov	sl, r0
 8007204:	468b      	mov	fp, r1
 8007206:	e028      	b.n	800725a <_dtoa_r+0x3d2>
 8007208:	2502      	movs	r5, #2
 800720a:	e7f2      	b.n	80071f2 <_dtoa_r+0x36a>
 800720c:	07f9      	lsls	r1, r7, #31
 800720e:	d508      	bpl.n	8007222 <_dtoa_r+0x39a>
 8007210:	4640      	mov	r0, r8
 8007212:	4649      	mov	r1, r9
 8007214:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007218:	f7f9 f9f6 	bl	8000608 <__aeabi_dmul>
 800721c:	3501      	adds	r5, #1
 800721e:	4680      	mov	r8, r0
 8007220:	4689      	mov	r9, r1
 8007222:	107f      	asrs	r7, r7, #1
 8007224:	3608      	adds	r6, #8
 8007226:	e7e5      	b.n	80071f4 <_dtoa_r+0x36c>
 8007228:	f000 809b 	beq.w	8007362 <_dtoa_r+0x4da>
 800722c:	9b00      	ldr	r3, [sp, #0]
 800722e:	4f9d      	ldr	r7, [pc, #628]	; (80074a4 <_dtoa_r+0x61c>)
 8007230:	425e      	negs	r6, r3
 8007232:	4b9b      	ldr	r3, [pc, #620]	; (80074a0 <_dtoa_r+0x618>)
 8007234:	f006 020f 	and.w	r2, r6, #15
 8007238:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800723c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007240:	ec51 0b19 	vmov	r0, r1, d9
 8007244:	f7f9 f9e0 	bl	8000608 <__aeabi_dmul>
 8007248:	1136      	asrs	r6, r6, #4
 800724a:	4682      	mov	sl, r0
 800724c:	468b      	mov	fp, r1
 800724e:	2300      	movs	r3, #0
 8007250:	2502      	movs	r5, #2
 8007252:	2e00      	cmp	r6, #0
 8007254:	d17a      	bne.n	800734c <_dtoa_r+0x4c4>
 8007256:	2b00      	cmp	r3, #0
 8007258:	d1d3      	bne.n	8007202 <_dtoa_r+0x37a>
 800725a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800725c:	2b00      	cmp	r3, #0
 800725e:	f000 8082 	beq.w	8007366 <_dtoa_r+0x4de>
 8007262:	4b91      	ldr	r3, [pc, #580]	; (80074a8 <_dtoa_r+0x620>)
 8007264:	2200      	movs	r2, #0
 8007266:	4650      	mov	r0, sl
 8007268:	4659      	mov	r1, fp
 800726a:	f7f9 fc3f 	bl	8000aec <__aeabi_dcmplt>
 800726e:	2800      	cmp	r0, #0
 8007270:	d079      	beq.n	8007366 <_dtoa_r+0x4de>
 8007272:	9b03      	ldr	r3, [sp, #12]
 8007274:	2b00      	cmp	r3, #0
 8007276:	d076      	beq.n	8007366 <_dtoa_r+0x4de>
 8007278:	9b02      	ldr	r3, [sp, #8]
 800727a:	2b00      	cmp	r3, #0
 800727c:	dd36      	ble.n	80072ec <_dtoa_r+0x464>
 800727e:	9b00      	ldr	r3, [sp, #0]
 8007280:	4650      	mov	r0, sl
 8007282:	4659      	mov	r1, fp
 8007284:	1e5f      	subs	r7, r3, #1
 8007286:	2200      	movs	r2, #0
 8007288:	4b88      	ldr	r3, [pc, #544]	; (80074ac <_dtoa_r+0x624>)
 800728a:	f7f9 f9bd 	bl	8000608 <__aeabi_dmul>
 800728e:	9e02      	ldr	r6, [sp, #8]
 8007290:	4682      	mov	sl, r0
 8007292:	468b      	mov	fp, r1
 8007294:	3501      	adds	r5, #1
 8007296:	4628      	mov	r0, r5
 8007298:	f7f9 f94c 	bl	8000534 <__aeabi_i2d>
 800729c:	4652      	mov	r2, sl
 800729e:	465b      	mov	r3, fp
 80072a0:	f7f9 f9b2 	bl	8000608 <__aeabi_dmul>
 80072a4:	4b82      	ldr	r3, [pc, #520]	; (80074b0 <_dtoa_r+0x628>)
 80072a6:	2200      	movs	r2, #0
 80072a8:	f7f8 fff8 	bl	800029c <__adddf3>
 80072ac:	46d0      	mov	r8, sl
 80072ae:	46d9      	mov	r9, fp
 80072b0:	4682      	mov	sl, r0
 80072b2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80072b6:	2e00      	cmp	r6, #0
 80072b8:	d158      	bne.n	800736c <_dtoa_r+0x4e4>
 80072ba:	4b7e      	ldr	r3, [pc, #504]	; (80074b4 <_dtoa_r+0x62c>)
 80072bc:	2200      	movs	r2, #0
 80072be:	4640      	mov	r0, r8
 80072c0:	4649      	mov	r1, r9
 80072c2:	f7f8 ffe9 	bl	8000298 <__aeabi_dsub>
 80072c6:	4652      	mov	r2, sl
 80072c8:	465b      	mov	r3, fp
 80072ca:	4680      	mov	r8, r0
 80072cc:	4689      	mov	r9, r1
 80072ce:	f7f9 fc2b 	bl	8000b28 <__aeabi_dcmpgt>
 80072d2:	2800      	cmp	r0, #0
 80072d4:	f040 8295 	bne.w	8007802 <_dtoa_r+0x97a>
 80072d8:	4652      	mov	r2, sl
 80072da:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80072de:	4640      	mov	r0, r8
 80072e0:	4649      	mov	r1, r9
 80072e2:	f7f9 fc03 	bl	8000aec <__aeabi_dcmplt>
 80072e6:	2800      	cmp	r0, #0
 80072e8:	f040 8289 	bne.w	80077fe <_dtoa_r+0x976>
 80072ec:	ec5b ab19 	vmov	sl, fp, d9
 80072f0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	f2c0 8148 	blt.w	8007588 <_dtoa_r+0x700>
 80072f8:	9a00      	ldr	r2, [sp, #0]
 80072fa:	2a0e      	cmp	r2, #14
 80072fc:	f300 8144 	bgt.w	8007588 <_dtoa_r+0x700>
 8007300:	4b67      	ldr	r3, [pc, #412]	; (80074a0 <_dtoa_r+0x618>)
 8007302:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007306:	e9d3 8900 	ldrd	r8, r9, [r3]
 800730a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800730c:	2b00      	cmp	r3, #0
 800730e:	f280 80d5 	bge.w	80074bc <_dtoa_r+0x634>
 8007312:	9b03      	ldr	r3, [sp, #12]
 8007314:	2b00      	cmp	r3, #0
 8007316:	f300 80d1 	bgt.w	80074bc <_dtoa_r+0x634>
 800731a:	f040 826f 	bne.w	80077fc <_dtoa_r+0x974>
 800731e:	4b65      	ldr	r3, [pc, #404]	; (80074b4 <_dtoa_r+0x62c>)
 8007320:	2200      	movs	r2, #0
 8007322:	4640      	mov	r0, r8
 8007324:	4649      	mov	r1, r9
 8007326:	f7f9 f96f 	bl	8000608 <__aeabi_dmul>
 800732a:	4652      	mov	r2, sl
 800732c:	465b      	mov	r3, fp
 800732e:	f7f9 fbf1 	bl	8000b14 <__aeabi_dcmpge>
 8007332:	9e03      	ldr	r6, [sp, #12]
 8007334:	4637      	mov	r7, r6
 8007336:	2800      	cmp	r0, #0
 8007338:	f040 8245 	bne.w	80077c6 <_dtoa_r+0x93e>
 800733c:	9d01      	ldr	r5, [sp, #4]
 800733e:	2331      	movs	r3, #49	; 0x31
 8007340:	f805 3b01 	strb.w	r3, [r5], #1
 8007344:	9b00      	ldr	r3, [sp, #0]
 8007346:	3301      	adds	r3, #1
 8007348:	9300      	str	r3, [sp, #0]
 800734a:	e240      	b.n	80077ce <_dtoa_r+0x946>
 800734c:	07f2      	lsls	r2, r6, #31
 800734e:	d505      	bpl.n	800735c <_dtoa_r+0x4d4>
 8007350:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007354:	f7f9 f958 	bl	8000608 <__aeabi_dmul>
 8007358:	3501      	adds	r5, #1
 800735a:	2301      	movs	r3, #1
 800735c:	1076      	asrs	r6, r6, #1
 800735e:	3708      	adds	r7, #8
 8007360:	e777      	b.n	8007252 <_dtoa_r+0x3ca>
 8007362:	2502      	movs	r5, #2
 8007364:	e779      	b.n	800725a <_dtoa_r+0x3d2>
 8007366:	9f00      	ldr	r7, [sp, #0]
 8007368:	9e03      	ldr	r6, [sp, #12]
 800736a:	e794      	b.n	8007296 <_dtoa_r+0x40e>
 800736c:	9901      	ldr	r1, [sp, #4]
 800736e:	4b4c      	ldr	r3, [pc, #304]	; (80074a0 <_dtoa_r+0x618>)
 8007370:	4431      	add	r1, r6
 8007372:	910d      	str	r1, [sp, #52]	; 0x34
 8007374:	9908      	ldr	r1, [sp, #32]
 8007376:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800737a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800737e:	2900      	cmp	r1, #0
 8007380:	d043      	beq.n	800740a <_dtoa_r+0x582>
 8007382:	494d      	ldr	r1, [pc, #308]	; (80074b8 <_dtoa_r+0x630>)
 8007384:	2000      	movs	r0, #0
 8007386:	f7f9 fa69 	bl	800085c <__aeabi_ddiv>
 800738a:	4652      	mov	r2, sl
 800738c:	465b      	mov	r3, fp
 800738e:	f7f8 ff83 	bl	8000298 <__aeabi_dsub>
 8007392:	9d01      	ldr	r5, [sp, #4]
 8007394:	4682      	mov	sl, r0
 8007396:	468b      	mov	fp, r1
 8007398:	4649      	mov	r1, r9
 800739a:	4640      	mov	r0, r8
 800739c:	f7f9 fbe4 	bl	8000b68 <__aeabi_d2iz>
 80073a0:	4606      	mov	r6, r0
 80073a2:	f7f9 f8c7 	bl	8000534 <__aeabi_i2d>
 80073a6:	4602      	mov	r2, r0
 80073a8:	460b      	mov	r3, r1
 80073aa:	4640      	mov	r0, r8
 80073ac:	4649      	mov	r1, r9
 80073ae:	f7f8 ff73 	bl	8000298 <__aeabi_dsub>
 80073b2:	3630      	adds	r6, #48	; 0x30
 80073b4:	f805 6b01 	strb.w	r6, [r5], #1
 80073b8:	4652      	mov	r2, sl
 80073ba:	465b      	mov	r3, fp
 80073bc:	4680      	mov	r8, r0
 80073be:	4689      	mov	r9, r1
 80073c0:	f7f9 fb94 	bl	8000aec <__aeabi_dcmplt>
 80073c4:	2800      	cmp	r0, #0
 80073c6:	d163      	bne.n	8007490 <_dtoa_r+0x608>
 80073c8:	4642      	mov	r2, r8
 80073ca:	464b      	mov	r3, r9
 80073cc:	4936      	ldr	r1, [pc, #216]	; (80074a8 <_dtoa_r+0x620>)
 80073ce:	2000      	movs	r0, #0
 80073d0:	f7f8 ff62 	bl	8000298 <__aeabi_dsub>
 80073d4:	4652      	mov	r2, sl
 80073d6:	465b      	mov	r3, fp
 80073d8:	f7f9 fb88 	bl	8000aec <__aeabi_dcmplt>
 80073dc:	2800      	cmp	r0, #0
 80073de:	f040 80b5 	bne.w	800754c <_dtoa_r+0x6c4>
 80073e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80073e4:	429d      	cmp	r5, r3
 80073e6:	d081      	beq.n	80072ec <_dtoa_r+0x464>
 80073e8:	4b30      	ldr	r3, [pc, #192]	; (80074ac <_dtoa_r+0x624>)
 80073ea:	2200      	movs	r2, #0
 80073ec:	4650      	mov	r0, sl
 80073ee:	4659      	mov	r1, fp
 80073f0:	f7f9 f90a 	bl	8000608 <__aeabi_dmul>
 80073f4:	4b2d      	ldr	r3, [pc, #180]	; (80074ac <_dtoa_r+0x624>)
 80073f6:	4682      	mov	sl, r0
 80073f8:	468b      	mov	fp, r1
 80073fa:	4640      	mov	r0, r8
 80073fc:	4649      	mov	r1, r9
 80073fe:	2200      	movs	r2, #0
 8007400:	f7f9 f902 	bl	8000608 <__aeabi_dmul>
 8007404:	4680      	mov	r8, r0
 8007406:	4689      	mov	r9, r1
 8007408:	e7c6      	b.n	8007398 <_dtoa_r+0x510>
 800740a:	4650      	mov	r0, sl
 800740c:	4659      	mov	r1, fp
 800740e:	f7f9 f8fb 	bl	8000608 <__aeabi_dmul>
 8007412:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007414:	9d01      	ldr	r5, [sp, #4]
 8007416:	930f      	str	r3, [sp, #60]	; 0x3c
 8007418:	4682      	mov	sl, r0
 800741a:	468b      	mov	fp, r1
 800741c:	4649      	mov	r1, r9
 800741e:	4640      	mov	r0, r8
 8007420:	f7f9 fba2 	bl	8000b68 <__aeabi_d2iz>
 8007424:	4606      	mov	r6, r0
 8007426:	f7f9 f885 	bl	8000534 <__aeabi_i2d>
 800742a:	3630      	adds	r6, #48	; 0x30
 800742c:	4602      	mov	r2, r0
 800742e:	460b      	mov	r3, r1
 8007430:	4640      	mov	r0, r8
 8007432:	4649      	mov	r1, r9
 8007434:	f7f8 ff30 	bl	8000298 <__aeabi_dsub>
 8007438:	f805 6b01 	strb.w	r6, [r5], #1
 800743c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800743e:	429d      	cmp	r5, r3
 8007440:	4680      	mov	r8, r0
 8007442:	4689      	mov	r9, r1
 8007444:	f04f 0200 	mov.w	r2, #0
 8007448:	d124      	bne.n	8007494 <_dtoa_r+0x60c>
 800744a:	4b1b      	ldr	r3, [pc, #108]	; (80074b8 <_dtoa_r+0x630>)
 800744c:	4650      	mov	r0, sl
 800744e:	4659      	mov	r1, fp
 8007450:	f7f8 ff24 	bl	800029c <__adddf3>
 8007454:	4602      	mov	r2, r0
 8007456:	460b      	mov	r3, r1
 8007458:	4640      	mov	r0, r8
 800745a:	4649      	mov	r1, r9
 800745c:	f7f9 fb64 	bl	8000b28 <__aeabi_dcmpgt>
 8007460:	2800      	cmp	r0, #0
 8007462:	d173      	bne.n	800754c <_dtoa_r+0x6c4>
 8007464:	4652      	mov	r2, sl
 8007466:	465b      	mov	r3, fp
 8007468:	4913      	ldr	r1, [pc, #76]	; (80074b8 <_dtoa_r+0x630>)
 800746a:	2000      	movs	r0, #0
 800746c:	f7f8 ff14 	bl	8000298 <__aeabi_dsub>
 8007470:	4602      	mov	r2, r0
 8007472:	460b      	mov	r3, r1
 8007474:	4640      	mov	r0, r8
 8007476:	4649      	mov	r1, r9
 8007478:	f7f9 fb38 	bl	8000aec <__aeabi_dcmplt>
 800747c:	2800      	cmp	r0, #0
 800747e:	f43f af35 	beq.w	80072ec <_dtoa_r+0x464>
 8007482:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007484:	1e6b      	subs	r3, r5, #1
 8007486:	930f      	str	r3, [sp, #60]	; 0x3c
 8007488:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800748c:	2b30      	cmp	r3, #48	; 0x30
 800748e:	d0f8      	beq.n	8007482 <_dtoa_r+0x5fa>
 8007490:	9700      	str	r7, [sp, #0]
 8007492:	e049      	b.n	8007528 <_dtoa_r+0x6a0>
 8007494:	4b05      	ldr	r3, [pc, #20]	; (80074ac <_dtoa_r+0x624>)
 8007496:	f7f9 f8b7 	bl	8000608 <__aeabi_dmul>
 800749a:	4680      	mov	r8, r0
 800749c:	4689      	mov	r9, r1
 800749e:	e7bd      	b.n	800741c <_dtoa_r+0x594>
 80074a0:	08009408 	.word	0x08009408
 80074a4:	080093e0 	.word	0x080093e0
 80074a8:	3ff00000 	.word	0x3ff00000
 80074ac:	40240000 	.word	0x40240000
 80074b0:	401c0000 	.word	0x401c0000
 80074b4:	40140000 	.word	0x40140000
 80074b8:	3fe00000 	.word	0x3fe00000
 80074bc:	9d01      	ldr	r5, [sp, #4]
 80074be:	4656      	mov	r6, sl
 80074c0:	465f      	mov	r7, fp
 80074c2:	4642      	mov	r2, r8
 80074c4:	464b      	mov	r3, r9
 80074c6:	4630      	mov	r0, r6
 80074c8:	4639      	mov	r1, r7
 80074ca:	f7f9 f9c7 	bl	800085c <__aeabi_ddiv>
 80074ce:	f7f9 fb4b 	bl	8000b68 <__aeabi_d2iz>
 80074d2:	4682      	mov	sl, r0
 80074d4:	f7f9 f82e 	bl	8000534 <__aeabi_i2d>
 80074d8:	4642      	mov	r2, r8
 80074da:	464b      	mov	r3, r9
 80074dc:	f7f9 f894 	bl	8000608 <__aeabi_dmul>
 80074e0:	4602      	mov	r2, r0
 80074e2:	460b      	mov	r3, r1
 80074e4:	4630      	mov	r0, r6
 80074e6:	4639      	mov	r1, r7
 80074e8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80074ec:	f7f8 fed4 	bl	8000298 <__aeabi_dsub>
 80074f0:	f805 6b01 	strb.w	r6, [r5], #1
 80074f4:	9e01      	ldr	r6, [sp, #4]
 80074f6:	9f03      	ldr	r7, [sp, #12]
 80074f8:	1bae      	subs	r6, r5, r6
 80074fa:	42b7      	cmp	r7, r6
 80074fc:	4602      	mov	r2, r0
 80074fe:	460b      	mov	r3, r1
 8007500:	d135      	bne.n	800756e <_dtoa_r+0x6e6>
 8007502:	f7f8 fecb 	bl	800029c <__adddf3>
 8007506:	4642      	mov	r2, r8
 8007508:	464b      	mov	r3, r9
 800750a:	4606      	mov	r6, r0
 800750c:	460f      	mov	r7, r1
 800750e:	f7f9 fb0b 	bl	8000b28 <__aeabi_dcmpgt>
 8007512:	b9d0      	cbnz	r0, 800754a <_dtoa_r+0x6c2>
 8007514:	4642      	mov	r2, r8
 8007516:	464b      	mov	r3, r9
 8007518:	4630      	mov	r0, r6
 800751a:	4639      	mov	r1, r7
 800751c:	f7f9 fadc 	bl	8000ad8 <__aeabi_dcmpeq>
 8007520:	b110      	cbz	r0, 8007528 <_dtoa_r+0x6a0>
 8007522:	f01a 0f01 	tst.w	sl, #1
 8007526:	d110      	bne.n	800754a <_dtoa_r+0x6c2>
 8007528:	4620      	mov	r0, r4
 800752a:	ee18 1a10 	vmov	r1, s16
 800752e:	f000 faf3 	bl	8007b18 <_Bfree>
 8007532:	2300      	movs	r3, #0
 8007534:	9800      	ldr	r0, [sp, #0]
 8007536:	702b      	strb	r3, [r5, #0]
 8007538:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800753a:	3001      	adds	r0, #1
 800753c:	6018      	str	r0, [r3, #0]
 800753e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007540:	2b00      	cmp	r3, #0
 8007542:	f43f acf1 	beq.w	8006f28 <_dtoa_r+0xa0>
 8007546:	601d      	str	r5, [r3, #0]
 8007548:	e4ee      	b.n	8006f28 <_dtoa_r+0xa0>
 800754a:	9f00      	ldr	r7, [sp, #0]
 800754c:	462b      	mov	r3, r5
 800754e:	461d      	mov	r5, r3
 8007550:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007554:	2a39      	cmp	r2, #57	; 0x39
 8007556:	d106      	bne.n	8007566 <_dtoa_r+0x6de>
 8007558:	9a01      	ldr	r2, [sp, #4]
 800755a:	429a      	cmp	r2, r3
 800755c:	d1f7      	bne.n	800754e <_dtoa_r+0x6c6>
 800755e:	9901      	ldr	r1, [sp, #4]
 8007560:	2230      	movs	r2, #48	; 0x30
 8007562:	3701      	adds	r7, #1
 8007564:	700a      	strb	r2, [r1, #0]
 8007566:	781a      	ldrb	r2, [r3, #0]
 8007568:	3201      	adds	r2, #1
 800756a:	701a      	strb	r2, [r3, #0]
 800756c:	e790      	b.n	8007490 <_dtoa_r+0x608>
 800756e:	4ba6      	ldr	r3, [pc, #664]	; (8007808 <_dtoa_r+0x980>)
 8007570:	2200      	movs	r2, #0
 8007572:	f7f9 f849 	bl	8000608 <__aeabi_dmul>
 8007576:	2200      	movs	r2, #0
 8007578:	2300      	movs	r3, #0
 800757a:	4606      	mov	r6, r0
 800757c:	460f      	mov	r7, r1
 800757e:	f7f9 faab 	bl	8000ad8 <__aeabi_dcmpeq>
 8007582:	2800      	cmp	r0, #0
 8007584:	d09d      	beq.n	80074c2 <_dtoa_r+0x63a>
 8007586:	e7cf      	b.n	8007528 <_dtoa_r+0x6a0>
 8007588:	9a08      	ldr	r2, [sp, #32]
 800758a:	2a00      	cmp	r2, #0
 800758c:	f000 80d7 	beq.w	800773e <_dtoa_r+0x8b6>
 8007590:	9a06      	ldr	r2, [sp, #24]
 8007592:	2a01      	cmp	r2, #1
 8007594:	f300 80ba 	bgt.w	800770c <_dtoa_r+0x884>
 8007598:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800759a:	2a00      	cmp	r2, #0
 800759c:	f000 80b2 	beq.w	8007704 <_dtoa_r+0x87c>
 80075a0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80075a4:	9e07      	ldr	r6, [sp, #28]
 80075a6:	9d04      	ldr	r5, [sp, #16]
 80075a8:	9a04      	ldr	r2, [sp, #16]
 80075aa:	441a      	add	r2, r3
 80075ac:	9204      	str	r2, [sp, #16]
 80075ae:	9a05      	ldr	r2, [sp, #20]
 80075b0:	2101      	movs	r1, #1
 80075b2:	441a      	add	r2, r3
 80075b4:	4620      	mov	r0, r4
 80075b6:	9205      	str	r2, [sp, #20]
 80075b8:	f000 fb66 	bl	8007c88 <__i2b>
 80075bc:	4607      	mov	r7, r0
 80075be:	2d00      	cmp	r5, #0
 80075c0:	dd0c      	ble.n	80075dc <_dtoa_r+0x754>
 80075c2:	9b05      	ldr	r3, [sp, #20]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	dd09      	ble.n	80075dc <_dtoa_r+0x754>
 80075c8:	42ab      	cmp	r3, r5
 80075ca:	9a04      	ldr	r2, [sp, #16]
 80075cc:	bfa8      	it	ge
 80075ce:	462b      	movge	r3, r5
 80075d0:	1ad2      	subs	r2, r2, r3
 80075d2:	9204      	str	r2, [sp, #16]
 80075d4:	9a05      	ldr	r2, [sp, #20]
 80075d6:	1aed      	subs	r5, r5, r3
 80075d8:	1ad3      	subs	r3, r2, r3
 80075da:	9305      	str	r3, [sp, #20]
 80075dc:	9b07      	ldr	r3, [sp, #28]
 80075de:	b31b      	cbz	r3, 8007628 <_dtoa_r+0x7a0>
 80075e0:	9b08      	ldr	r3, [sp, #32]
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	f000 80af 	beq.w	8007746 <_dtoa_r+0x8be>
 80075e8:	2e00      	cmp	r6, #0
 80075ea:	dd13      	ble.n	8007614 <_dtoa_r+0x78c>
 80075ec:	4639      	mov	r1, r7
 80075ee:	4632      	mov	r2, r6
 80075f0:	4620      	mov	r0, r4
 80075f2:	f000 fc09 	bl	8007e08 <__pow5mult>
 80075f6:	ee18 2a10 	vmov	r2, s16
 80075fa:	4601      	mov	r1, r0
 80075fc:	4607      	mov	r7, r0
 80075fe:	4620      	mov	r0, r4
 8007600:	f000 fb58 	bl	8007cb4 <__multiply>
 8007604:	ee18 1a10 	vmov	r1, s16
 8007608:	4680      	mov	r8, r0
 800760a:	4620      	mov	r0, r4
 800760c:	f000 fa84 	bl	8007b18 <_Bfree>
 8007610:	ee08 8a10 	vmov	s16, r8
 8007614:	9b07      	ldr	r3, [sp, #28]
 8007616:	1b9a      	subs	r2, r3, r6
 8007618:	d006      	beq.n	8007628 <_dtoa_r+0x7a0>
 800761a:	ee18 1a10 	vmov	r1, s16
 800761e:	4620      	mov	r0, r4
 8007620:	f000 fbf2 	bl	8007e08 <__pow5mult>
 8007624:	ee08 0a10 	vmov	s16, r0
 8007628:	2101      	movs	r1, #1
 800762a:	4620      	mov	r0, r4
 800762c:	f000 fb2c 	bl	8007c88 <__i2b>
 8007630:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007632:	2b00      	cmp	r3, #0
 8007634:	4606      	mov	r6, r0
 8007636:	f340 8088 	ble.w	800774a <_dtoa_r+0x8c2>
 800763a:	461a      	mov	r2, r3
 800763c:	4601      	mov	r1, r0
 800763e:	4620      	mov	r0, r4
 8007640:	f000 fbe2 	bl	8007e08 <__pow5mult>
 8007644:	9b06      	ldr	r3, [sp, #24]
 8007646:	2b01      	cmp	r3, #1
 8007648:	4606      	mov	r6, r0
 800764a:	f340 8081 	ble.w	8007750 <_dtoa_r+0x8c8>
 800764e:	f04f 0800 	mov.w	r8, #0
 8007652:	6933      	ldr	r3, [r6, #16]
 8007654:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007658:	6918      	ldr	r0, [r3, #16]
 800765a:	f000 fac5 	bl	8007be8 <__hi0bits>
 800765e:	f1c0 0020 	rsb	r0, r0, #32
 8007662:	9b05      	ldr	r3, [sp, #20]
 8007664:	4418      	add	r0, r3
 8007666:	f010 001f 	ands.w	r0, r0, #31
 800766a:	f000 8092 	beq.w	8007792 <_dtoa_r+0x90a>
 800766e:	f1c0 0320 	rsb	r3, r0, #32
 8007672:	2b04      	cmp	r3, #4
 8007674:	f340 808a 	ble.w	800778c <_dtoa_r+0x904>
 8007678:	f1c0 001c 	rsb	r0, r0, #28
 800767c:	9b04      	ldr	r3, [sp, #16]
 800767e:	4403      	add	r3, r0
 8007680:	9304      	str	r3, [sp, #16]
 8007682:	9b05      	ldr	r3, [sp, #20]
 8007684:	4403      	add	r3, r0
 8007686:	4405      	add	r5, r0
 8007688:	9305      	str	r3, [sp, #20]
 800768a:	9b04      	ldr	r3, [sp, #16]
 800768c:	2b00      	cmp	r3, #0
 800768e:	dd07      	ble.n	80076a0 <_dtoa_r+0x818>
 8007690:	ee18 1a10 	vmov	r1, s16
 8007694:	461a      	mov	r2, r3
 8007696:	4620      	mov	r0, r4
 8007698:	f000 fc10 	bl	8007ebc <__lshift>
 800769c:	ee08 0a10 	vmov	s16, r0
 80076a0:	9b05      	ldr	r3, [sp, #20]
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	dd05      	ble.n	80076b2 <_dtoa_r+0x82a>
 80076a6:	4631      	mov	r1, r6
 80076a8:	461a      	mov	r2, r3
 80076aa:	4620      	mov	r0, r4
 80076ac:	f000 fc06 	bl	8007ebc <__lshift>
 80076b0:	4606      	mov	r6, r0
 80076b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d06e      	beq.n	8007796 <_dtoa_r+0x90e>
 80076b8:	ee18 0a10 	vmov	r0, s16
 80076bc:	4631      	mov	r1, r6
 80076be:	f000 fc6d 	bl	8007f9c <__mcmp>
 80076c2:	2800      	cmp	r0, #0
 80076c4:	da67      	bge.n	8007796 <_dtoa_r+0x90e>
 80076c6:	9b00      	ldr	r3, [sp, #0]
 80076c8:	3b01      	subs	r3, #1
 80076ca:	ee18 1a10 	vmov	r1, s16
 80076ce:	9300      	str	r3, [sp, #0]
 80076d0:	220a      	movs	r2, #10
 80076d2:	2300      	movs	r3, #0
 80076d4:	4620      	mov	r0, r4
 80076d6:	f000 fa41 	bl	8007b5c <__multadd>
 80076da:	9b08      	ldr	r3, [sp, #32]
 80076dc:	ee08 0a10 	vmov	s16, r0
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	f000 81b1 	beq.w	8007a48 <_dtoa_r+0xbc0>
 80076e6:	2300      	movs	r3, #0
 80076e8:	4639      	mov	r1, r7
 80076ea:	220a      	movs	r2, #10
 80076ec:	4620      	mov	r0, r4
 80076ee:	f000 fa35 	bl	8007b5c <__multadd>
 80076f2:	9b02      	ldr	r3, [sp, #8]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	4607      	mov	r7, r0
 80076f8:	f300 808e 	bgt.w	8007818 <_dtoa_r+0x990>
 80076fc:	9b06      	ldr	r3, [sp, #24]
 80076fe:	2b02      	cmp	r3, #2
 8007700:	dc51      	bgt.n	80077a6 <_dtoa_r+0x91e>
 8007702:	e089      	b.n	8007818 <_dtoa_r+0x990>
 8007704:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007706:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800770a:	e74b      	b.n	80075a4 <_dtoa_r+0x71c>
 800770c:	9b03      	ldr	r3, [sp, #12]
 800770e:	1e5e      	subs	r6, r3, #1
 8007710:	9b07      	ldr	r3, [sp, #28]
 8007712:	42b3      	cmp	r3, r6
 8007714:	bfbf      	itttt	lt
 8007716:	9b07      	ldrlt	r3, [sp, #28]
 8007718:	9607      	strlt	r6, [sp, #28]
 800771a:	1af2      	sublt	r2, r6, r3
 800771c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800771e:	bfb6      	itet	lt
 8007720:	189b      	addlt	r3, r3, r2
 8007722:	1b9e      	subge	r6, r3, r6
 8007724:	930a      	strlt	r3, [sp, #40]	; 0x28
 8007726:	9b03      	ldr	r3, [sp, #12]
 8007728:	bfb8      	it	lt
 800772a:	2600      	movlt	r6, #0
 800772c:	2b00      	cmp	r3, #0
 800772e:	bfb7      	itett	lt
 8007730:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8007734:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8007738:	1a9d      	sublt	r5, r3, r2
 800773a:	2300      	movlt	r3, #0
 800773c:	e734      	b.n	80075a8 <_dtoa_r+0x720>
 800773e:	9e07      	ldr	r6, [sp, #28]
 8007740:	9d04      	ldr	r5, [sp, #16]
 8007742:	9f08      	ldr	r7, [sp, #32]
 8007744:	e73b      	b.n	80075be <_dtoa_r+0x736>
 8007746:	9a07      	ldr	r2, [sp, #28]
 8007748:	e767      	b.n	800761a <_dtoa_r+0x792>
 800774a:	9b06      	ldr	r3, [sp, #24]
 800774c:	2b01      	cmp	r3, #1
 800774e:	dc18      	bgt.n	8007782 <_dtoa_r+0x8fa>
 8007750:	f1ba 0f00 	cmp.w	sl, #0
 8007754:	d115      	bne.n	8007782 <_dtoa_r+0x8fa>
 8007756:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800775a:	b993      	cbnz	r3, 8007782 <_dtoa_r+0x8fa>
 800775c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007760:	0d1b      	lsrs	r3, r3, #20
 8007762:	051b      	lsls	r3, r3, #20
 8007764:	b183      	cbz	r3, 8007788 <_dtoa_r+0x900>
 8007766:	9b04      	ldr	r3, [sp, #16]
 8007768:	3301      	adds	r3, #1
 800776a:	9304      	str	r3, [sp, #16]
 800776c:	9b05      	ldr	r3, [sp, #20]
 800776e:	3301      	adds	r3, #1
 8007770:	9305      	str	r3, [sp, #20]
 8007772:	f04f 0801 	mov.w	r8, #1
 8007776:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007778:	2b00      	cmp	r3, #0
 800777a:	f47f af6a 	bne.w	8007652 <_dtoa_r+0x7ca>
 800777e:	2001      	movs	r0, #1
 8007780:	e76f      	b.n	8007662 <_dtoa_r+0x7da>
 8007782:	f04f 0800 	mov.w	r8, #0
 8007786:	e7f6      	b.n	8007776 <_dtoa_r+0x8ee>
 8007788:	4698      	mov	r8, r3
 800778a:	e7f4      	b.n	8007776 <_dtoa_r+0x8ee>
 800778c:	f43f af7d 	beq.w	800768a <_dtoa_r+0x802>
 8007790:	4618      	mov	r0, r3
 8007792:	301c      	adds	r0, #28
 8007794:	e772      	b.n	800767c <_dtoa_r+0x7f4>
 8007796:	9b03      	ldr	r3, [sp, #12]
 8007798:	2b00      	cmp	r3, #0
 800779a:	dc37      	bgt.n	800780c <_dtoa_r+0x984>
 800779c:	9b06      	ldr	r3, [sp, #24]
 800779e:	2b02      	cmp	r3, #2
 80077a0:	dd34      	ble.n	800780c <_dtoa_r+0x984>
 80077a2:	9b03      	ldr	r3, [sp, #12]
 80077a4:	9302      	str	r3, [sp, #8]
 80077a6:	9b02      	ldr	r3, [sp, #8]
 80077a8:	b96b      	cbnz	r3, 80077c6 <_dtoa_r+0x93e>
 80077aa:	4631      	mov	r1, r6
 80077ac:	2205      	movs	r2, #5
 80077ae:	4620      	mov	r0, r4
 80077b0:	f000 f9d4 	bl	8007b5c <__multadd>
 80077b4:	4601      	mov	r1, r0
 80077b6:	4606      	mov	r6, r0
 80077b8:	ee18 0a10 	vmov	r0, s16
 80077bc:	f000 fbee 	bl	8007f9c <__mcmp>
 80077c0:	2800      	cmp	r0, #0
 80077c2:	f73f adbb 	bgt.w	800733c <_dtoa_r+0x4b4>
 80077c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077c8:	9d01      	ldr	r5, [sp, #4]
 80077ca:	43db      	mvns	r3, r3
 80077cc:	9300      	str	r3, [sp, #0]
 80077ce:	f04f 0800 	mov.w	r8, #0
 80077d2:	4631      	mov	r1, r6
 80077d4:	4620      	mov	r0, r4
 80077d6:	f000 f99f 	bl	8007b18 <_Bfree>
 80077da:	2f00      	cmp	r7, #0
 80077dc:	f43f aea4 	beq.w	8007528 <_dtoa_r+0x6a0>
 80077e0:	f1b8 0f00 	cmp.w	r8, #0
 80077e4:	d005      	beq.n	80077f2 <_dtoa_r+0x96a>
 80077e6:	45b8      	cmp	r8, r7
 80077e8:	d003      	beq.n	80077f2 <_dtoa_r+0x96a>
 80077ea:	4641      	mov	r1, r8
 80077ec:	4620      	mov	r0, r4
 80077ee:	f000 f993 	bl	8007b18 <_Bfree>
 80077f2:	4639      	mov	r1, r7
 80077f4:	4620      	mov	r0, r4
 80077f6:	f000 f98f 	bl	8007b18 <_Bfree>
 80077fa:	e695      	b.n	8007528 <_dtoa_r+0x6a0>
 80077fc:	2600      	movs	r6, #0
 80077fe:	4637      	mov	r7, r6
 8007800:	e7e1      	b.n	80077c6 <_dtoa_r+0x93e>
 8007802:	9700      	str	r7, [sp, #0]
 8007804:	4637      	mov	r7, r6
 8007806:	e599      	b.n	800733c <_dtoa_r+0x4b4>
 8007808:	40240000 	.word	0x40240000
 800780c:	9b08      	ldr	r3, [sp, #32]
 800780e:	2b00      	cmp	r3, #0
 8007810:	f000 80ca 	beq.w	80079a8 <_dtoa_r+0xb20>
 8007814:	9b03      	ldr	r3, [sp, #12]
 8007816:	9302      	str	r3, [sp, #8]
 8007818:	2d00      	cmp	r5, #0
 800781a:	dd05      	ble.n	8007828 <_dtoa_r+0x9a0>
 800781c:	4639      	mov	r1, r7
 800781e:	462a      	mov	r2, r5
 8007820:	4620      	mov	r0, r4
 8007822:	f000 fb4b 	bl	8007ebc <__lshift>
 8007826:	4607      	mov	r7, r0
 8007828:	f1b8 0f00 	cmp.w	r8, #0
 800782c:	d05b      	beq.n	80078e6 <_dtoa_r+0xa5e>
 800782e:	6879      	ldr	r1, [r7, #4]
 8007830:	4620      	mov	r0, r4
 8007832:	f000 f931 	bl	8007a98 <_Balloc>
 8007836:	4605      	mov	r5, r0
 8007838:	b928      	cbnz	r0, 8007846 <_dtoa_r+0x9be>
 800783a:	4b87      	ldr	r3, [pc, #540]	; (8007a58 <_dtoa_r+0xbd0>)
 800783c:	4602      	mov	r2, r0
 800783e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007842:	f7ff bb3b 	b.w	8006ebc <_dtoa_r+0x34>
 8007846:	693a      	ldr	r2, [r7, #16]
 8007848:	3202      	adds	r2, #2
 800784a:	0092      	lsls	r2, r2, #2
 800784c:	f107 010c 	add.w	r1, r7, #12
 8007850:	300c      	adds	r0, #12
 8007852:	f000 f913 	bl	8007a7c <memcpy>
 8007856:	2201      	movs	r2, #1
 8007858:	4629      	mov	r1, r5
 800785a:	4620      	mov	r0, r4
 800785c:	f000 fb2e 	bl	8007ebc <__lshift>
 8007860:	9b01      	ldr	r3, [sp, #4]
 8007862:	f103 0901 	add.w	r9, r3, #1
 8007866:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800786a:	4413      	add	r3, r2
 800786c:	9305      	str	r3, [sp, #20]
 800786e:	f00a 0301 	and.w	r3, sl, #1
 8007872:	46b8      	mov	r8, r7
 8007874:	9304      	str	r3, [sp, #16]
 8007876:	4607      	mov	r7, r0
 8007878:	4631      	mov	r1, r6
 800787a:	ee18 0a10 	vmov	r0, s16
 800787e:	f7ff fa77 	bl	8006d70 <quorem>
 8007882:	4641      	mov	r1, r8
 8007884:	9002      	str	r0, [sp, #8]
 8007886:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800788a:	ee18 0a10 	vmov	r0, s16
 800788e:	f000 fb85 	bl	8007f9c <__mcmp>
 8007892:	463a      	mov	r2, r7
 8007894:	9003      	str	r0, [sp, #12]
 8007896:	4631      	mov	r1, r6
 8007898:	4620      	mov	r0, r4
 800789a:	f000 fb9b 	bl	8007fd4 <__mdiff>
 800789e:	68c2      	ldr	r2, [r0, #12]
 80078a0:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 80078a4:	4605      	mov	r5, r0
 80078a6:	bb02      	cbnz	r2, 80078ea <_dtoa_r+0xa62>
 80078a8:	4601      	mov	r1, r0
 80078aa:	ee18 0a10 	vmov	r0, s16
 80078ae:	f000 fb75 	bl	8007f9c <__mcmp>
 80078b2:	4602      	mov	r2, r0
 80078b4:	4629      	mov	r1, r5
 80078b6:	4620      	mov	r0, r4
 80078b8:	9207      	str	r2, [sp, #28]
 80078ba:	f000 f92d 	bl	8007b18 <_Bfree>
 80078be:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80078c2:	ea43 0102 	orr.w	r1, r3, r2
 80078c6:	9b04      	ldr	r3, [sp, #16]
 80078c8:	430b      	orrs	r3, r1
 80078ca:	464d      	mov	r5, r9
 80078cc:	d10f      	bne.n	80078ee <_dtoa_r+0xa66>
 80078ce:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80078d2:	d02a      	beq.n	800792a <_dtoa_r+0xaa2>
 80078d4:	9b03      	ldr	r3, [sp, #12]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	dd02      	ble.n	80078e0 <_dtoa_r+0xa58>
 80078da:	9b02      	ldr	r3, [sp, #8]
 80078dc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80078e0:	f88b a000 	strb.w	sl, [fp]
 80078e4:	e775      	b.n	80077d2 <_dtoa_r+0x94a>
 80078e6:	4638      	mov	r0, r7
 80078e8:	e7ba      	b.n	8007860 <_dtoa_r+0x9d8>
 80078ea:	2201      	movs	r2, #1
 80078ec:	e7e2      	b.n	80078b4 <_dtoa_r+0xa2c>
 80078ee:	9b03      	ldr	r3, [sp, #12]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	db04      	blt.n	80078fe <_dtoa_r+0xa76>
 80078f4:	9906      	ldr	r1, [sp, #24]
 80078f6:	430b      	orrs	r3, r1
 80078f8:	9904      	ldr	r1, [sp, #16]
 80078fa:	430b      	orrs	r3, r1
 80078fc:	d122      	bne.n	8007944 <_dtoa_r+0xabc>
 80078fe:	2a00      	cmp	r2, #0
 8007900:	ddee      	ble.n	80078e0 <_dtoa_r+0xa58>
 8007902:	ee18 1a10 	vmov	r1, s16
 8007906:	2201      	movs	r2, #1
 8007908:	4620      	mov	r0, r4
 800790a:	f000 fad7 	bl	8007ebc <__lshift>
 800790e:	4631      	mov	r1, r6
 8007910:	ee08 0a10 	vmov	s16, r0
 8007914:	f000 fb42 	bl	8007f9c <__mcmp>
 8007918:	2800      	cmp	r0, #0
 800791a:	dc03      	bgt.n	8007924 <_dtoa_r+0xa9c>
 800791c:	d1e0      	bne.n	80078e0 <_dtoa_r+0xa58>
 800791e:	f01a 0f01 	tst.w	sl, #1
 8007922:	d0dd      	beq.n	80078e0 <_dtoa_r+0xa58>
 8007924:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007928:	d1d7      	bne.n	80078da <_dtoa_r+0xa52>
 800792a:	2339      	movs	r3, #57	; 0x39
 800792c:	f88b 3000 	strb.w	r3, [fp]
 8007930:	462b      	mov	r3, r5
 8007932:	461d      	mov	r5, r3
 8007934:	3b01      	subs	r3, #1
 8007936:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800793a:	2a39      	cmp	r2, #57	; 0x39
 800793c:	d071      	beq.n	8007a22 <_dtoa_r+0xb9a>
 800793e:	3201      	adds	r2, #1
 8007940:	701a      	strb	r2, [r3, #0]
 8007942:	e746      	b.n	80077d2 <_dtoa_r+0x94a>
 8007944:	2a00      	cmp	r2, #0
 8007946:	dd07      	ble.n	8007958 <_dtoa_r+0xad0>
 8007948:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800794c:	d0ed      	beq.n	800792a <_dtoa_r+0xaa2>
 800794e:	f10a 0301 	add.w	r3, sl, #1
 8007952:	f88b 3000 	strb.w	r3, [fp]
 8007956:	e73c      	b.n	80077d2 <_dtoa_r+0x94a>
 8007958:	9b05      	ldr	r3, [sp, #20]
 800795a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800795e:	4599      	cmp	r9, r3
 8007960:	d047      	beq.n	80079f2 <_dtoa_r+0xb6a>
 8007962:	ee18 1a10 	vmov	r1, s16
 8007966:	2300      	movs	r3, #0
 8007968:	220a      	movs	r2, #10
 800796a:	4620      	mov	r0, r4
 800796c:	f000 f8f6 	bl	8007b5c <__multadd>
 8007970:	45b8      	cmp	r8, r7
 8007972:	ee08 0a10 	vmov	s16, r0
 8007976:	f04f 0300 	mov.w	r3, #0
 800797a:	f04f 020a 	mov.w	r2, #10
 800797e:	4641      	mov	r1, r8
 8007980:	4620      	mov	r0, r4
 8007982:	d106      	bne.n	8007992 <_dtoa_r+0xb0a>
 8007984:	f000 f8ea 	bl	8007b5c <__multadd>
 8007988:	4680      	mov	r8, r0
 800798a:	4607      	mov	r7, r0
 800798c:	f109 0901 	add.w	r9, r9, #1
 8007990:	e772      	b.n	8007878 <_dtoa_r+0x9f0>
 8007992:	f000 f8e3 	bl	8007b5c <__multadd>
 8007996:	4639      	mov	r1, r7
 8007998:	4680      	mov	r8, r0
 800799a:	2300      	movs	r3, #0
 800799c:	220a      	movs	r2, #10
 800799e:	4620      	mov	r0, r4
 80079a0:	f000 f8dc 	bl	8007b5c <__multadd>
 80079a4:	4607      	mov	r7, r0
 80079a6:	e7f1      	b.n	800798c <_dtoa_r+0xb04>
 80079a8:	9b03      	ldr	r3, [sp, #12]
 80079aa:	9302      	str	r3, [sp, #8]
 80079ac:	9d01      	ldr	r5, [sp, #4]
 80079ae:	ee18 0a10 	vmov	r0, s16
 80079b2:	4631      	mov	r1, r6
 80079b4:	f7ff f9dc 	bl	8006d70 <quorem>
 80079b8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80079bc:	9b01      	ldr	r3, [sp, #4]
 80079be:	f805 ab01 	strb.w	sl, [r5], #1
 80079c2:	1aea      	subs	r2, r5, r3
 80079c4:	9b02      	ldr	r3, [sp, #8]
 80079c6:	4293      	cmp	r3, r2
 80079c8:	dd09      	ble.n	80079de <_dtoa_r+0xb56>
 80079ca:	ee18 1a10 	vmov	r1, s16
 80079ce:	2300      	movs	r3, #0
 80079d0:	220a      	movs	r2, #10
 80079d2:	4620      	mov	r0, r4
 80079d4:	f000 f8c2 	bl	8007b5c <__multadd>
 80079d8:	ee08 0a10 	vmov	s16, r0
 80079dc:	e7e7      	b.n	80079ae <_dtoa_r+0xb26>
 80079de:	9b02      	ldr	r3, [sp, #8]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	bfc8      	it	gt
 80079e4:	461d      	movgt	r5, r3
 80079e6:	9b01      	ldr	r3, [sp, #4]
 80079e8:	bfd8      	it	le
 80079ea:	2501      	movle	r5, #1
 80079ec:	441d      	add	r5, r3
 80079ee:	f04f 0800 	mov.w	r8, #0
 80079f2:	ee18 1a10 	vmov	r1, s16
 80079f6:	2201      	movs	r2, #1
 80079f8:	4620      	mov	r0, r4
 80079fa:	f000 fa5f 	bl	8007ebc <__lshift>
 80079fe:	4631      	mov	r1, r6
 8007a00:	ee08 0a10 	vmov	s16, r0
 8007a04:	f000 faca 	bl	8007f9c <__mcmp>
 8007a08:	2800      	cmp	r0, #0
 8007a0a:	dc91      	bgt.n	8007930 <_dtoa_r+0xaa8>
 8007a0c:	d102      	bne.n	8007a14 <_dtoa_r+0xb8c>
 8007a0e:	f01a 0f01 	tst.w	sl, #1
 8007a12:	d18d      	bne.n	8007930 <_dtoa_r+0xaa8>
 8007a14:	462b      	mov	r3, r5
 8007a16:	461d      	mov	r5, r3
 8007a18:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007a1c:	2a30      	cmp	r2, #48	; 0x30
 8007a1e:	d0fa      	beq.n	8007a16 <_dtoa_r+0xb8e>
 8007a20:	e6d7      	b.n	80077d2 <_dtoa_r+0x94a>
 8007a22:	9a01      	ldr	r2, [sp, #4]
 8007a24:	429a      	cmp	r2, r3
 8007a26:	d184      	bne.n	8007932 <_dtoa_r+0xaaa>
 8007a28:	9b00      	ldr	r3, [sp, #0]
 8007a2a:	3301      	adds	r3, #1
 8007a2c:	9300      	str	r3, [sp, #0]
 8007a2e:	2331      	movs	r3, #49	; 0x31
 8007a30:	7013      	strb	r3, [r2, #0]
 8007a32:	e6ce      	b.n	80077d2 <_dtoa_r+0x94a>
 8007a34:	4b09      	ldr	r3, [pc, #36]	; (8007a5c <_dtoa_r+0xbd4>)
 8007a36:	f7ff ba95 	b.w	8006f64 <_dtoa_r+0xdc>
 8007a3a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	f47f aa6e 	bne.w	8006f1e <_dtoa_r+0x96>
 8007a42:	4b07      	ldr	r3, [pc, #28]	; (8007a60 <_dtoa_r+0xbd8>)
 8007a44:	f7ff ba8e 	b.w	8006f64 <_dtoa_r+0xdc>
 8007a48:	9b02      	ldr	r3, [sp, #8]
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	dcae      	bgt.n	80079ac <_dtoa_r+0xb24>
 8007a4e:	9b06      	ldr	r3, [sp, #24]
 8007a50:	2b02      	cmp	r3, #2
 8007a52:	f73f aea8 	bgt.w	80077a6 <_dtoa_r+0x91e>
 8007a56:	e7a9      	b.n	80079ac <_dtoa_r+0xb24>
 8007a58:	08009373 	.word	0x08009373
 8007a5c:	080092d0 	.word	0x080092d0
 8007a60:	080092f4 	.word	0x080092f4

08007a64 <_localeconv_r>:
 8007a64:	4800      	ldr	r0, [pc, #0]	; (8007a68 <_localeconv_r+0x4>)
 8007a66:	4770      	bx	lr
 8007a68:	20000160 	.word	0x20000160

08007a6c <malloc>:
 8007a6c:	4b02      	ldr	r3, [pc, #8]	; (8007a78 <malloc+0xc>)
 8007a6e:	4601      	mov	r1, r0
 8007a70:	6818      	ldr	r0, [r3, #0]
 8007a72:	f000 bc17 	b.w	80082a4 <_malloc_r>
 8007a76:	bf00      	nop
 8007a78:	2000000c 	.word	0x2000000c

08007a7c <memcpy>:
 8007a7c:	440a      	add	r2, r1
 8007a7e:	4291      	cmp	r1, r2
 8007a80:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8007a84:	d100      	bne.n	8007a88 <memcpy+0xc>
 8007a86:	4770      	bx	lr
 8007a88:	b510      	push	{r4, lr}
 8007a8a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007a8e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007a92:	4291      	cmp	r1, r2
 8007a94:	d1f9      	bne.n	8007a8a <memcpy+0xe>
 8007a96:	bd10      	pop	{r4, pc}

08007a98 <_Balloc>:
 8007a98:	b570      	push	{r4, r5, r6, lr}
 8007a9a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007a9c:	4604      	mov	r4, r0
 8007a9e:	460d      	mov	r5, r1
 8007aa0:	b976      	cbnz	r6, 8007ac0 <_Balloc+0x28>
 8007aa2:	2010      	movs	r0, #16
 8007aa4:	f7ff ffe2 	bl	8007a6c <malloc>
 8007aa8:	4602      	mov	r2, r0
 8007aaa:	6260      	str	r0, [r4, #36]	; 0x24
 8007aac:	b920      	cbnz	r0, 8007ab8 <_Balloc+0x20>
 8007aae:	4b18      	ldr	r3, [pc, #96]	; (8007b10 <_Balloc+0x78>)
 8007ab0:	4818      	ldr	r0, [pc, #96]	; (8007b14 <_Balloc+0x7c>)
 8007ab2:	2166      	movs	r1, #102	; 0x66
 8007ab4:	f000 fdd6 	bl	8008664 <__assert_func>
 8007ab8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007abc:	6006      	str	r6, [r0, #0]
 8007abe:	60c6      	str	r6, [r0, #12]
 8007ac0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007ac2:	68f3      	ldr	r3, [r6, #12]
 8007ac4:	b183      	cbz	r3, 8007ae8 <_Balloc+0x50>
 8007ac6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007ac8:	68db      	ldr	r3, [r3, #12]
 8007aca:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007ace:	b9b8      	cbnz	r0, 8007b00 <_Balloc+0x68>
 8007ad0:	2101      	movs	r1, #1
 8007ad2:	fa01 f605 	lsl.w	r6, r1, r5
 8007ad6:	1d72      	adds	r2, r6, #5
 8007ad8:	0092      	lsls	r2, r2, #2
 8007ada:	4620      	mov	r0, r4
 8007adc:	f000 fb60 	bl	80081a0 <_calloc_r>
 8007ae0:	b160      	cbz	r0, 8007afc <_Balloc+0x64>
 8007ae2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007ae6:	e00e      	b.n	8007b06 <_Balloc+0x6e>
 8007ae8:	2221      	movs	r2, #33	; 0x21
 8007aea:	2104      	movs	r1, #4
 8007aec:	4620      	mov	r0, r4
 8007aee:	f000 fb57 	bl	80081a0 <_calloc_r>
 8007af2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007af4:	60f0      	str	r0, [r6, #12]
 8007af6:	68db      	ldr	r3, [r3, #12]
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d1e4      	bne.n	8007ac6 <_Balloc+0x2e>
 8007afc:	2000      	movs	r0, #0
 8007afe:	bd70      	pop	{r4, r5, r6, pc}
 8007b00:	6802      	ldr	r2, [r0, #0]
 8007b02:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007b06:	2300      	movs	r3, #0
 8007b08:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007b0c:	e7f7      	b.n	8007afe <_Balloc+0x66>
 8007b0e:	bf00      	nop
 8007b10:	08009301 	.word	0x08009301
 8007b14:	08009384 	.word	0x08009384

08007b18 <_Bfree>:
 8007b18:	b570      	push	{r4, r5, r6, lr}
 8007b1a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007b1c:	4605      	mov	r5, r0
 8007b1e:	460c      	mov	r4, r1
 8007b20:	b976      	cbnz	r6, 8007b40 <_Bfree+0x28>
 8007b22:	2010      	movs	r0, #16
 8007b24:	f7ff ffa2 	bl	8007a6c <malloc>
 8007b28:	4602      	mov	r2, r0
 8007b2a:	6268      	str	r0, [r5, #36]	; 0x24
 8007b2c:	b920      	cbnz	r0, 8007b38 <_Bfree+0x20>
 8007b2e:	4b09      	ldr	r3, [pc, #36]	; (8007b54 <_Bfree+0x3c>)
 8007b30:	4809      	ldr	r0, [pc, #36]	; (8007b58 <_Bfree+0x40>)
 8007b32:	218a      	movs	r1, #138	; 0x8a
 8007b34:	f000 fd96 	bl	8008664 <__assert_func>
 8007b38:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007b3c:	6006      	str	r6, [r0, #0]
 8007b3e:	60c6      	str	r6, [r0, #12]
 8007b40:	b13c      	cbz	r4, 8007b52 <_Bfree+0x3a>
 8007b42:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007b44:	6862      	ldr	r2, [r4, #4]
 8007b46:	68db      	ldr	r3, [r3, #12]
 8007b48:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007b4c:	6021      	str	r1, [r4, #0]
 8007b4e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007b52:	bd70      	pop	{r4, r5, r6, pc}
 8007b54:	08009301 	.word	0x08009301
 8007b58:	08009384 	.word	0x08009384

08007b5c <__multadd>:
 8007b5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b60:	690d      	ldr	r5, [r1, #16]
 8007b62:	4607      	mov	r7, r0
 8007b64:	460c      	mov	r4, r1
 8007b66:	461e      	mov	r6, r3
 8007b68:	f101 0c14 	add.w	ip, r1, #20
 8007b6c:	2000      	movs	r0, #0
 8007b6e:	f8dc 3000 	ldr.w	r3, [ip]
 8007b72:	b299      	uxth	r1, r3
 8007b74:	fb02 6101 	mla	r1, r2, r1, r6
 8007b78:	0c1e      	lsrs	r6, r3, #16
 8007b7a:	0c0b      	lsrs	r3, r1, #16
 8007b7c:	fb02 3306 	mla	r3, r2, r6, r3
 8007b80:	b289      	uxth	r1, r1
 8007b82:	3001      	adds	r0, #1
 8007b84:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007b88:	4285      	cmp	r5, r0
 8007b8a:	f84c 1b04 	str.w	r1, [ip], #4
 8007b8e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007b92:	dcec      	bgt.n	8007b6e <__multadd+0x12>
 8007b94:	b30e      	cbz	r6, 8007bda <__multadd+0x7e>
 8007b96:	68a3      	ldr	r3, [r4, #8]
 8007b98:	42ab      	cmp	r3, r5
 8007b9a:	dc19      	bgt.n	8007bd0 <__multadd+0x74>
 8007b9c:	6861      	ldr	r1, [r4, #4]
 8007b9e:	4638      	mov	r0, r7
 8007ba0:	3101      	adds	r1, #1
 8007ba2:	f7ff ff79 	bl	8007a98 <_Balloc>
 8007ba6:	4680      	mov	r8, r0
 8007ba8:	b928      	cbnz	r0, 8007bb6 <__multadd+0x5a>
 8007baa:	4602      	mov	r2, r0
 8007bac:	4b0c      	ldr	r3, [pc, #48]	; (8007be0 <__multadd+0x84>)
 8007bae:	480d      	ldr	r0, [pc, #52]	; (8007be4 <__multadd+0x88>)
 8007bb0:	21b5      	movs	r1, #181	; 0xb5
 8007bb2:	f000 fd57 	bl	8008664 <__assert_func>
 8007bb6:	6922      	ldr	r2, [r4, #16]
 8007bb8:	3202      	adds	r2, #2
 8007bba:	f104 010c 	add.w	r1, r4, #12
 8007bbe:	0092      	lsls	r2, r2, #2
 8007bc0:	300c      	adds	r0, #12
 8007bc2:	f7ff ff5b 	bl	8007a7c <memcpy>
 8007bc6:	4621      	mov	r1, r4
 8007bc8:	4638      	mov	r0, r7
 8007bca:	f7ff ffa5 	bl	8007b18 <_Bfree>
 8007bce:	4644      	mov	r4, r8
 8007bd0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007bd4:	3501      	adds	r5, #1
 8007bd6:	615e      	str	r6, [r3, #20]
 8007bd8:	6125      	str	r5, [r4, #16]
 8007bda:	4620      	mov	r0, r4
 8007bdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007be0:	08009373 	.word	0x08009373
 8007be4:	08009384 	.word	0x08009384

08007be8 <__hi0bits>:
 8007be8:	0c03      	lsrs	r3, r0, #16
 8007bea:	041b      	lsls	r3, r3, #16
 8007bec:	b9d3      	cbnz	r3, 8007c24 <__hi0bits+0x3c>
 8007bee:	0400      	lsls	r0, r0, #16
 8007bf0:	2310      	movs	r3, #16
 8007bf2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007bf6:	bf04      	itt	eq
 8007bf8:	0200      	lsleq	r0, r0, #8
 8007bfa:	3308      	addeq	r3, #8
 8007bfc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007c00:	bf04      	itt	eq
 8007c02:	0100      	lsleq	r0, r0, #4
 8007c04:	3304      	addeq	r3, #4
 8007c06:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007c0a:	bf04      	itt	eq
 8007c0c:	0080      	lsleq	r0, r0, #2
 8007c0e:	3302      	addeq	r3, #2
 8007c10:	2800      	cmp	r0, #0
 8007c12:	db05      	blt.n	8007c20 <__hi0bits+0x38>
 8007c14:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007c18:	f103 0301 	add.w	r3, r3, #1
 8007c1c:	bf08      	it	eq
 8007c1e:	2320      	moveq	r3, #32
 8007c20:	4618      	mov	r0, r3
 8007c22:	4770      	bx	lr
 8007c24:	2300      	movs	r3, #0
 8007c26:	e7e4      	b.n	8007bf2 <__hi0bits+0xa>

08007c28 <__lo0bits>:
 8007c28:	6803      	ldr	r3, [r0, #0]
 8007c2a:	f013 0207 	ands.w	r2, r3, #7
 8007c2e:	4601      	mov	r1, r0
 8007c30:	d00b      	beq.n	8007c4a <__lo0bits+0x22>
 8007c32:	07da      	lsls	r2, r3, #31
 8007c34:	d423      	bmi.n	8007c7e <__lo0bits+0x56>
 8007c36:	0798      	lsls	r0, r3, #30
 8007c38:	bf49      	itett	mi
 8007c3a:	085b      	lsrmi	r3, r3, #1
 8007c3c:	089b      	lsrpl	r3, r3, #2
 8007c3e:	2001      	movmi	r0, #1
 8007c40:	600b      	strmi	r3, [r1, #0]
 8007c42:	bf5c      	itt	pl
 8007c44:	600b      	strpl	r3, [r1, #0]
 8007c46:	2002      	movpl	r0, #2
 8007c48:	4770      	bx	lr
 8007c4a:	b298      	uxth	r0, r3
 8007c4c:	b9a8      	cbnz	r0, 8007c7a <__lo0bits+0x52>
 8007c4e:	0c1b      	lsrs	r3, r3, #16
 8007c50:	2010      	movs	r0, #16
 8007c52:	b2da      	uxtb	r2, r3
 8007c54:	b90a      	cbnz	r2, 8007c5a <__lo0bits+0x32>
 8007c56:	3008      	adds	r0, #8
 8007c58:	0a1b      	lsrs	r3, r3, #8
 8007c5a:	071a      	lsls	r2, r3, #28
 8007c5c:	bf04      	itt	eq
 8007c5e:	091b      	lsreq	r3, r3, #4
 8007c60:	3004      	addeq	r0, #4
 8007c62:	079a      	lsls	r2, r3, #30
 8007c64:	bf04      	itt	eq
 8007c66:	089b      	lsreq	r3, r3, #2
 8007c68:	3002      	addeq	r0, #2
 8007c6a:	07da      	lsls	r2, r3, #31
 8007c6c:	d403      	bmi.n	8007c76 <__lo0bits+0x4e>
 8007c6e:	085b      	lsrs	r3, r3, #1
 8007c70:	f100 0001 	add.w	r0, r0, #1
 8007c74:	d005      	beq.n	8007c82 <__lo0bits+0x5a>
 8007c76:	600b      	str	r3, [r1, #0]
 8007c78:	4770      	bx	lr
 8007c7a:	4610      	mov	r0, r2
 8007c7c:	e7e9      	b.n	8007c52 <__lo0bits+0x2a>
 8007c7e:	2000      	movs	r0, #0
 8007c80:	4770      	bx	lr
 8007c82:	2020      	movs	r0, #32
 8007c84:	4770      	bx	lr
	...

08007c88 <__i2b>:
 8007c88:	b510      	push	{r4, lr}
 8007c8a:	460c      	mov	r4, r1
 8007c8c:	2101      	movs	r1, #1
 8007c8e:	f7ff ff03 	bl	8007a98 <_Balloc>
 8007c92:	4602      	mov	r2, r0
 8007c94:	b928      	cbnz	r0, 8007ca2 <__i2b+0x1a>
 8007c96:	4b05      	ldr	r3, [pc, #20]	; (8007cac <__i2b+0x24>)
 8007c98:	4805      	ldr	r0, [pc, #20]	; (8007cb0 <__i2b+0x28>)
 8007c9a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007c9e:	f000 fce1 	bl	8008664 <__assert_func>
 8007ca2:	2301      	movs	r3, #1
 8007ca4:	6144      	str	r4, [r0, #20]
 8007ca6:	6103      	str	r3, [r0, #16]
 8007ca8:	bd10      	pop	{r4, pc}
 8007caa:	bf00      	nop
 8007cac:	08009373 	.word	0x08009373
 8007cb0:	08009384 	.word	0x08009384

08007cb4 <__multiply>:
 8007cb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cb8:	4691      	mov	r9, r2
 8007cba:	690a      	ldr	r2, [r1, #16]
 8007cbc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007cc0:	429a      	cmp	r2, r3
 8007cc2:	bfb8      	it	lt
 8007cc4:	460b      	movlt	r3, r1
 8007cc6:	460c      	mov	r4, r1
 8007cc8:	bfbc      	itt	lt
 8007cca:	464c      	movlt	r4, r9
 8007ccc:	4699      	movlt	r9, r3
 8007cce:	6927      	ldr	r7, [r4, #16]
 8007cd0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007cd4:	68a3      	ldr	r3, [r4, #8]
 8007cd6:	6861      	ldr	r1, [r4, #4]
 8007cd8:	eb07 060a 	add.w	r6, r7, sl
 8007cdc:	42b3      	cmp	r3, r6
 8007cde:	b085      	sub	sp, #20
 8007ce0:	bfb8      	it	lt
 8007ce2:	3101      	addlt	r1, #1
 8007ce4:	f7ff fed8 	bl	8007a98 <_Balloc>
 8007ce8:	b930      	cbnz	r0, 8007cf8 <__multiply+0x44>
 8007cea:	4602      	mov	r2, r0
 8007cec:	4b44      	ldr	r3, [pc, #272]	; (8007e00 <__multiply+0x14c>)
 8007cee:	4845      	ldr	r0, [pc, #276]	; (8007e04 <__multiply+0x150>)
 8007cf0:	f240 115d 	movw	r1, #349	; 0x15d
 8007cf4:	f000 fcb6 	bl	8008664 <__assert_func>
 8007cf8:	f100 0514 	add.w	r5, r0, #20
 8007cfc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007d00:	462b      	mov	r3, r5
 8007d02:	2200      	movs	r2, #0
 8007d04:	4543      	cmp	r3, r8
 8007d06:	d321      	bcc.n	8007d4c <__multiply+0x98>
 8007d08:	f104 0314 	add.w	r3, r4, #20
 8007d0c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007d10:	f109 0314 	add.w	r3, r9, #20
 8007d14:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007d18:	9202      	str	r2, [sp, #8]
 8007d1a:	1b3a      	subs	r2, r7, r4
 8007d1c:	3a15      	subs	r2, #21
 8007d1e:	f022 0203 	bic.w	r2, r2, #3
 8007d22:	3204      	adds	r2, #4
 8007d24:	f104 0115 	add.w	r1, r4, #21
 8007d28:	428f      	cmp	r7, r1
 8007d2a:	bf38      	it	cc
 8007d2c:	2204      	movcc	r2, #4
 8007d2e:	9201      	str	r2, [sp, #4]
 8007d30:	9a02      	ldr	r2, [sp, #8]
 8007d32:	9303      	str	r3, [sp, #12]
 8007d34:	429a      	cmp	r2, r3
 8007d36:	d80c      	bhi.n	8007d52 <__multiply+0x9e>
 8007d38:	2e00      	cmp	r6, #0
 8007d3a:	dd03      	ble.n	8007d44 <__multiply+0x90>
 8007d3c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d05a      	beq.n	8007dfa <__multiply+0x146>
 8007d44:	6106      	str	r6, [r0, #16]
 8007d46:	b005      	add	sp, #20
 8007d48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d4c:	f843 2b04 	str.w	r2, [r3], #4
 8007d50:	e7d8      	b.n	8007d04 <__multiply+0x50>
 8007d52:	f8b3 a000 	ldrh.w	sl, [r3]
 8007d56:	f1ba 0f00 	cmp.w	sl, #0
 8007d5a:	d024      	beq.n	8007da6 <__multiply+0xf2>
 8007d5c:	f104 0e14 	add.w	lr, r4, #20
 8007d60:	46a9      	mov	r9, r5
 8007d62:	f04f 0c00 	mov.w	ip, #0
 8007d66:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007d6a:	f8d9 1000 	ldr.w	r1, [r9]
 8007d6e:	fa1f fb82 	uxth.w	fp, r2
 8007d72:	b289      	uxth	r1, r1
 8007d74:	fb0a 110b 	mla	r1, sl, fp, r1
 8007d78:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007d7c:	f8d9 2000 	ldr.w	r2, [r9]
 8007d80:	4461      	add	r1, ip
 8007d82:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007d86:	fb0a c20b 	mla	r2, sl, fp, ip
 8007d8a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007d8e:	b289      	uxth	r1, r1
 8007d90:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007d94:	4577      	cmp	r7, lr
 8007d96:	f849 1b04 	str.w	r1, [r9], #4
 8007d9a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007d9e:	d8e2      	bhi.n	8007d66 <__multiply+0xb2>
 8007da0:	9a01      	ldr	r2, [sp, #4]
 8007da2:	f845 c002 	str.w	ip, [r5, r2]
 8007da6:	9a03      	ldr	r2, [sp, #12]
 8007da8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007dac:	3304      	adds	r3, #4
 8007dae:	f1b9 0f00 	cmp.w	r9, #0
 8007db2:	d020      	beq.n	8007df6 <__multiply+0x142>
 8007db4:	6829      	ldr	r1, [r5, #0]
 8007db6:	f104 0c14 	add.w	ip, r4, #20
 8007dba:	46ae      	mov	lr, r5
 8007dbc:	f04f 0a00 	mov.w	sl, #0
 8007dc0:	f8bc b000 	ldrh.w	fp, [ip]
 8007dc4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007dc8:	fb09 220b 	mla	r2, r9, fp, r2
 8007dcc:	4492      	add	sl, r2
 8007dce:	b289      	uxth	r1, r1
 8007dd0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8007dd4:	f84e 1b04 	str.w	r1, [lr], #4
 8007dd8:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007ddc:	f8be 1000 	ldrh.w	r1, [lr]
 8007de0:	0c12      	lsrs	r2, r2, #16
 8007de2:	fb09 1102 	mla	r1, r9, r2, r1
 8007de6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8007dea:	4567      	cmp	r7, ip
 8007dec:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007df0:	d8e6      	bhi.n	8007dc0 <__multiply+0x10c>
 8007df2:	9a01      	ldr	r2, [sp, #4]
 8007df4:	50a9      	str	r1, [r5, r2]
 8007df6:	3504      	adds	r5, #4
 8007df8:	e79a      	b.n	8007d30 <__multiply+0x7c>
 8007dfa:	3e01      	subs	r6, #1
 8007dfc:	e79c      	b.n	8007d38 <__multiply+0x84>
 8007dfe:	bf00      	nop
 8007e00:	08009373 	.word	0x08009373
 8007e04:	08009384 	.word	0x08009384

08007e08 <__pow5mult>:
 8007e08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e0c:	4615      	mov	r5, r2
 8007e0e:	f012 0203 	ands.w	r2, r2, #3
 8007e12:	4606      	mov	r6, r0
 8007e14:	460f      	mov	r7, r1
 8007e16:	d007      	beq.n	8007e28 <__pow5mult+0x20>
 8007e18:	4c25      	ldr	r4, [pc, #148]	; (8007eb0 <__pow5mult+0xa8>)
 8007e1a:	3a01      	subs	r2, #1
 8007e1c:	2300      	movs	r3, #0
 8007e1e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007e22:	f7ff fe9b 	bl	8007b5c <__multadd>
 8007e26:	4607      	mov	r7, r0
 8007e28:	10ad      	asrs	r5, r5, #2
 8007e2a:	d03d      	beq.n	8007ea8 <__pow5mult+0xa0>
 8007e2c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007e2e:	b97c      	cbnz	r4, 8007e50 <__pow5mult+0x48>
 8007e30:	2010      	movs	r0, #16
 8007e32:	f7ff fe1b 	bl	8007a6c <malloc>
 8007e36:	4602      	mov	r2, r0
 8007e38:	6270      	str	r0, [r6, #36]	; 0x24
 8007e3a:	b928      	cbnz	r0, 8007e48 <__pow5mult+0x40>
 8007e3c:	4b1d      	ldr	r3, [pc, #116]	; (8007eb4 <__pow5mult+0xac>)
 8007e3e:	481e      	ldr	r0, [pc, #120]	; (8007eb8 <__pow5mult+0xb0>)
 8007e40:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007e44:	f000 fc0e 	bl	8008664 <__assert_func>
 8007e48:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007e4c:	6004      	str	r4, [r0, #0]
 8007e4e:	60c4      	str	r4, [r0, #12]
 8007e50:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007e54:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007e58:	b94c      	cbnz	r4, 8007e6e <__pow5mult+0x66>
 8007e5a:	f240 2171 	movw	r1, #625	; 0x271
 8007e5e:	4630      	mov	r0, r6
 8007e60:	f7ff ff12 	bl	8007c88 <__i2b>
 8007e64:	2300      	movs	r3, #0
 8007e66:	f8c8 0008 	str.w	r0, [r8, #8]
 8007e6a:	4604      	mov	r4, r0
 8007e6c:	6003      	str	r3, [r0, #0]
 8007e6e:	f04f 0900 	mov.w	r9, #0
 8007e72:	07eb      	lsls	r3, r5, #31
 8007e74:	d50a      	bpl.n	8007e8c <__pow5mult+0x84>
 8007e76:	4639      	mov	r1, r7
 8007e78:	4622      	mov	r2, r4
 8007e7a:	4630      	mov	r0, r6
 8007e7c:	f7ff ff1a 	bl	8007cb4 <__multiply>
 8007e80:	4639      	mov	r1, r7
 8007e82:	4680      	mov	r8, r0
 8007e84:	4630      	mov	r0, r6
 8007e86:	f7ff fe47 	bl	8007b18 <_Bfree>
 8007e8a:	4647      	mov	r7, r8
 8007e8c:	106d      	asrs	r5, r5, #1
 8007e8e:	d00b      	beq.n	8007ea8 <__pow5mult+0xa0>
 8007e90:	6820      	ldr	r0, [r4, #0]
 8007e92:	b938      	cbnz	r0, 8007ea4 <__pow5mult+0x9c>
 8007e94:	4622      	mov	r2, r4
 8007e96:	4621      	mov	r1, r4
 8007e98:	4630      	mov	r0, r6
 8007e9a:	f7ff ff0b 	bl	8007cb4 <__multiply>
 8007e9e:	6020      	str	r0, [r4, #0]
 8007ea0:	f8c0 9000 	str.w	r9, [r0]
 8007ea4:	4604      	mov	r4, r0
 8007ea6:	e7e4      	b.n	8007e72 <__pow5mult+0x6a>
 8007ea8:	4638      	mov	r0, r7
 8007eaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007eae:	bf00      	nop
 8007eb0:	080094d0 	.word	0x080094d0
 8007eb4:	08009301 	.word	0x08009301
 8007eb8:	08009384 	.word	0x08009384

08007ebc <__lshift>:
 8007ebc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ec0:	460c      	mov	r4, r1
 8007ec2:	6849      	ldr	r1, [r1, #4]
 8007ec4:	6923      	ldr	r3, [r4, #16]
 8007ec6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007eca:	68a3      	ldr	r3, [r4, #8]
 8007ecc:	4607      	mov	r7, r0
 8007ece:	4691      	mov	r9, r2
 8007ed0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007ed4:	f108 0601 	add.w	r6, r8, #1
 8007ed8:	42b3      	cmp	r3, r6
 8007eda:	db0b      	blt.n	8007ef4 <__lshift+0x38>
 8007edc:	4638      	mov	r0, r7
 8007ede:	f7ff fddb 	bl	8007a98 <_Balloc>
 8007ee2:	4605      	mov	r5, r0
 8007ee4:	b948      	cbnz	r0, 8007efa <__lshift+0x3e>
 8007ee6:	4602      	mov	r2, r0
 8007ee8:	4b2a      	ldr	r3, [pc, #168]	; (8007f94 <__lshift+0xd8>)
 8007eea:	482b      	ldr	r0, [pc, #172]	; (8007f98 <__lshift+0xdc>)
 8007eec:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007ef0:	f000 fbb8 	bl	8008664 <__assert_func>
 8007ef4:	3101      	adds	r1, #1
 8007ef6:	005b      	lsls	r3, r3, #1
 8007ef8:	e7ee      	b.n	8007ed8 <__lshift+0x1c>
 8007efa:	2300      	movs	r3, #0
 8007efc:	f100 0114 	add.w	r1, r0, #20
 8007f00:	f100 0210 	add.w	r2, r0, #16
 8007f04:	4618      	mov	r0, r3
 8007f06:	4553      	cmp	r3, sl
 8007f08:	db37      	blt.n	8007f7a <__lshift+0xbe>
 8007f0a:	6920      	ldr	r0, [r4, #16]
 8007f0c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007f10:	f104 0314 	add.w	r3, r4, #20
 8007f14:	f019 091f 	ands.w	r9, r9, #31
 8007f18:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007f1c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007f20:	d02f      	beq.n	8007f82 <__lshift+0xc6>
 8007f22:	f1c9 0e20 	rsb	lr, r9, #32
 8007f26:	468a      	mov	sl, r1
 8007f28:	f04f 0c00 	mov.w	ip, #0
 8007f2c:	681a      	ldr	r2, [r3, #0]
 8007f2e:	fa02 f209 	lsl.w	r2, r2, r9
 8007f32:	ea42 020c 	orr.w	r2, r2, ip
 8007f36:	f84a 2b04 	str.w	r2, [sl], #4
 8007f3a:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f3e:	4298      	cmp	r0, r3
 8007f40:	fa22 fc0e 	lsr.w	ip, r2, lr
 8007f44:	d8f2      	bhi.n	8007f2c <__lshift+0x70>
 8007f46:	1b03      	subs	r3, r0, r4
 8007f48:	3b15      	subs	r3, #21
 8007f4a:	f023 0303 	bic.w	r3, r3, #3
 8007f4e:	3304      	adds	r3, #4
 8007f50:	f104 0215 	add.w	r2, r4, #21
 8007f54:	4290      	cmp	r0, r2
 8007f56:	bf38      	it	cc
 8007f58:	2304      	movcc	r3, #4
 8007f5a:	f841 c003 	str.w	ip, [r1, r3]
 8007f5e:	f1bc 0f00 	cmp.w	ip, #0
 8007f62:	d001      	beq.n	8007f68 <__lshift+0xac>
 8007f64:	f108 0602 	add.w	r6, r8, #2
 8007f68:	3e01      	subs	r6, #1
 8007f6a:	4638      	mov	r0, r7
 8007f6c:	612e      	str	r6, [r5, #16]
 8007f6e:	4621      	mov	r1, r4
 8007f70:	f7ff fdd2 	bl	8007b18 <_Bfree>
 8007f74:	4628      	mov	r0, r5
 8007f76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f7a:	f842 0f04 	str.w	r0, [r2, #4]!
 8007f7e:	3301      	adds	r3, #1
 8007f80:	e7c1      	b.n	8007f06 <__lshift+0x4a>
 8007f82:	3904      	subs	r1, #4
 8007f84:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f88:	f841 2f04 	str.w	r2, [r1, #4]!
 8007f8c:	4298      	cmp	r0, r3
 8007f8e:	d8f9      	bhi.n	8007f84 <__lshift+0xc8>
 8007f90:	e7ea      	b.n	8007f68 <__lshift+0xac>
 8007f92:	bf00      	nop
 8007f94:	08009373 	.word	0x08009373
 8007f98:	08009384 	.word	0x08009384

08007f9c <__mcmp>:
 8007f9c:	b530      	push	{r4, r5, lr}
 8007f9e:	6902      	ldr	r2, [r0, #16]
 8007fa0:	690c      	ldr	r4, [r1, #16]
 8007fa2:	1b12      	subs	r2, r2, r4
 8007fa4:	d10e      	bne.n	8007fc4 <__mcmp+0x28>
 8007fa6:	f100 0314 	add.w	r3, r0, #20
 8007faa:	3114      	adds	r1, #20
 8007fac:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007fb0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007fb4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007fb8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007fbc:	42a5      	cmp	r5, r4
 8007fbe:	d003      	beq.n	8007fc8 <__mcmp+0x2c>
 8007fc0:	d305      	bcc.n	8007fce <__mcmp+0x32>
 8007fc2:	2201      	movs	r2, #1
 8007fc4:	4610      	mov	r0, r2
 8007fc6:	bd30      	pop	{r4, r5, pc}
 8007fc8:	4283      	cmp	r3, r0
 8007fca:	d3f3      	bcc.n	8007fb4 <__mcmp+0x18>
 8007fcc:	e7fa      	b.n	8007fc4 <__mcmp+0x28>
 8007fce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007fd2:	e7f7      	b.n	8007fc4 <__mcmp+0x28>

08007fd4 <__mdiff>:
 8007fd4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fd8:	460c      	mov	r4, r1
 8007fda:	4606      	mov	r6, r0
 8007fdc:	4611      	mov	r1, r2
 8007fde:	4620      	mov	r0, r4
 8007fe0:	4690      	mov	r8, r2
 8007fe2:	f7ff ffdb 	bl	8007f9c <__mcmp>
 8007fe6:	1e05      	subs	r5, r0, #0
 8007fe8:	d110      	bne.n	800800c <__mdiff+0x38>
 8007fea:	4629      	mov	r1, r5
 8007fec:	4630      	mov	r0, r6
 8007fee:	f7ff fd53 	bl	8007a98 <_Balloc>
 8007ff2:	b930      	cbnz	r0, 8008002 <__mdiff+0x2e>
 8007ff4:	4b3a      	ldr	r3, [pc, #232]	; (80080e0 <__mdiff+0x10c>)
 8007ff6:	4602      	mov	r2, r0
 8007ff8:	f240 2132 	movw	r1, #562	; 0x232
 8007ffc:	4839      	ldr	r0, [pc, #228]	; (80080e4 <__mdiff+0x110>)
 8007ffe:	f000 fb31 	bl	8008664 <__assert_func>
 8008002:	2301      	movs	r3, #1
 8008004:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008008:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800800c:	bfa4      	itt	ge
 800800e:	4643      	movge	r3, r8
 8008010:	46a0      	movge	r8, r4
 8008012:	4630      	mov	r0, r6
 8008014:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008018:	bfa6      	itte	ge
 800801a:	461c      	movge	r4, r3
 800801c:	2500      	movge	r5, #0
 800801e:	2501      	movlt	r5, #1
 8008020:	f7ff fd3a 	bl	8007a98 <_Balloc>
 8008024:	b920      	cbnz	r0, 8008030 <__mdiff+0x5c>
 8008026:	4b2e      	ldr	r3, [pc, #184]	; (80080e0 <__mdiff+0x10c>)
 8008028:	4602      	mov	r2, r0
 800802a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800802e:	e7e5      	b.n	8007ffc <__mdiff+0x28>
 8008030:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008034:	6926      	ldr	r6, [r4, #16]
 8008036:	60c5      	str	r5, [r0, #12]
 8008038:	f104 0914 	add.w	r9, r4, #20
 800803c:	f108 0514 	add.w	r5, r8, #20
 8008040:	f100 0e14 	add.w	lr, r0, #20
 8008044:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008048:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800804c:	f108 0210 	add.w	r2, r8, #16
 8008050:	46f2      	mov	sl, lr
 8008052:	2100      	movs	r1, #0
 8008054:	f859 3b04 	ldr.w	r3, [r9], #4
 8008058:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800805c:	fa1f f883 	uxth.w	r8, r3
 8008060:	fa11 f18b 	uxtah	r1, r1, fp
 8008064:	0c1b      	lsrs	r3, r3, #16
 8008066:	eba1 0808 	sub.w	r8, r1, r8
 800806a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800806e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008072:	fa1f f888 	uxth.w	r8, r8
 8008076:	1419      	asrs	r1, r3, #16
 8008078:	454e      	cmp	r6, r9
 800807a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800807e:	f84a 3b04 	str.w	r3, [sl], #4
 8008082:	d8e7      	bhi.n	8008054 <__mdiff+0x80>
 8008084:	1b33      	subs	r3, r6, r4
 8008086:	3b15      	subs	r3, #21
 8008088:	f023 0303 	bic.w	r3, r3, #3
 800808c:	3304      	adds	r3, #4
 800808e:	3415      	adds	r4, #21
 8008090:	42a6      	cmp	r6, r4
 8008092:	bf38      	it	cc
 8008094:	2304      	movcc	r3, #4
 8008096:	441d      	add	r5, r3
 8008098:	4473      	add	r3, lr
 800809a:	469e      	mov	lr, r3
 800809c:	462e      	mov	r6, r5
 800809e:	4566      	cmp	r6, ip
 80080a0:	d30e      	bcc.n	80080c0 <__mdiff+0xec>
 80080a2:	f10c 0203 	add.w	r2, ip, #3
 80080a6:	1b52      	subs	r2, r2, r5
 80080a8:	f022 0203 	bic.w	r2, r2, #3
 80080ac:	3d03      	subs	r5, #3
 80080ae:	45ac      	cmp	ip, r5
 80080b0:	bf38      	it	cc
 80080b2:	2200      	movcc	r2, #0
 80080b4:	441a      	add	r2, r3
 80080b6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80080ba:	b17b      	cbz	r3, 80080dc <__mdiff+0x108>
 80080bc:	6107      	str	r7, [r0, #16]
 80080be:	e7a3      	b.n	8008008 <__mdiff+0x34>
 80080c0:	f856 8b04 	ldr.w	r8, [r6], #4
 80080c4:	fa11 f288 	uxtah	r2, r1, r8
 80080c8:	1414      	asrs	r4, r2, #16
 80080ca:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80080ce:	b292      	uxth	r2, r2
 80080d0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80080d4:	f84e 2b04 	str.w	r2, [lr], #4
 80080d8:	1421      	asrs	r1, r4, #16
 80080da:	e7e0      	b.n	800809e <__mdiff+0xca>
 80080dc:	3f01      	subs	r7, #1
 80080de:	e7ea      	b.n	80080b6 <__mdiff+0xe2>
 80080e0:	08009373 	.word	0x08009373
 80080e4:	08009384 	.word	0x08009384

080080e8 <__d2b>:
 80080e8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80080ec:	4689      	mov	r9, r1
 80080ee:	2101      	movs	r1, #1
 80080f0:	ec57 6b10 	vmov	r6, r7, d0
 80080f4:	4690      	mov	r8, r2
 80080f6:	f7ff fccf 	bl	8007a98 <_Balloc>
 80080fa:	4604      	mov	r4, r0
 80080fc:	b930      	cbnz	r0, 800810c <__d2b+0x24>
 80080fe:	4602      	mov	r2, r0
 8008100:	4b25      	ldr	r3, [pc, #148]	; (8008198 <__d2b+0xb0>)
 8008102:	4826      	ldr	r0, [pc, #152]	; (800819c <__d2b+0xb4>)
 8008104:	f240 310a 	movw	r1, #778	; 0x30a
 8008108:	f000 faac 	bl	8008664 <__assert_func>
 800810c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008110:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008114:	bb35      	cbnz	r5, 8008164 <__d2b+0x7c>
 8008116:	2e00      	cmp	r6, #0
 8008118:	9301      	str	r3, [sp, #4]
 800811a:	d028      	beq.n	800816e <__d2b+0x86>
 800811c:	4668      	mov	r0, sp
 800811e:	9600      	str	r6, [sp, #0]
 8008120:	f7ff fd82 	bl	8007c28 <__lo0bits>
 8008124:	9900      	ldr	r1, [sp, #0]
 8008126:	b300      	cbz	r0, 800816a <__d2b+0x82>
 8008128:	9a01      	ldr	r2, [sp, #4]
 800812a:	f1c0 0320 	rsb	r3, r0, #32
 800812e:	fa02 f303 	lsl.w	r3, r2, r3
 8008132:	430b      	orrs	r3, r1
 8008134:	40c2      	lsrs	r2, r0
 8008136:	6163      	str	r3, [r4, #20]
 8008138:	9201      	str	r2, [sp, #4]
 800813a:	9b01      	ldr	r3, [sp, #4]
 800813c:	61a3      	str	r3, [r4, #24]
 800813e:	2b00      	cmp	r3, #0
 8008140:	bf14      	ite	ne
 8008142:	2202      	movne	r2, #2
 8008144:	2201      	moveq	r2, #1
 8008146:	6122      	str	r2, [r4, #16]
 8008148:	b1d5      	cbz	r5, 8008180 <__d2b+0x98>
 800814a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800814e:	4405      	add	r5, r0
 8008150:	f8c9 5000 	str.w	r5, [r9]
 8008154:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008158:	f8c8 0000 	str.w	r0, [r8]
 800815c:	4620      	mov	r0, r4
 800815e:	b003      	add	sp, #12
 8008160:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008164:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008168:	e7d5      	b.n	8008116 <__d2b+0x2e>
 800816a:	6161      	str	r1, [r4, #20]
 800816c:	e7e5      	b.n	800813a <__d2b+0x52>
 800816e:	a801      	add	r0, sp, #4
 8008170:	f7ff fd5a 	bl	8007c28 <__lo0bits>
 8008174:	9b01      	ldr	r3, [sp, #4]
 8008176:	6163      	str	r3, [r4, #20]
 8008178:	2201      	movs	r2, #1
 800817a:	6122      	str	r2, [r4, #16]
 800817c:	3020      	adds	r0, #32
 800817e:	e7e3      	b.n	8008148 <__d2b+0x60>
 8008180:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008184:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008188:	f8c9 0000 	str.w	r0, [r9]
 800818c:	6918      	ldr	r0, [r3, #16]
 800818e:	f7ff fd2b 	bl	8007be8 <__hi0bits>
 8008192:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008196:	e7df      	b.n	8008158 <__d2b+0x70>
 8008198:	08009373 	.word	0x08009373
 800819c:	08009384 	.word	0x08009384

080081a0 <_calloc_r>:
 80081a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80081a2:	fba1 2402 	umull	r2, r4, r1, r2
 80081a6:	b94c      	cbnz	r4, 80081bc <_calloc_r+0x1c>
 80081a8:	4611      	mov	r1, r2
 80081aa:	9201      	str	r2, [sp, #4]
 80081ac:	f000 f87a 	bl	80082a4 <_malloc_r>
 80081b0:	9a01      	ldr	r2, [sp, #4]
 80081b2:	4605      	mov	r5, r0
 80081b4:	b930      	cbnz	r0, 80081c4 <_calloc_r+0x24>
 80081b6:	4628      	mov	r0, r5
 80081b8:	b003      	add	sp, #12
 80081ba:	bd30      	pop	{r4, r5, pc}
 80081bc:	220c      	movs	r2, #12
 80081be:	6002      	str	r2, [r0, #0]
 80081c0:	2500      	movs	r5, #0
 80081c2:	e7f8      	b.n	80081b6 <_calloc_r+0x16>
 80081c4:	4621      	mov	r1, r4
 80081c6:	f7fe f941 	bl	800644c <memset>
 80081ca:	e7f4      	b.n	80081b6 <_calloc_r+0x16>

080081cc <_free_r>:
 80081cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80081ce:	2900      	cmp	r1, #0
 80081d0:	d044      	beq.n	800825c <_free_r+0x90>
 80081d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80081d6:	9001      	str	r0, [sp, #4]
 80081d8:	2b00      	cmp	r3, #0
 80081da:	f1a1 0404 	sub.w	r4, r1, #4
 80081de:	bfb8      	it	lt
 80081e0:	18e4      	addlt	r4, r4, r3
 80081e2:	f000 fa9b 	bl	800871c <__malloc_lock>
 80081e6:	4a1e      	ldr	r2, [pc, #120]	; (8008260 <_free_r+0x94>)
 80081e8:	9801      	ldr	r0, [sp, #4]
 80081ea:	6813      	ldr	r3, [r2, #0]
 80081ec:	b933      	cbnz	r3, 80081fc <_free_r+0x30>
 80081ee:	6063      	str	r3, [r4, #4]
 80081f0:	6014      	str	r4, [r2, #0]
 80081f2:	b003      	add	sp, #12
 80081f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80081f8:	f000 ba96 	b.w	8008728 <__malloc_unlock>
 80081fc:	42a3      	cmp	r3, r4
 80081fe:	d908      	bls.n	8008212 <_free_r+0x46>
 8008200:	6825      	ldr	r5, [r4, #0]
 8008202:	1961      	adds	r1, r4, r5
 8008204:	428b      	cmp	r3, r1
 8008206:	bf01      	itttt	eq
 8008208:	6819      	ldreq	r1, [r3, #0]
 800820a:	685b      	ldreq	r3, [r3, #4]
 800820c:	1949      	addeq	r1, r1, r5
 800820e:	6021      	streq	r1, [r4, #0]
 8008210:	e7ed      	b.n	80081ee <_free_r+0x22>
 8008212:	461a      	mov	r2, r3
 8008214:	685b      	ldr	r3, [r3, #4]
 8008216:	b10b      	cbz	r3, 800821c <_free_r+0x50>
 8008218:	42a3      	cmp	r3, r4
 800821a:	d9fa      	bls.n	8008212 <_free_r+0x46>
 800821c:	6811      	ldr	r1, [r2, #0]
 800821e:	1855      	adds	r5, r2, r1
 8008220:	42a5      	cmp	r5, r4
 8008222:	d10b      	bne.n	800823c <_free_r+0x70>
 8008224:	6824      	ldr	r4, [r4, #0]
 8008226:	4421      	add	r1, r4
 8008228:	1854      	adds	r4, r2, r1
 800822a:	42a3      	cmp	r3, r4
 800822c:	6011      	str	r1, [r2, #0]
 800822e:	d1e0      	bne.n	80081f2 <_free_r+0x26>
 8008230:	681c      	ldr	r4, [r3, #0]
 8008232:	685b      	ldr	r3, [r3, #4]
 8008234:	6053      	str	r3, [r2, #4]
 8008236:	4421      	add	r1, r4
 8008238:	6011      	str	r1, [r2, #0]
 800823a:	e7da      	b.n	80081f2 <_free_r+0x26>
 800823c:	d902      	bls.n	8008244 <_free_r+0x78>
 800823e:	230c      	movs	r3, #12
 8008240:	6003      	str	r3, [r0, #0]
 8008242:	e7d6      	b.n	80081f2 <_free_r+0x26>
 8008244:	6825      	ldr	r5, [r4, #0]
 8008246:	1961      	adds	r1, r4, r5
 8008248:	428b      	cmp	r3, r1
 800824a:	bf04      	itt	eq
 800824c:	6819      	ldreq	r1, [r3, #0]
 800824e:	685b      	ldreq	r3, [r3, #4]
 8008250:	6063      	str	r3, [r4, #4]
 8008252:	bf04      	itt	eq
 8008254:	1949      	addeq	r1, r1, r5
 8008256:	6021      	streq	r1, [r4, #0]
 8008258:	6054      	str	r4, [r2, #4]
 800825a:	e7ca      	b.n	80081f2 <_free_r+0x26>
 800825c:	b003      	add	sp, #12
 800825e:	bd30      	pop	{r4, r5, pc}
 8008260:	20000534 	.word	0x20000534

08008264 <sbrk_aligned>:
 8008264:	b570      	push	{r4, r5, r6, lr}
 8008266:	4e0e      	ldr	r6, [pc, #56]	; (80082a0 <sbrk_aligned+0x3c>)
 8008268:	460c      	mov	r4, r1
 800826a:	6831      	ldr	r1, [r6, #0]
 800826c:	4605      	mov	r5, r0
 800826e:	b911      	cbnz	r1, 8008276 <sbrk_aligned+0x12>
 8008270:	f000 f9e8 	bl	8008644 <_sbrk_r>
 8008274:	6030      	str	r0, [r6, #0]
 8008276:	4621      	mov	r1, r4
 8008278:	4628      	mov	r0, r5
 800827a:	f000 f9e3 	bl	8008644 <_sbrk_r>
 800827e:	1c43      	adds	r3, r0, #1
 8008280:	d00a      	beq.n	8008298 <sbrk_aligned+0x34>
 8008282:	1cc4      	adds	r4, r0, #3
 8008284:	f024 0403 	bic.w	r4, r4, #3
 8008288:	42a0      	cmp	r0, r4
 800828a:	d007      	beq.n	800829c <sbrk_aligned+0x38>
 800828c:	1a21      	subs	r1, r4, r0
 800828e:	4628      	mov	r0, r5
 8008290:	f000 f9d8 	bl	8008644 <_sbrk_r>
 8008294:	3001      	adds	r0, #1
 8008296:	d101      	bne.n	800829c <sbrk_aligned+0x38>
 8008298:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800829c:	4620      	mov	r0, r4
 800829e:	bd70      	pop	{r4, r5, r6, pc}
 80082a0:	20000538 	.word	0x20000538

080082a4 <_malloc_r>:
 80082a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80082a8:	1ccd      	adds	r5, r1, #3
 80082aa:	f025 0503 	bic.w	r5, r5, #3
 80082ae:	3508      	adds	r5, #8
 80082b0:	2d0c      	cmp	r5, #12
 80082b2:	bf38      	it	cc
 80082b4:	250c      	movcc	r5, #12
 80082b6:	2d00      	cmp	r5, #0
 80082b8:	4607      	mov	r7, r0
 80082ba:	db01      	blt.n	80082c0 <_malloc_r+0x1c>
 80082bc:	42a9      	cmp	r1, r5
 80082be:	d905      	bls.n	80082cc <_malloc_r+0x28>
 80082c0:	230c      	movs	r3, #12
 80082c2:	603b      	str	r3, [r7, #0]
 80082c4:	2600      	movs	r6, #0
 80082c6:	4630      	mov	r0, r6
 80082c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80082cc:	4e2e      	ldr	r6, [pc, #184]	; (8008388 <_malloc_r+0xe4>)
 80082ce:	f000 fa25 	bl	800871c <__malloc_lock>
 80082d2:	6833      	ldr	r3, [r6, #0]
 80082d4:	461c      	mov	r4, r3
 80082d6:	bb34      	cbnz	r4, 8008326 <_malloc_r+0x82>
 80082d8:	4629      	mov	r1, r5
 80082da:	4638      	mov	r0, r7
 80082dc:	f7ff ffc2 	bl	8008264 <sbrk_aligned>
 80082e0:	1c43      	adds	r3, r0, #1
 80082e2:	4604      	mov	r4, r0
 80082e4:	d14d      	bne.n	8008382 <_malloc_r+0xde>
 80082e6:	6834      	ldr	r4, [r6, #0]
 80082e8:	4626      	mov	r6, r4
 80082ea:	2e00      	cmp	r6, #0
 80082ec:	d140      	bne.n	8008370 <_malloc_r+0xcc>
 80082ee:	6823      	ldr	r3, [r4, #0]
 80082f0:	4631      	mov	r1, r6
 80082f2:	4638      	mov	r0, r7
 80082f4:	eb04 0803 	add.w	r8, r4, r3
 80082f8:	f000 f9a4 	bl	8008644 <_sbrk_r>
 80082fc:	4580      	cmp	r8, r0
 80082fe:	d13a      	bne.n	8008376 <_malloc_r+0xd2>
 8008300:	6821      	ldr	r1, [r4, #0]
 8008302:	3503      	adds	r5, #3
 8008304:	1a6d      	subs	r5, r5, r1
 8008306:	f025 0503 	bic.w	r5, r5, #3
 800830a:	3508      	adds	r5, #8
 800830c:	2d0c      	cmp	r5, #12
 800830e:	bf38      	it	cc
 8008310:	250c      	movcc	r5, #12
 8008312:	4629      	mov	r1, r5
 8008314:	4638      	mov	r0, r7
 8008316:	f7ff ffa5 	bl	8008264 <sbrk_aligned>
 800831a:	3001      	adds	r0, #1
 800831c:	d02b      	beq.n	8008376 <_malloc_r+0xd2>
 800831e:	6823      	ldr	r3, [r4, #0]
 8008320:	442b      	add	r3, r5
 8008322:	6023      	str	r3, [r4, #0]
 8008324:	e00e      	b.n	8008344 <_malloc_r+0xa0>
 8008326:	6822      	ldr	r2, [r4, #0]
 8008328:	1b52      	subs	r2, r2, r5
 800832a:	d41e      	bmi.n	800836a <_malloc_r+0xc6>
 800832c:	2a0b      	cmp	r2, #11
 800832e:	d916      	bls.n	800835e <_malloc_r+0xba>
 8008330:	1961      	adds	r1, r4, r5
 8008332:	42a3      	cmp	r3, r4
 8008334:	6025      	str	r5, [r4, #0]
 8008336:	bf18      	it	ne
 8008338:	6059      	strne	r1, [r3, #4]
 800833a:	6863      	ldr	r3, [r4, #4]
 800833c:	bf08      	it	eq
 800833e:	6031      	streq	r1, [r6, #0]
 8008340:	5162      	str	r2, [r4, r5]
 8008342:	604b      	str	r3, [r1, #4]
 8008344:	4638      	mov	r0, r7
 8008346:	f104 060b 	add.w	r6, r4, #11
 800834a:	f000 f9ed 	bl	8008728 <__malloc_unlock>
 800834e:	f026 0607 	bic.w	r6, r6, #7
 8008352:	1d23      	adds	r3, r4, #4
 8008354:	1af2      	subs	r2, r6, r3
 8008356:	d0b6      	beq.n	80082c6 <_malloc_r+0x22>
 8008358:	1b9b      	subs	r3, r3, r6
 800835a:	50a3      	str	r3, [r4, r2]
 800835c:	e7b3      	b.n	80082c6 <_malloc_r+0x22>
 800835e:	6862      	ldr	r2, [r4, #4]
 8008360:	42a3      	cmp	r3, r4
 8008362:	bf0c      	ite	eq
 8008364:	6032      	streq	r2, [r6, #0]
 8008366:	605a      	strne	r2, [r3, #4]
 8008368:	e7ec      	b.n	8008344 <_malloc_r+0xa0>
 800836a:	4623      	mov	r3, r4
 800836c:	6864      	ldr	r4, [r4, #4]
 800836e:	e7b2      	b.n	80082d6 <_malloc_r+0x32>
 8008370:	4634      	mov	r4, r6
 8008372:	6876      	ldr	r6, [r6, #4]
 8008374:	e7b9      	b.n	80082ea <_malloc_r+0x46>
 8008376:	230c      	movs	r3, #12
 8008378:	603b      	str	r3, [r7, #0]
 800837a:	4638      	mov	r0, r7
 800837c:	f000 f9d4 	bl	8008728 <__malloc_unlock>
 8008380:	e7a1      	b.n	80082c6 <_malloc_r+0x22>
 8008382:	6025      	str	r5, [r4, #0]
 8008384:	e7de      	b.n	8008344 <_malloc_r+0xa0>
 8008386:	bf00      	nop
 8008388:	20000534 	.word	0x20000534

0800838c <__ssputs_r>:
 800838c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008390:	688e      	ldr	r6, [r1, #8]
 8008392:	429e      	cmp	r6, r3
 8008394:	4682      	mov	sl, r0
 8008396:	460c      	mov	r4, r1
 8008398:	4690      	mov	r8, r2
 800839a:	461f      	mov	r7, r3
 800839c:	d838      	bhi.n	8008410 <__ssputs_r+0x84>
 800839e:	898a      	ldrh	r2, [r1, #12]
 80083a0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80083a4:	d032      	beq.n	800840c <__ssputs_r+0x80>
 80083a6:	6825      	ldr	r5, [r4, #0]
 80083a8:	6909      	ldr	r1, [r1, #16]
 80083aa:	eba5 0901 	sub.w	r9, r5, r1
 80083ae:	6965      	ldr	r5, [r4, #20]
 80083b0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80083b4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80083b8:	3301      	adds	r3, #1
 80083ba:	444b      	add	r3, r9
 80083bc:	106d      	asrs	r5, r5, #1
 80083be:	429d      	cmp	r5, r3
 80083c0:	bf38      	it	cc
 80083c2:	461d      	movcc	r5, r3
 80083c4:	0553      	lsls	r3, r2, #21
 80083c6:	d531      	bpl.n	800842c <__ssputs_r+0xa0>
 80083c8:	4629      	mov	r1, r5
 80083ca:	f7ff ff6b 	bl	80082a4 <_malloc_r>
 80083ce:	4606      	mov	r6, r0
 80083d0:	b950      	cbnz	r0, 80083e8 <__ssputs_r+0x5c>
 80083d2:	230c      	movs	r3, #12
 80083d4:	f8ca 3000 	str.w	r3, [sl]
 80083d8:	89a3      	ldrh	r3, [r4, #12]
 80083da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80083de:	81a3      	strh	r3, [r4, #12]
 80083e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80083e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083e8:	6921      	ldr	r1, [r4, #16]
 80083ea:	464a      	mov	r2, r9
 80083ec:	f7ff fb46 	bl	8007a7c <memcpy>
 80083f0:	89a3      	ldrh	r3, [r4, #12]
 80083f2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80083f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80083fa:	81a3      	strh	r3, [r4, #12]
 80083fc:	6126      	str	r6, [r4, #16]
 80083fe:	6165      	str	r5, [r4, #20]
 8008400:	444e      	add	r6, r9
 8008402:	eba5 0509 	sub.w	r5, r5, r9
 8008406:	6026      	str	r6, [r4, #0]
 8008408:	60a5      	str	r5, [r4, #8]
 800840a:	463e      	mov	r6, r7
 800840c:	42be      	cmp	r6, r7
 800840e:	d900      	bls.n	8008412 <__ssputs_r+0x86>
 8008410:	463e      	mov	r6, r7
 8008412:	6820      	ldr	r0, [r4, #0]
 8008414:	4632      	mov	r2, r6
 8008416:	4641      	mov	r1, r8
 8008418:	f000 f966 	bl	80086e8 <memmove>
 800841c:	68a3      	ldr	r3, [r4, #8]
 800841e:	1b9b      	subs	r3, r3, r6
 8008420:	60a3      	str	r3, [r4, #8]
 8008422:	6823      	ldr	r3, [r4, #0]
 8008424:	4433      	add	r3, r6
 8008426:	6023      	str	r3, [r4, #0]
 8008428:	2000      	movs	r0, #0
 800842a:	e7db      	b.n	80083e4 <__ssputs_r+0x58>
 800842c:	462a      	mov	r2, r5
 800842e:	f000 f981 	bl	8008734 <_realloc_r>
 8008432:	4606      	mov	r6, r0
 8008434:	2800      	cmp	r0, #0
 8008436:	d1e1      	bne.n	80083fc <__ssputs_r+0x70>
 8008438:	6921      	ldr	r1, [r4, #16]
 800843a:	4650      	mov	r0, sl
 800843c:	f7ff fec6 	bl	80081cc <_free_r>
 8008440:	e7c7      	b.n	80083d2 <__ssputs_r+0x46>
	...

08008444 <_svfiprintf_r>:
 8008444:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008448:	4698      	mov	r8, r3
 800844a:	898b      	ldrh	r3, [r1, #12]
 800844c:	061b      	lsls	r3, r3, #24
 800844e:	b09d      	sub	sp, #116	; 0x74
 8008450:	4607      	mov	r7, r0
 8008452:	460d      	mov	r5, r1
 8008454:	4614      	mov	r4, r2
 8008456:	d50e      	bpl.n	8008476 <_svfiprintf_r+0x32>
 8008458:	690b      	ldr	r3, [r1, #16]
 800845a:	b963      	cbnz	r3, 8008476 <_svfiprintf_r+0x32>
 800845c:	2140      	movs	r1, #64	; 0x40
 800845e:	f7ff ff21 	bl	80082a4 <_malloc_r>
 8008462:	6028      	str	r0, [r5, #0]
 8008464:	6128      	str	r0, [r5, #16]
 8008466:	b920      	cbnz	r0, 8008472 <_svfiprintf_r+0x2e>
 8008468:	230c      	movs	r3, #12
 800846a:	603b      	str	r3, [r7, #0]
 800846c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008470:	e0d1      	b.n	8008616 <_svfiprintf_r+0x1d2>
 8008472:	2340      	movs	r3, #64	; 0x40
 8008474:	616b      	str	r3, [r5, #20]
 8008476:	2300      	movs	r3, #0
 8008478:	9309      	str	r3, [sp, #36]	; 0x24
 800847a:	2320      	movs	r3, #32
 800847c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008480:	f8cd 800c 	str.w	r8, [sp, #12]
 8008484:	2330      	movs	r3, #48	; 0x30
 8008486:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008630 <_svfiprintf_r+0x1ec>
 800848a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800848e:	f04f 0901 	mov.w	r9, #1
 8008492:	4623      	mov	r3, r4
 8008494:	469a      	mov	sl, r3
 8008496:	f813 2b01 	ldrb.w	r2, [r3], #1
 800849a:	b10a      	cbz	r2, 80084a0 <_svfiprintf_r+0x5c>
 800849c:	2a25      	cmp	r2, #37	; 0x25
 800849e:	d1f9      	bne.n	8008494 <_svfiprintf_r+0x50>
 80084a0:	ebba 0b04 	subs.w	fp, sl, r4
 80084a4:	d00b      	beq.n	80084be <_svfiprintf_r+0x7a>
 80084a6:	465b      	mov	r3, fp
 80084a8:	4622      	mov	r2, r4
 80084aa:	4629      	mov	r1, r5
 80084ac:	4638      	mov	r0, r7
 80084ae:	f7ff ff6d 	bl	800838c <__ssputs_r>
 80084b2:	3001      	adds	r0, #1
 80084b4:	f000 80aa 	beq.w	800860c <_svfiprintf_r+0x1c8>
 80084b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80084ba:	445a      	add	r2, fp
 80084bc:	9209      	str	r2, [sp, #36]	; 0x24
 80084be:	f89a 3000 	ldrb.w	r3, [sl]
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	f000 80a2 	beq.w	800860c <_svfiprintf_r+0x1c8>
 80084c8:	2300      	movs	r3, #0
 80084ca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80084ce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80084d2:	f10a 0a01 	add.w	sl, sl, #1
 80084d6:	9304      	str	r3, [sp, #16]
 80084d8:	9307      	str	r3, [sp, #28]
 80084da:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80084de:	931a      	str	r3, [sp, #104]	; 0x68
 80084e0:	4654      	mov	r4, sl
 80084e2:	2205      	movs	r2, #5
 80084e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80084e8:	4851      	ldr	r0, [pc, #324]	; (8008630 <_svfiprintf_r+0x1ec>)
 80084ea:	f7f7 fe81 	bl	80001f0 <memchr>
 80084ee:	9a04      	ldr	r2, [sp, #16]
 80084f0:	b9d8      	cbnz	r0, 800852a <_svfiprintf_r+0xe6>
 80084f2:	06d0      	lsls	r0, r2, #27
 80084f4:	bf44      	itt	mi
 80084f6:	2320      	movmi	r3, #32
 80084f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80084fc:	0711      	lsls	r1, r2, #28
 80084fe:	bf44      	itt	mi
 8008500:	232b      	movmi	r3, #43	; 0x2b
 8008502:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008506:	f89a 3000 	ldrb.w	r3, [sl]
 800850a:	2b2a      	cmp	r3, #42	; 0x2a
 800850c:	d015      	beq.n	800853a <_svfiprintf_r+0xf6>
 800850e:	9a07      	ldr	r2, [sp, #28]
 8008510:	4654      	mov	r4, sl
 8008512:	2000      	movs	r0, #0
 8008514:	f04f 0c0a 	mov.w	ip, #10
 8008518:	4621      	mov	r1, r4
 800851a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800851e:	3b30      	subs	r3, #48	; 0x30
 8008520:	2b09      	cmp	r3, #9
 8008522:	d94e      	bls.n	80085c2 <_svfiprintf_r+0x17e>
 8008524:	b1b0      	cbz	r0, 8008554 <_svfiprintf_r+0x110>
 8008526:	9207      	str	r2, [sp, #28]
 8008528:	e014      	b.n	8008554 <_svfiprintf_r+0x110>
 800852a:	eba0 0308 	sub.w	r3, r0, r8
 800852e:	fa09 f303 	lsl.w	r3, r9, r3
 8008532:	4313      	orrs	r3, r2
 8008534:	9304      	str	r3, [sp, #16]
 8008536:	46a2      	mov	sl, r4
 8008538:	e7d2      	b.n	80084e0 <_svfiprintf_r+0x9c>
 800853a:	9b03      	ldr	r3, [sp, #12]
 800853c:	1d19      	adds	r1, r3, #4
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	9103      	str	r1, [sp, #12]
 8008542:	2b00      	cmp	r3, #0
 8008544:	bfbb      	ittet	lt
 8008546:	425b      	neglt	r3, r3
 8008548:	f042 0202 	orrlt.w	r2, r2, #2
 800854c:	9307      	strge	r3, [sp, #28]
 800854e:	9307      	strlt	r3, [sp, #28]
 8008550:	bfb8      	it	lt
 8008552:	9204      	strlt	r2, [sp, #16]
 8008554:	7823      	ldrb	r3, [r4, #0]
 8008556:	2b2e      	cmp	r3, #46	; 0x2e
 8008558:	d10c      	bne.n	8008574 <_svfiprintf_r+0x130>
 800855a:	7863      	ldrb	r3, [r4, #1]
 800855c:	2b2a      	cmp	r3, #42	; 0x2a
 800855e:	d135      	bne.n	80085cc <_svfiprintf_r+0x188>
 8008560:	9b03      	ldr	r3, [sp, #12]
 8008562:	1d1a      	adds	r2, r3, #4
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	9203      	str	r2, [sp, #12]
 8008568:	2b00      	cmp	r3, #0
 800856a:	bfb8      	it	lt
 800856c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008570:	3402      	adds	r4, #2
 8008572:	9305      	str	r3, [sp, #20]
 8008574:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008640 <_svfiprintf_r+0x1fc>
 8008578:	7821      	ldrb	r1, [r4, #0]
 800857a:	2203      	movs	r2, #3
 800857c:	4650      	mov	r0, sl
 800857e:	f7f7 fe37 	bl	80001f0 <memchr>
 8008582:	b140      	cbz	r0, 8008596 <_svfiprintf_r+0x152>
 8008584:	2340      	movs	r3, #64	; 0x40
 8008586:	eba0 000a 	sub.w	r0, r0, sl
 800858a:	fa03 f000 	lsl.w	r0, r3, r0
 800858e:	9b04      	ldr	r3, [sp, #16]
 8008590:	4303      	orrs	r3, r0
 8008592:	3401      	adds	r4, #1
 8008594:	9304      	str	r3, [sp, #16]
 8008596:	f814 1b01 	ldrb.w	r1, [r4], #1
 800859a:	4826      	ldr	r0, [pc, #152]	; (8008634 <_svfiprintf_r+0x1f0>)
 800859c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80085a0:	2206      	movs	r2, #6
 80085a2:	f7f7 fe25 	bl	80001f0 <memchr>
 80085a6:	2800      	cmp	r0, #0
 80085a8:	d038      	beq.n	800861c <_svfiprintf_r+0x1d8>
 80085aa:	4b23      	ldr	r3, [pc, #140]	; (8008638 <_svfiprintf_r+0x1f4>)
 80085ac:	bb1b      	cbnz	r3, 80085f6 <_svfiprintf_r+0x1b2>
 80085ae:	9b03      	ldr	r3, [sp, #12]
 80085b0:	3307      	adds	r3, #7
 80085b2:	f023 0307 	bic.w	r3, r3, #7
 80085b6:	3308      	adds	r3, #8
 80085b8:	9303      	str	r3, [sp, #12]
 80085ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085bc:	4433      	add	r3, r6
 80085be:	9309      	str	r3, [sp, #36]	; 0x24
 80085c0:	e767      	b.n	8008492 <_svfiprintf_r+0x4e>
 80085c2:	fb0c 3202 	mla	r2, ip, r2, r3
 80085c6:	460c      	mov	r4, r1
 80085c8:	2001      	movs	r0, #1
 80085ca:	e7a5      	b.n	8008518 <_svfiprintf_r+0xd4>
 80085cc:	2300      	movs	r3, #0
 80085ce:	3401      	adds	r4, #1
 80085d0:	9305      	str	r3, [sp, #20]
 80085d2:	4619      	mov	r1, r3
 80085d4:	f04f 0c0a 	mov.w	ip, #10
 80085d8:	4620      	mov	r0, r4
 80085da:	f810 2b01 	ldrb.w	r2, [r0], #1
 80085de:	3a30      	subs	r2, #48	; 0x30
 80085e0:	2a09      	cmp	r2, #9
 80085e2:	d903      	bls.n	80085ec <_svfiprintf_r+0x1a8>
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d0c5      	beq.n	8008574 <_svfiprintf_r+0x130>
 80085e8:	9105      	str	r1, [sp, #20]
 80085ea:	e7c3      	b.n	8008574 <_svfiprintf_r+0x130>
 80085ec:	fb0c 2101 	mla	r1, ip, r1, r2
 80085f0:	4604      	mov	r4, r0
 80085f2:	2301      	movs	r3, #1
 80085f4:	e7f0      	b.n	80085d8 <_svfiprintf_r+0x194>
 80085f6:	ab03      	add	r3, sp, #12
 80085f8:	9300      	str	r3, [sp, #0]
 80085fa:	462a      	mov	r2, r5
 80085fc:	4b0f      	ldr	r3, [pc, #60]	; (800863c <_svfiprintf_r+0x1f8>)
 80085fe:	a904      	add	r1, sp, #16
 8008600:	4638      	mov	r0, r7
 8008602:	f7fd ffcb 	bl	800659c <_printf_float>
 8008606:	1c42      	adds	r2, r0, #1
 8008608:	4606      	mov	r6, r0
 800860a:	d1d6      	bne.n	80085ba <_svfiprintf_r+0x176>
 800860c:	89ab      	ldrh	r3, [r5, #12]
 800860e:	065b      	lsls	r3, r3, #25
 8008610:	f53f af2c 	bmi.w	800846c <_svfiprintf_r+0x28>
 8008614:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008616:	b01d      	add	sp, #116	; 0x74
 8008618:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800861c:	ab03      	add	r3, sp, #12
 800861e:	9300      	str	r3, [sp, #0]
 8008620:	462a      	mov	r2, r5
 8008622:	4b06      	ldr	r3, [pc, #24]	; (800863c <_svfiprintf_r+0x1f8>)
 8008624:	a904      	add	r1, sp, #16
 8008626:	4638      	mov	r0, r7
 8008628:	f7fe fa5c 	bl	8006ae4 <_printf_i>
 800862c:	e7eb      	b.n	8008606 <_svfiprintf_r+0x1c2>
 800862e:	bf00      	nop
 8008630:	080094dc 	.word	0x080094dc
 8008634:	080094e6 	.word	0x080094e6
 8008638:	0800659d 	.word	0x0800659d
 800863c:	0800838d 	.word	0x0800838d
 8008640:	080094e2 	.word	0x080094e2

08008644 <_sbrk_r>:
 8008644:	b538      	push	{r3, r4, r5, lr}
 8008646:	4d06      	ldr	r5, [pc, #24]	; (8008660 <_sbrk_r+0x1c>)
 8008648:	2300      	movs	r3, #0
 800864a:	4604      	mov	r4, r0
 800864c:	4608      	mov	r0, r1
 800864e:	602b      	str	r3, [r5, #0]
 8008650:	f7f9 fbbe 	bl	8001dd0 <_sbrk>
 8008654:	1c43      	adds	r3, r0, #1
 8008656:	d102      	bne.n	800865e <_sbrk_r+0x1a>
 8008658:	682b      	ldr	r3, [r5, #0]
 800865a:	b103      	cbz	r3, 800865e <_sbrk_r+0x1a>
 800865c:	6023      	str	r3, [r4, #0]
 800865e:	bd38      	pop	{r3, r4, r5, pc}
 8008660:	2000053c 	.word	0x2000053c

08008664 <__assert_func>:
 8008664:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008666:	4614      	mov	r4, r2
 8008668:	461a      	mov	r2, r3
 800866a:	4b09      	ldr	r3, [pc, #36]	; (8008690 <__assert_func+0x2c>)
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	4605      	mov	r5, r0
 8008670:	68d8      	ldr	r0, [r3, #12]
 8008672:	b14c      	cbz	r4, 8008688 <__assert_func+0x24>
 8008674:	4b07      	ldr	r3, [pc, #28]	; (8008694 <__assert_func+0x30>)
 8008676:	9100      	str	r1, [sp, #0]
 8008678:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800867c:	4906      	ldr	r1, [pc, #24]	; (8008698 <__assert_func+0x34>)
 800867e:	462b      	mov	r3, r5
 8008680:	f000 f80e 	bl	80086a0 <fiprintf>
 8008684:	f000 faac 	bl	8008be0 <abort>
 8008688:	4b04      	ldr	r3, [pc, #16]	; (800869c <__assert_func+0x38>)
 800868a:	461c      	mov	r4, r3
 800868c:	e7f3      	b.n	8008676 <__assert_func+0x12>
 800868e:	bf00      	nop
 8008690:	2000000c 	.word	0x2000000c
 8008694:	080094ed 	.word	0x080094ed
 8008698:	080094fa 	.word	0x080094fa
 800869c:	08009528 	.word	0x08009528

080086a0 <fiprintf>:
 80086a0:	b40e      	push	{r1, r2, r3}
 80086a2:	b503      	push	{r0, r1, lr}
 80086a4:	4601      	mov	r1, r0
 80086a6:	ab03      	add	r3, sp, #12
 80086a8:	4805      	ldr	r0, [pc, #20]	; (80086c0 <fiprintf+0x20>)
 80086aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80086ae:	6800      	ldr	r0, [r0, #0]
 80086b0:	9301      	str	r3, [sp, #4]
 80086b2:	f000 f897 	bl	80087e4 <_vfiprintf_r>
 80086b6:	b002      	add	sp, #8
 80086b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80086bc:	b003      	add	sp, #12
 80086be:	4770      	bx	lr
 80086c0:	2000000c 	.word	0x2000000c

080086c4 <__ascii_mbtowc>:
 80086c4:	b082      	sub	sp, #8
 80086c6:	b901      	cbnz	r1, 80086ca <__ascii_mbtowc+0x6>
 80086c8:	a901      	add	r1, sp, #4
 80086ca:	b142      	cbz	r2, 80086de <__ascii_mbtowc+0x1a>
 80086cc:	b14b      	cbz	r3, 80086e2 <__ascii_mbtowc+0x1e>
 80086ce:	7813      	ldrb	r3, [r2, #0]
 80086d0:	600b      	str	r3, [r1, #0]
 80086d2:	7812      	ldrb	r2, [r2, #0]
 80086d4:	1e10      	subs	r0, r2, #0
 80086d6:	bf18      	it	ne
 80086d8:	2001      	movne	r0, #1
 80086da:	b002      	add	sp, #8
 80086dc:	4770      	bx	lr
 80086de:	4610      	mov	r0, r2
 80086e0:	e7fb      	b.n	80086da <__ascii_mbtowc+0x16>
 80086e2:	f06f 0001 	mvn.w	r0, #1
 80086e6:	e7f8      	b.n	80086da <__ascii_mbtowc+0x16>

080086e8 <memmove>:
 80086e8:	4288      	cmp	r0, r1
 80086ea:	b510      	push	{r4, lr}
 80086ec:	eb01 0402 	add.w	r4, r1, r2
 80086f0:	d902      	bls.n	80086f8 <memmove+0x10>
 80086f2:	4284      	cmp	r4, r0
 80086f4:	4623      	mov	r3, r4
 80086f6:	d807      	bhi.n	8008708 <memmove+0x20>
 80086f8:	1e43      	subs	r3, r0, #1
 80086fa:	42a1      	cmp	r1, r4
 80086fc:	d008      	beq.n	8008710 <memmove+0x28>
 80086fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008702:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008706:	e7f8      	b.n	80086fa <memmove+0x12>
 8008708:	4402      	add	r2, r0
 800870a:	4601      	mov	r1, r0
 800870c:	428a      	cmp	r2, r1
 800870e:	d100      	bne.n	8008712 <memmove+0x2a>
 8008710:	bd10      	pop	{r4, pc}
 8008712:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008716:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800871a:	e7f7      	b.n	800870c <memmove+0x24>

0800871c <__malloc_lock>:
 800871c:	4801      	ldr	r0, [pc, #4]	; (8008724 <__malloc_lock+0x8>)
 800871e:	f000 bc1f 	b.w	8008f60 <__retarget_lock_acquire_recursive>
 8008722:	bf00      	nop
 8008724:	20000540 	.word	0x20000540

08008728 <__malloc_unlock>:
 8008728:	4801      	ldr	r0, [pc, #4]	; (8008730 <__malloc_unlock+0x8>)
 800872a:	f000 bc1a 	b.w	8008f62 <__retarget_lock_release_recursive>
 800872e:	bf00      	nop
 8008730:	20000540 	.word	0x20000540

08008734 <_realloc_r>:
 8008734:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008738:	4680      	mov	r8, r0
 800873a:	4614      	mov	r4, r2
 800873c:	460e      	mov	r6, r1
 800873e:	b921      	cbnz	r1, 800874a <_realloc_r+0x16>
 8008740:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008744:	4611      	mov	r1, r2
 8008746:	f7ff bdad 	b.w	80082a4 <_malloc_r>
 800874a:	b92a      	cbnz	r2, 8008758 <_realloc_r+0x24>
 800874c:	f7ff fd3e 	bl	80081cc <_free_r>
 8008750:	4625      	mov	r5, r4
 8008752:	4628      	mov	r0, r5
 8008754:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008758:	f000 fc6a 	bl	8009030 <_malloc_usable_size_r>
 800875c:	4284      	cmp	r4, r0
 800875e:	4607      	mov	r7, r0
 8008760:	d802      	bhi.n	8008768 <_realloc_r+0x34>
 8008762:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008766:	d812      	bhi.n	800878e <_realloc_r+0x5a>
 8008768:	4621      	mov	r1, r4
 800876a:	4640      	mov	r0, r8
 800876c:	f7ff fd9a 	bl	80082a4 <_malloc_r>
 8008770:	4605      	mov	r5, r0
 8008772:	2800      	cmp	r0, #0
 8008774:	d0ed      	beq.n	8008752 <_realloc_r+0x1e>
 8008776:	42bc      	cmp	r4, r7
 8008778:	4622      	mov	r2, r4
 800877a:	4631      	mov	r1, r6
 800877c:	bf28      	it	cs
 800877e:	463a      	movcs	r2, r7
 8008780:	f7ff f97c 	bl	8007a7c <memcpy>
 8008784:	4631      	mov	r1, r6
 8008786:	4640      	mov	r0, r8
 8008788:	f7ff fd20 	bl	80081cc <_free_r>
 800878c:	e7e1      	b.n	8008752 <_realloc_r+0x1e>
 800878e:	4635      	mov	r5, r6
 8008790:	e7df      	b.n	8008752 <_realloc_r+0x1e>

08008792 <__sfputc_r>:
 8008792:	6893      	ldr	r3, [r2, #8]
 8008794:	3b01      	subs	r3, #1
 8008796:	2b00      	cmp	r3, #0
 8008798:	b410      	push	{r4}
 800879a:	6093      	str	r3, [r2, #8]
 800879c:	da08      	bge.n	80087b0 <__sfputc_r+0x1e>
 800879e:	6994      	ldr	r4, [r2, #24]
 80087a0:	42a3      	cmp	r3, r4
 80087a2:	db01      	blt.n	80087a8 <__sfputc_r+0x16>
 80087a4:	290a      	cmp	r1, #10
 80087a6:	d103      	bne.n	80087b0 <__sfputc_r+0x1e>
 80087a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80087ac:	f000 b94a 	b.w	8008a44 <__swbuf_r>
 80087b0:	6813      	ldr	r3, [r2, #0]
 80087b2:	1c58      	adds	r0, r3, #1
 80087b4:	6010      	str	r0, [r2, #0]
 80087b6:	7019      	strb	r1, [r3, #0]
 80087b8:	4608      	mov	r0, r1
 80087ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 80087be:	4770      	bx	lr

080087c0 <__sfputs_r>:
 80087c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087c2:	4606      	mov	r6, r0
 80087c4:	460f      	mov	r7, r1
 80087c6:	4614      	mov	r4, r2
 80087c8:	18d5      	adds	r5, r2, r3
 80087ca:	42ac      	cmp	r4, r5
 80087cc:	d101      	bne.n	80087d2 <__sfputs_r+0x12>
 80087ce:	2000      	movs	r0, #0
 80087d0:	e007      	b.n	80087e2 <__sfputs_r+0x22>
 80087d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80087d6:	463a      	mov	r2, r7
 80087d8:	4630      	mov	r0, r6
 80087da:	f7ff ffda 	bl	8008792 <__sfputc_r>
 80087de:	1c43      	adds	r3, r0, #1
 80087e0:	d1f3      	bne.n	80087ca <__sfputs_r+0xa>
 80087e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080087e4 <_vfiprintf_r>:
 80087e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087e8:	460d      	mov	r5, r1
 80087ea:	b09d      	sub	sp, #116	; 0x74
 80087ec:	4614      	mov	r4, r2
 80087ee:	4698      	mov	r8, r3
 80087f0:	4606      	mov	r6, r0
 80087f2:	b118      	cbz	r0, 80087fc <_vfiprintf_r+0x18>
 80087f4:	6983      	ldr	r3, [r0, #24]
 80087f6:	b90b      	cbnz	r3, 80087fc <_vfiprintf_r+0x18>
 80087f8:	f000 fb14 	bl	8008e24 <__sinit>
 80087fc:	4b89      	ldr	r3, [pc, #548]	; (8008a24 <_vfiprintf_r+0x240>)
 80087fe:	429d      	cmp	r5, r3
 8008800:	d11b      	bne.n	800883a <_vfiprintf_r+0x56>
 8008802:	6875      	ldr	r5, [r6, #4]
 8008804:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008806:	07d9      	lsls	r1, r3, #31
 8008808:	d405      	bmi.n	8008816 <_vfiprintf_r+0x32>
 800880a:	89ab      	ldrh	r3, [r5, #12]
 800880c:	059a      	lsls	r2, r3, #22
 800880e:	d402      	bmi.n	8008816 <_vfiprintf_r+0x32>
 8008810:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008812:	f000 fba5 	bl	8008f60 <__retarget_lock_acquire_recursive>
 8008816:	89ab      	ldrh	r3, [r5, #12]
 8008818:	071b      	lsls	r3, r3, #28
 800881a:	d501      	bpl.n	8008820 <_vfiprintf_r+0x3c>
 800881c:	692b      	ldr	r3, [r5, #16]
 800881e:	b9eb      	cbnz	r3, 800885c <_vfiprintf_r+0x78>
 8008820:	4629      	mov	r1, r5
 8008822:	4630      	mov	r0, r6
 8008824:	f000 f96e 	bl	8008b04 <__swsetup_r>
 8008828:	b1c0      	cbz	r0, 800885c <_vfiprintf_r+0x78>
 800882a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800882c:	07dc      	lsls	r4, r3, #31
 800882e:	d50e      	bpl.n	800884e <_vfiprintf_r+0x6a>
 8008830:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008834:	b01d      	add	sp, #116	; 0x74
 8008836:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800883a:	4b7b      	ldr	r3, [pc, #492]	; (8008a28 <_vfiprintf_r+0x244>)
 800883c:	429d      	cmp	r5, r3
 800883e:	d101      	bne.n	8008844 <_vfiprintf_r+0x60>
 8008840:	68b5      	ldr	r5, [r6, #8]
 8008842:	e7df      	b.n	8008804 <_vfiprintf_r+0x20>
 8008844:	4b79      	ldr	r3, [pc, #484]	; (8008a2c <_vfiprintf_r+0x248>)
 8008846:	429d      	cmp	r5, r3
 8008848:	bf08      	it	eq
 800884a:	68f5      	ldreq	r5, [r6, #12]
 800884c:	e7da      	b.n	8008804 <_vfiprintf_r+0x20>
 800884e:	89ab      	ldrh	r3, [r5, #12]
 8008850:	0598      	lsls	r0, r3, #22
 8008852:	d4ed      	bmi.n	8008830 <_vfiprintf_r+0x4c>
 8008854:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008856:	f000 fb84 	bl	8008f62 <__retarget_lock_release_recursive>
 800885a:	e7e9      	b.n	8008830 <_vfiprintf_r+0x4c>
 800885c:	2300      	movs	r3, #0
 800885e:	9309      	str	r3, [sp, #36]	; 0x24
 8008860:	2320      	movs	r3, #32
 8008862:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008866:	f8cd 800c 	str.w	r8, [sp, #12]
 800886a:	2330      	movs	r3, #48	; 0x30
 800886c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008a30 <_vfiprintf_r+0x24c>
 8008870:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008874:	f04f 0901 	mov.w	r9, #1
 8008878:	4623      	mov	r3, r4
 800887a:	469a      	mov	sl, r3
 800887c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008880:	b10a      	cbz	r2, 8008886 <_vfiprintf_r+0xa2>
 8008882:	2a25      	cmp	r2, #37	; 0x25
 8008884:	d1f9      	bne.n	800887a <_vfiprintf_r+0x96>
 8008886:	ebba 0b04 	subs.w	fp, sl, r4
 800888a:	d00b      	beq.n	80088a4 <_vfiprintf_r+0xc0>
 800888c:	465b      	mov	r3, fp
 800888e:	4622      	mov	r2, r4
 8008890:	4629      	mov	r1, r5
 8008892:	4630      	mov	r0, r6
 8008894:	f7ff ff94 	bl	80087c0 <__sfputs_r>
 8008898:	3001      	adds	r0, #1
 800889a:	f000 80aa 	beq.w	80089f2 <_vfiprintf_r+0x20e>
 800889e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80088a0:	445a      	add	r2, fp
 80088a2:	9209      	str	r2, [sp, #36]	; 0x24
 80088a4:	f89a 3000 	ldrb.w	r3, [sl]
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	f000 80a2 	beq.w	80089f2 <_vfiprintf_r+0x20e>
 80088ae:	2300      	movs	r3, #0
 80088b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80088b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80088b8:	f10a 0a01 	add.w	sl, sl, #1
 80088bc:	9304      	str	r3, [sp, #16]
 80088be:	9307      	str	r3, [sp, #28]
 80088c0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80088c4:	931a      	str	r3, [sp, #104]	; 0x68
 80088c6:	4654      	mov	r4, sl
 80088c8:	2205      	movs	r2, #5
 80088ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80088ce:	4858      	ldr	r0, [pc, #352]	; (8008a30 <_vfiprintf_r+0x24c>)
 80088d0:	f7f7 fc8e 	bl	80001f0 <memchr>
 80088d4:	9a04      	ldr	r2, [sp, #16]
 80088d6:	b9d8      	cbnz	r0, 8008910 <_vfiprintf_r+0x12c>
 80088d8:	06d1      	lsls	r1, r2, #27
 80088da:	bf44      	itt	mi
 80088dc:	2320      	movmi	r3, #32
 80088de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80088e2:	0713      	lsls	r3, r2, #28
 80088e4:	bf44      	itt	mi
 80088e6:	232b      	movmi	r3, #43	; 0x2b
 80088e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80088ec:	f89a 3000 	ldrb.w	r3, [sl]
 80088f0:	2b2a      	cmp	r3, #42	; 0x2a
 80088f2:	d015      	beq.n	8008920 <_vfiprintf_r+0x13c>
 80088f4:	9a07      	ldr	r2, [sp, #28]
 80088f6:	4654      	mov	r4, sl
 80088f8:	2000      	movs	r0, #0
 80088fa:	f04f 0c0a 	mov.w	ip, #10
 80088fe:	4621      	mov	r1, r4
 8008900:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008904:	3b30      	subs	r3, #48	; 0x30
 8008906:	2b09      	cmp	r3, #9
 8008908:	d94e      	bls.n	80089a8 <_vfiprintf_r+0x1c4>
 800890a:	b1b0      	cbz	r0, 800893a <_vfiprintf_r+0x156>
 800890c:	9207      	str	r2, [sp, #28]
 800890e:	e014      	b.n	800893a <_vfiprintf_r+0x156>
 8008910:	eba0 0308 	sub.w	r3, r0, r8
 8008914:	fa09 f303 	lsl.w	r3, r9, r3
 8008918:	4313      	orrs	r3, r2
 800891a:	9304      	str	r3, [sp, #16]
 800891c:	46a2      	mov	sl, r4
 800891e:	e7d2      	b.n	80088c6 <_vfiprintf_r+0xe2>
 8008920:	9b03      	ldr	r3, [sp, #12]
 8008922:	1d19      	adds	r1, r3, #4
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	9103      	str	r1, [sp, #12]
 8008928:	2b00      	cmp	r3, #0
 800892a:	bfbb      	ittet	lt
 800892c:	425b      	neglt	r3, r3
 800892e:	f042 0202 	orrlt.w	r2, r2, #2
 8008932:	9307      	strge	r3, [sp, #28]
 8008934:	9307      	strlt	r3, [sp, #28]
 8008936:	bfb8      	it	lt
 8008938:	9204      	strlt	r2, [sp, #16]
 800893a:	7823      	ldrb	r3, [r4, #0]
 800893c:	2b2e      	cmp	r3, #46	; 0x2e
 800893e:	d10c      	bne.n	800895a <_vfiprintf_r+0x176>
 8008940:	7863      	ldrb	r3, [r4, #1]
 8008942:	2b2a      	cmp	r3, #42	; 0x2a
 8008944:	d135      	bne.n	80089b2 <_vfiprintf_r+0x1ce>
 8008946:	9b03      	ldr	r3, [sp, #12]
 8008948:	1d1a      	adds	r2, r3, #4
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	9203      	str	r2, [sp, #12]
 800894e:	2b00      	cmp	r3, #0
 8008950:	bfb8      	it	lt
 8008952:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008956:	3402      	adds	r4, #2
 8008958:	9305      	str	r3, [sp, #20]
 800895a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008a40 <_vfiprintf_r+0x25c>
 800895e:	7821      	ldrb	r1, [r4, #0]
 8008960:	2203      	movs	r2, #3
 8008962:	4650      	mov	r0, sl
 8008964:	f7f7 fc44 	bl	80001f0 <memchr>
 8008968:	b140      	cbz	r0, 800897c <_vfiprintf_r+0x198>
 800896a:	2340      	movs	r3, #64	; 0x40
 800896c:	eba0 000a 	sub.w	r0, r0, sl
 8008970:	fa03 f000 	lsl.w	r0, r3, r0
 8008974:	9b04      	ldr	r3, [sp, #16]
 8008976:	4303      	orrs	r3, r0
 8008978:	3401      	adds	r4, #1
 800897a:	9304      	str	r3, [sp, #16]
 800897c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008980:	482c      	ldr	r0, [pc, #176]	; (8008a34 <_vfiprintf_r+0x250>)
 8008982:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008986:	2206      	movs	r2, #6
 8008988:	f7f7 fc32 	bl	80001f0 <memchr>
 800898c:	2800      	cmp	r0, #0
 800898e:	d03f      	beq.n	8008a10 <_vfiprintf_r+0x22c>
 8008990:	4b29      	ldr	r3, [pc, #164]	; (8008a38 <_vfiprintf_r+0x254>)
 8008992:	bb1b      	cbnz	r3, 80089dc <_vfiprintf_r+0x1f8>
 8008994:	9b03      	ldr	r3, [sp, #12]
 8008996:	3307      	adds	r3, #7
 8008998:	f023 0307 	bic.w	r3, r3, #7
 800899c:	3308      	adds	r3, #8
 800899e:	9303      	str	r3, [sp, #12]
 80089a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80089a2:	443b      	add	r3, r7
 80089a4:	9309      	str	r3, [sp, #36]	; 0x24
 80089a6:	e767      	b.n	8008878 <_vfiprintf_r+0x94>
 80089a8:	fb0c 3202 	mla	r2, ip, r2, r3
 80089ac:	460c      	mov	r4, r1
 80089ae:	2001      	movs	r0, #1
 80089b0:	e7a5      	b.n	80088fe <_vfiprintf_r+0x11a>
 80089b2:	2300      	movs	r3, #0
 80089b4:	3401      	adds	r4, #1
 80089b6:	9305      	str	r3, [sp, #20]
 80089b8:	4619      	mov	r1, r3
 80089ba:	f04f 0c0a 	mov.w	ip, #10
 80089be:	4620      	mov	r0, r4
 80089c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80089c4:	3a30      	subs	r2, #48	; 0x30
 80089c6:	2a09      	cmp	r2, #9
 80089c8:	d903      	bls.n	80089d2 <_vfiprintf_r+0x1ee>
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d0c5      	beq.n	800895a <_vfiprintf_r+0x176>
 80089ce:	9105      	str	r1, [sp, #20]
 80089d0:	e7c3      	b.n	800895a <_vfiprintf_r+0x176>
 80089d2:	fb0c 2101 	mla	r1, ip, r1, r2
 80089d6:	4604      	mov	r4, r0
 80089d8:	2301      	movs	r3, #1
 80089da:	e7f0      	b.n	80089be <_vfiprintf_r+0x1da>
 80089dc:	ab03      	add	r3, sp, #12
 80089de:	9300      	str	r3, [sp, #0]
 80089e0:	462a      	mov	r2, r5
 80089e2:	4b16      	ldr	r3, [pc, #88]	; (8008a3c <_vfiprintf_r+0x258>)
 80089e4:	a904      	add	r1, sp, #16
 80089e6:	4630      	mov	r0, r6
 80089e8:	f7fd fdd8 	bl	800659c <_printf_float>
 80089ec:	4607      	mov	r7, r0
 80089ee:	1c78      	adds	r0, r7, #1
 80089f0:	d1d6      	bne.n	80089a0 <_vfiprintf_r+0x1bc>
 80089f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80089f4:	07d9      	lsls	r1, r3, #31
 80089f6:	d405      	bmi.n	8008a04 <_vfiprintf_r+0x220>
 80089f8:	89ab      	ldrh	r3, [r5, #12]
 80089fa:	059a      	lsls	r2, r3, #22
 80089fc:	d402      	bmi.n	8008a04 <_vfiprintf_r+0x220>
 80089fe:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008a00:	f000 faaf 	bl	8008f62 <__retarget_lock_release_recursive>
 8008a04:	89ab      	ldrh	r3, [r5, #12]
 8008a06:	065b      	lsls	r3, r3, #25
 8008a08:	f53f af12 	bmi.w	8008830 <_vfiprintf_r+0x4c>
 8008a0c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008a0e:	e711      	b.n	8008834 <_vfiprintf_r+0x50>
 8008a10:	ab03      	add	r3, sp, #12
 8008a12:	9300      	str	r3, [sp, #0]
 8008a14:	462a      	mov	r2, r5
 8008a16:	4b09      	ldr	r3, [pc, #36]	; (8008a3c <_vfiprintf_r+0x258>)
 8008a18:	a904      	add	r1, sp, #16
 8008a1a:	4630      	mov	r0, r6
 8008a1c:	f7fe f862 	bl	8006ae4 <_printf_i>
 8008a20:	e7e4      	b.n	80089ec <_vfiprintf_r+0x208>
 8008a22:	bf00      	nop
 8008a24:	08009654 	.word	0x08009654
 8008a28:	08009674 	.word	0x08009674
 8008a2c:	08009634 	.word	0x08009634
 8008a30:	080094dc 	.word	0x080094dc
 8008a34:	080094e6 	.word	0x080094e6
 8008a38:	0800659d 	.word	0x0800659d
 8008a3c:	080087c1 	.word	0x080087c1
 8008a40:	080094e2 	.word	0x080094e2

08008a44 <__swbuf_r>:
 8008a44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a46:	460e      	mov	r6, r1
 8008a48:	4614      	mov	r4, r2
 8008a4a:	4605      	mov	r5, r0
 8008a4c:	b118      	cbz	r0, 8008a56 <__swbuf_r+0x12>
 8008a4e:	6983      	ldr	r3, [r0, #24]
 8008a50:	b90b      	cbnz	r3, 8008a56 <__swbuf_r+0x12>
 8008a52:	f000 f9e7 	bl	8008e24 <__sinit>
 8008a56:	4b21      	ldr	r3, [pc, #132]	; (8008adc <__swbuf_r+0x98>)
 8008a58:	429c      	cmp	r4, r3
 8008a5a:	d12b      	bne.n	8008ab4 <__swbuf_r+0x70>
 8008a5c:	686c      	ldr	r4, [r5, #4]
 8008a5e:	69a3      	ldr	r3, [r4, #24]
 8008a60:	60a3      	str	r3, [r4, #8]
 8008a62:	89a3      	ldrh	r3, [r4, #12]
 8008a64:	071a      	lsls	r2, r3, #28
 8008a66:	d52f      	bpl.n	8008ac8 <__swbuf_r+0x84>
 8008a68:	6923      	ldr	r3, [r4, #16]
 8008a6a:	b36b      	cbz	r3, 8008ac8 <__swbuf_r+0x84>
 8008a6c:	6923      	ldr	r3, [r4, #16]
 8008a6e:	6820      	ldr	r0, [r4, #0]
 8008a70:	1ac0      	subs	r0, r0, r3
 8008a72:	6963      	ldr	r3, [r4, #20]
 8008a74:	b2f6      	uxtb	r6, r6
 8008a76:	4283      	cmp	r3, r0
 8008a78:	4637      	mov	r7, r6
 8008a7a:	dc04      	bgt.n	8008a86 <__swbuf_r+0x42>
 8008a7c:	4621      	mov	r1, r4
 8008a7e:	4628      	mov	r0, r5
 8008a80:	f000 f93c 	bl	8008cfc <_fflush_r>
 8008a84:	bb30      	cbnz	r0, 8008ad4 <__swbuf_r+0x90>
 8008a86:	68a3      	ldr	r3, [r4, #8]
 8008a88:	3b01      	subs	r3, #1
 8008a8a:	60a3      	str	r3, [r4, #8]
 8008a8c:	6823      	ldr	r3, [r4, #0]
 8008a8e:	1c5a      	adds	r2, r3, #1
 8008a90:	6022      	str	r2, [r4, #0]
 8008a92:	701e      	strb	r6, [r3, #0]
 8008a94:	6963      	ldr	r3, [r4, #20]
 8008a96:	3001      	adds	r0, #1
 8008a98:	4283      	cmp	r3, r0
 8008a9a:	d004      	beq.n	8008aa6 <__swbuf_r+0x62>
 8008a9c:	89a3      	ldrh	r3, [r4, #12]
 8008a9e:	07db      	lsls	r3, r3, #31
 8008aa0:	d506      	bpl.n	8008ab0 <__swbuf_r+0x6c>
 8008aa2:	2e0a      	cmp	r6, #10
 8008aa4:	d104      	bne.n	8008ab0 <__swbuf_r+0x6c>
 8008aa6:	4621      	mov	r1, r4
 8008aa8:	4628      	mov	r0, r5
 8008aaa:	f000 f927 	bl	8008cfc <_fflush_r>
 8008aae:	b988      	cbnz	r0, 8008ad4 <__swbuf_r+0x90>
 8008ab0:	4638      	mov	r0, r7
 8008ab2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008ab4:	4b0a      	ldr	r3, [pc, #40]	; (8008ae0 <__swbuf_r+0x9c>)
 8008ab6:	429c      	cmp	r4, r3
 8008ab8:	d101      	bne.n	8008abe <__swbuf_r+0x7a>
 8008aba:	68ac      	ldr	r4, [r5, #8]
 8008abc:	e7cf      	b.n	8008a5e <__swbuf_r+0x1a>
 8008abe:	4b09      	ldr	r3, [pc, #36]	; (8008ae4 <__swbuf_r+0xa0>)
 8008ac0:	429c      	cmp	r4, r3
 8008ac2:	bf08      	it	eq
 8008ac4:	68ec      	ldreq	r4, [r5, #12]
 8008ac6:	e7ca      	b.n	8008a5e <__swbuf_r+0x1a>
 8008ac8:	4621      	mov	r1, r4
 8008aca:	4628      	mov	r0, r5
 8008acc:	f000 f81a 	bl	8008b04 <__swsetup_r>
 8008ad0:	2800      	cmp	r0, #0
 8008ad2:	d0cb      	beq.n	8008a6c <__swbuf_r+0x28>
 8008ad4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8008ad8:	e7ea      	b.n	8008ab0 <__swbuf_r+0x6c>
 8008ada:	bf00      	nop
 8008adc:	08009654 	.word	0x08009654
 8008ae0:	08009674 	.word	0x08009674
 8008ae4:	08009634 	.word	0x08009634

08008ae8 <__ascii_wctomb>:
 8008ae8:	b149      	cbz	r1, 8008afe <__ascii_wctomb+0x16>
 8008aea:	2aff      	cmp	r2, #255	; 0xff
 8008aec:	bf85      	ittet	hi
 8008aee:	238a      	movhi	r3, #138	; 0x8a
 8008af0:	6003      	strhi	r3, [r0, #0]
 8008af2:	700a      	strbls	r2, [r1, #0]
 8008af4:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8008af8:	bf98      	it	ls
 8008afa:	2001      	movls	r0, #1
 8008afc:	4770      	bx	lr
 8008afe:	4608      	mov	r0, r1
 8008b00:	4770      	bx	lr
	...

08008b04 <__swsetup_r>:
 8008b04:	4b32      	ldr	r3, [pc, #200]	; (8008bd0 <__swsetup_r+0xcc>)
 8008b06:	b570      	push	{r4, r5, r6, lr}
 8008b08:	681d      	ldr	r5, [r3, #0]
 8008b0a:	4606      	mov	r6, r0
 8008b0c:	460c      	mov	r4, r1
 8008b0e:	b125      	cbz	r5, 8008b1a <__swsetup_r+0x16>
 8008b10:	69ab      	ldr	r3, [r5, #24]
 8008b12:	b913      	cbnz	r3, 8008b1a <__swsetup_r+0x16>
 8008b14:	4628      	mov	r0, r5
 8008b16:	f000 f985 	bl	8008e24 <__sinit>
 8008b1a:	4b2e      	ldr	r3, [pc, #184]	; (8008bd4 <__swsetup_r+0xd0>)
 8008b1c:	429c      	cmp	r4, r3
 8008b1e:	d10f      	bne.n	8008b40 <__swsetup_r+0x3c>
 8008b20:	686c      	ldr	r4, [r5, #4]
 8008b22:	89a3      	ldrh	r3, [r4, #12]
 8008b24:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008b28:	0719      	lsls	r1, r3, #28
 8008b2a:	d42c      	bmi.n	8008b86 <__swsetup_r+0x82>
 8008b2c:	06dd      	lsls	r5, r3, #27
 8008b2e:	d411      	bmi.n	8008b54 <__swsetup_r+0x50>
 8008b30:	2309      	movs	r3, #9
 8008b32:	6033      	str	r3, [r6, #0]
 8008b34:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008b38:	81a3      	strh	r3, [r4, #12]
 8008b3a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008b3e:	e03e      	b.n	8008bbe <__swsetup_r+0xba>
 8008b40:	4b25      	ldr	r3, [pc, #148]	; (8008bd8 <__swsetup_r+0xd4>)
 8008b42:	429c      	cmp	r4, r3
 8008b44:	d101      	bne.n	8008b4a <__swsetup_r+0x46>
 8008b46:	68ac      	ldr	r4, [r5, #8]
 8008b48:	e7eb      	b.n	8008b22 <__swsetup_r+0x1e>
 8008b4a:	4b24      	ldr	r3, [pc, #144]	; (8008bdc <__swsetup_r+0xd8>)
 8008b4c:	429c      	cmp	r4, r3
 8008b4e:	bf08      	it	eq
 8008b50:	68ec      	ldreq	r4, [r5, #12]
 8008b52:	e7e6      	b.n	8008b22 <__swsetup_r+0x1e>
 8008b54:	0758      	lsls	r0, r3, #29
 8008b56:	d512      	bpl.n	8008b7e <__swsetup_r+0x7a>
 8008b58:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008b5a:	b141      	cbz	r1, 8008b6e <__swsetup_r+0x6a>
 8008b5c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008b60:	4299      	cmp	r1, r3
 8008b62:	d002      	beq.n	8008b6a <__swsetup_r+0x66>
 8008b64:	4630      	mov	r0, r6
 8008b66:	f7ff fb31 	bl	80081cc <_free_r>
 8008b6a:	2300      	movs	r3, #0
 8008b6c:	6363      	str	r3, [r4, #52]	; 0x34
 8008b6e:	89a3      	ldrh	r3, [r4, #12]
 8008b70:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008b74:	81a3      	strh	r3, [r4, #12]
 8008b76:	2300      	movs	r3, #0
 8008b78:	6063      	str	r3, [r4, #4]
 8008b7a:	6923      	ldr	r3, [r4, #16]
 8008b7c:	6023      	str	r3, [r4, #0]
 8008b7e:	89a3      	ldrh	r3, [r4, #12]
 8008b80:	f043 0308 	orr.w	r3, r3, #8
 8008b84:	81a3      	strh	r3, [r4, #12]
 8008b86:	6923      	ldr	r3, [r4, #16]
 8008b88:	b94b      	cbnz	r3, 8008b9e <__swsetup_r+0x9a>
 8008b8a:	89a3      	ldrh	r3, [r4, #12]
 8008b8c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008b90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008b94:	d003      	beq.n	8008b9e <__swsetup_r+0x9a>
 8008b96:	4621      	mov	r1, r4
 8008b98:	4630      	mov	r0, r6
 8008b9a:	f000 fa09 	bl	8008fb0 <__smakebuf_r>
 8008b9e:	89a0      	ldrh	r0, [r4, #12]
 8008ba0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008ba4:	f010 0301 	ands.w	r3, r0, #1
 8008ba8:	d00a      	beq.n	8008bc0 <__swsetup_r+0xbc>
 8008baa:	2300      	movs	r3, #0
 8008bac:	60a3      	str	r3, [r4, #8]
 8008bae:	6963      	ldr	r3, [r4, #20]
 8008bb0:	425b      	negs	r3, r3
 8008bb2:	61a3      	str	r3, [r4, #24]
 8008bb4:	6923      	ldr	r3, [r4, #16]
 8008bb6:	b943      	cbnz	r3, 8008bca <__swsetup_r+0xc6>
 8008bb8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008bbc:	d1ba      	bne.n	8008b34 <__swsetup_r+0x30>
 8008bbe:	bd70      	pop	{r4, r5, r6, pc}
 8008bc0:	0781      	lsls	r1, r0, #30
 8008bc2:	bf58      	it	pl
 8008bc4:	6963      	ldrpl	r3, [r4, #20]
 8008bc6:	60a3      	str	r3, [r4, #8]
 8008bc8:	e7f4      	b.n	8008bb4 <__swsetup_r+0xb0>
 8008bca:	2000      	movs	r0, #0
 8008bcc:	e7f7      	b.n	8008bbe <__swsetup_r+0xba>
 8008bce:	bf00      	nop
 8008bd0:	2000000c 	.word	0x2000000c
 8008bd4:	08009654 	.word	0x08009654
 8008bd8:	08009674 	.word	0x08009674
 8008bdc:	08009634 	.word	0x08009634

08008be0 <abort>:
 8008be0:	b508      	push	{r3, lr}
 8008be2:	2006      	movs	r0, #6
 8008be4:	f000 fa54 	bl	8009090 <raise>
 8008be8:	2001      	movs	r0, #1
 8008bea:	f7f9 f879 	bl	8001ce0 <_exit>
	...

08008bf0 <__sflush_r>:
 8008bf0:	898a      	ldrh	r2, [r1, #12]
 8008bf2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008bf6:	4605      	mov	r5, r0
 8008bf8:	0710      	lsls	r0, r2, #28
 8008bfa:	460c      	mov	r4, r1
 8008bfc:	d458      	bmi.n	8008cb0 <__sflush_r+0xc0>
 8008bfe:	684b      	ldr	r3, [r1, #4]
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	dc05      	bgt.n	8008c10 <__sflush_r+0x20>
 8008c04:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	dc02      	bgt.n	8008c10 <__sflush_r+0x20>
 8008c0a:	2000      	movs	r0, #0
 8008c0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c10:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008c12:	2e00      	cmp	r6, #0
 8008c14:	d0f9      	beq.n	8008c0a <__sflush_r+0x1a>
 8008c16:	2300      	movs	r3, #0
 8008c18:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008c1c:	682f      	ldr	r7, [r5, #0]
 8008c1e:	602b      	str	r3, [r5, #0]
 8008c20:	d032      	beq.n	8008c88 <__sflush_r+0x98>
 8008c22:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008c24:	89a3      	ldrh	r3, [r4, #12]
 8008c26:	075a      	lsls	r2, r3, #29
 8008c28:	d505      	bpl.n	8008c36 <__sflush_r+0x46>
 8008c2a:	6863      	ldr	r3, [r4, #4]
 8008c2c:	1ac0      	subs	r0, r0, r3
 8008c2e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008c30:	b10b      	cbz	r3, 8008c36 <__sflush_r+0x46>
 8008c32:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008c34:	1ac0      	subs	r0, r0, r3
 8008c36:	2300      	movs	r3, #0
 8008c38:	4602      	mov	r2, r0
 8008c3a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008c3c:	6a21      	ldr	r1, [r4, #32]
 8008c3e:	4628      	mov	r0, r5
 8008c40:	47b0      	blx	r6
 8008c42:	1c43      	adds	r3, r0, #1
 8008c44:	89a3      	ldrh	r3, [r4, #12]
 8008c46:	d106      	bne.n	8008c56 <__sflush_r+0x66>
 8008c48:	6829      	ldr	r1, [r5, #0]
 8008c4a:	291d      	cmp	r1, #29
 8008c4c:	d82c      	bhi.n	8008ca8 <__sflush_r+0xb8>
 8008c4e:	4a2a      	ldr	r2, [pc, #168]	; (8008cf8 <__sflush_r+0x108>)
 8008c50:	40ca      	lsrs	r2, r1
 8008c52:	07d6      	lsls	r6, r2, #31
 8008c54:	d528      	bpl.n	8008ca8 <__sflush_r+0xb8>
 8008c56:	2200      	movs	r2, #0
 8008c58:	6062      	str	r2, [r4, #4]
 8008c5a:	04d9      	lsls	r1, r3, #19
 8008c5c:	6922      	ldr	r2, [r4, #16]
 8008c5e:	6022      	str	r2, [r4, #0]
 8008c60:	d504      	bpl.n	8008c6c <__sflush_r+0x7c>
 8008c62:	1c42      	adds	r2, r0, #1
 8008c64:	d101      	bne.n	8008c6a <__sflush_r+0x7a>
 8008c66:	682b      	ldr	r3, [r5, #0]
 8008c68:	b903      	cbnz	r3, 8008c6c <__sflush_r+0x7c>
 8008c6a:	6560      	str	r0, [r4, #84]	; 0x54
 8008c6c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008c6e:	602f      	str	r7, [r5, #0]
 8008c70:	2900      	cmp	r1, #0
 8008c72:	d0ca      	beq.n	8008c0a <__sflush_r+0x1a>
 8008c74:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008c78:	4299      	cmp	r1, r3
 8008c7a:	d002      	beq.n	8008c82 <__sflush_r+0x92>
 8008c7c:	4628      	mov	r0, r5
 8008c7e:	f7ff faa5 	bl	80081cc <_free_r>
 8008c82:	2000      	movs	r0, #0
 8008c84:	6360      	str	r0, [r4, #52]	; 0x34
 8008c86:	e7c1      	b.n	8008c0c <__sflush_r+0x1c>
 8008c88:	6a21      	ldr	r1, [r4, #32]
 8008c8a:	2301      	movs	r3, #1
 8008c8c:	4628      	mov	r0, r5
 8008c8e:	47b0      	blx	r6
 8008c90:	1c41      	adds	r1, r0, #1
 8008c92:	d1c7      	bne.n	8008c24 <__sflush_r+0x34>
 8008c94:	682b      	ldr	r3, [r5, #0]
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d0c4      	beq.n	8008c24 <__sflush_r+0x34>
 8008c9a:	2b1d      	cmp	r3, #29
 8008c9c:	d001      	beq.n	8008ca2 <__sflush_r+0xb2>
 8008c9e:	2b16      	cmp	r3, #22
 8008ca0:	d101      	bne.n	8008ca6 <__sflush_r+0xb6>
 8008ca2:	602f      	str	r7, [r5, #0]
 8008ca4:	e7b1      	b.n	8008c0a <__sflush_r+0x1a>
 8008ca6:	89a3      	ldrh	r3, [r4, #12]
 8008ca8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008cac:	81a3      	strh	r3, [r4, #12]
 8008cae:	e7ad      	b.n	8008c0c <__sflush_r+0x1c>
 8008cb0:	690f      	ldr	r7, [r1, #16]
 8008cb2:	2f00      	cmp	r7, #0
 8008cb4:	d0a9      	beq.n	8008c0a <__sflush_r+0x1a>
 8008cb6:	0793      	lsls	r3, r2, #30
 8008cb8:	680e      	ldr	r6, [r1, #0]
 8008cba:	bf08      	it	eq
 8008cbc:	694b      	ldreq	r3, [r1, #20]
 8008cbe:	600f      	str	r7, [r1, #0]
 8008cc0:	bf18      	it	ne
 8008cc2:	2300      	movne	r3, #0
 8008cc4:	eba6 0807 	sub.w	r8, r6, r7
 8008cc8:	608b      	str	r3, [r1, #8]
 8008cca:	f1b8 0f00 	cmp.w	r8, #0
 8008cce:	dd9c      	ble.n	8008c0a <__sflush_r+0x1a>
 8008cd0:	6a21      	ldr	r1, [r4, #32]
 8008cd2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008cd4:	4643      	mov	r3, r8
 8008cd6:	463a      	mov	r2, r7
 8008cd8:	4628      	mov	r0, r5
 8008cda:	47b0      	blx	r6
 8008cdc:	2800      	cmp	r0, #0
 8008cde:	dc06      	bgt.n	8008cee <__sflush_r+0xfe>
 8008ce0:	89a3      	ldrh	r3, [r4, #12]
 8008ce2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008ce6:	81a3      	strh	r3, [r4, #12]
 8008ce8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008cec:	e78e      	b.n	8008c0c <__sflush_r+0x1c>
 8008cee:	4407      	add	r7, r0
 8008cf0:	eba8 0800 	sub.w	r8, r8, r0
 8008cf4:	e7e9      	b.n	8008cca <__sflush_r+0xda>
 8008cf6:	bf00      	nop
 8008cf8:	20400001 	.word	0x20400001

08008cfc <_fflush_r>:
 8008cfc:	b538      	push	{r3, r4, r5, lr}
 8008cfe:	690b      	ldr	r3, [r1, #16]
 8008d00:	4605      	mov	r5, r0
 8008d02:	460c      	mov	r4, r1
 8008d04:	b913      	cbnz	r3, 8008d0c <_fflush_r+0x10>
 8008d06:	2500      	movs	r5, #0
 8008d08:	4628      	mov	r0, r5
 8008d0a:	bd38      	pop	{r3, r4, r5, pc}
 8008d0c:	b118      	cbz	r0, 8008d16 <_fflush_r+0x1a>
 8008d0e:	6983      	ldr	r3, [r0, #24]
 8008d10:	b90b      	cbnz	r3, 8008d16 <_fflush_r+0x1a>
 8008d12:	f000 f887 	bl	8008e24 <__sinit>
 8008d16:	4b14      	ldr	r3, [pc, #80]	; (8008d68 <_fflush_r+0x6c>)
 8008d18:	429c      	cmp	r4, r3
 8008d1a:	d11b      	bne.n	8008d54 <_fflush_r+0x58>
 8008d1c:	686c      	ldr	r4, [r5, #4]
 8008d1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d0ef      	beq.n	8008d06 <_fflush_r+0xa>
 8008d26:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008d28:	07d0      	lsls	r0, r2, #31
 8008d2a:	d404      	bmi.n	8008d36 <_fflush_r+0x3a>
 8008d2c:	0599      	lsls	r1, r3, #22
 8008d2e:	d402      	bmi.n	8008d36 <_fflush_r+0x3a>
 8008d30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008d32:	f000 f915 	bl	8008f60 <__retarget_lock_acquire_recursive>
 8008d36:	4628      	mov	r0, r5
 8008d38:	4621      	mov	r1, r4
 8008d3a:	f7ff ff59 	bl	8008bf0 <__sflush_r>
 8008d3e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008d40:	07da      	lsls	r2, r3, #31
 8008d42:	4605      	mov	r5, r0
 8008d44:	d4e0      	bmi.n	8008d08 <_fflush_r+0xc>
 8008d46:	89a3      	ldrh	r3, [r4, #12]
 8008d48:	059b      	lsls	r3, r3, #22
 8008d4a:	d4dd      	bmi.n	8008d08 <_fflush_r+0xc>
 8008d4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008d4e:	f000 f908 	bl	8008f62 <__retarget_lock_release_recursive>
 8008d52:	e7d9      	b.n	8008d08 <_fflush_r+0xc>
 8008d54:	4b05      	ldr	r3, [pc, #20]	; (8008d6c <_fflush_r+0x70>)
 8008d56:	429c      	cmp	r4, r3
 8008d58:	d101      	bne.n	8008d5e <_fflush_r+0x62>
 8008d5a:	68ac      	ldr	r4, [r5, #8]
 8008d5c:	e7df      	b.n	8008d1e <_fflush_r+0x22>
 8008d5e:	4b04      	ldr	r3, [pc, #16]	; (8008d70 <_fflush_r+0x74>)
 8008d60:	429c      	cmp	r4, r3
 8008d62:	bf08      	it	eq
 8008d64:	68ec      	ldreq	r4, [r5, #12]
 8008d66:	e7da      	b.n	8008d1e <_fflush_r+0x22>
 8008d68:	08009654 	.word	0x08009654
 8008d6c:	08009674 	.word	0x08009674
 8008d70:	08009634 	.word	0x08009634

08008d74 <std>:
 8008d74:	2300      	movs	r3, #0
 8008d76:	b510      	push	{r4, lr}
 8008d78:	4604      	mov	r4, r0
 8008d7a:	e9c0 3300 	strd	r3, r3, [r0]
 8008d7e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008d82:	6083      	str	r3, [r0, #8]
 8008d84:	8181      	strh	r1, [r0, #12]
 8008d86:	6643      	str	r3, [r0, #100]	; 0x64
 8008d88:	81c2      	strh	r2, [r0, #14]
 8008d8a:	6183      	str	r3, [r0, #24]
 8008d8c:	4619      	mov	r1, r3
 8008d8e:	2208      	movs	r2, #8
 8008d90:	305c      	adds	r0, #92	; 0x5c
 8008d92:	f7fd fb5b 	bl	800644c <memset>
 8008d96:	4b05      	ldr	r3, [pc, #20]	; (8008dac <std+0x38>)
 8008d98:	6263      	str	r3, [r4, #36]	; 0x24
 8008d9a:	4b05      	ldr	r3, [pc, #20]	; (8008db0 <std+0x3c>)
 8008d9c:	62a3      	str	r3, [r4, #40]	; 0x28
 8008d9e:	4b05      	ldr	r3, [pc, #20]	; (8008db4 <std+0x40>)
 8008da0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008da2:	4b05      	ldr	r3, [pc, #20]	; (8008db8 <std+0x44>)
 8008da4:	6224      	str	r4, [r4, #32]
 8008da6:	6323      	str	r3, [r4, #48]	; 0x30
 8008da8:	bd10      	pop	{r4, pc}
 8008daa:	bf00      	nop
 8008dac:	080090c9 	.word	0x080090c9
 8008db0:	080090eb 	.word	0x080090eb
 8008db4:	08009123 	.word	0x08009123
 8008db8:	08009147 	.word	0x08009147

08008dbc <_cleanup_r>:
 8008dbc:	4901      	ldr	r1, [pc, #4]	; (8008dc4 <_cleanup_r+0x8>)
 8008dbe:	f000 b8af 	b.w	8008f20 <_fwalk_reent>
 8008dc2:	bf00      	nop
 8008dc4:	08008cfd 	.word	0x08008cfd

08008dc8 <__sfmoreglue>:
 8008dc8:	b570      	push	{r4, r5, r6, lr}
 8008dca:	2268      	movs	r2, #104	; 0x68
 8008dcc:	1e4d      	subs	r5, r1, #1
 8008dce:	4355      	muls	r5, r2
 8008dd0:	460e      	mov	r6, r1
 8008dd2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008dd6:	f7ff fa65 	bl	80082a4 <_malloc_r>
 8008dda:	4604      	mov	r4, r0
 8008ddc:	b140      	cbz	r0, 8008df0 <__sfmoreglue+0x28>
 8008dde:	2100      	movs	r1, #0
 8008de0:	e9c0 1600 	strd	r1, r6, [r0]
 8008de4:	300c      	adds	r0, #12
 8008de6:	60a0      	str	r0, [r4, #8]
 8008de8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008dec:	f7fd fb2e 	bl	800644c <memset>
 8008df0:	4620      	mov	r0, r4
 8008df2:	bd70      	pop	{r4, r5, r6, pc}

08008df4 <__sfp_lock_acquire>:
 8008df4:	4801      	ldr	r0, [pc, #4]	; (8008dfc <__sfp_lock_acquire+0x8>)
 8008df6:	f000 b8b3 	b.w	8008f60 <__retarget_lock_acquire_recursive>
 8008dfa:	bf00      	nop
 8008dfc:	20000541 	.word	0x20000541

08008e00 <__sfp_lock_release>:
 8008e00:	4801      	ldr	r0, [pc, #4]	; (8008e08 <__sfp_lock_release+0x8>)
 8008e02:	f000 b8ae 	b.w	8008f62 <__retarget_lock_release_recursive>
 8008e06:	bf00      	nop
 8008e08:	20000541 	.word	0x20000541

08008e0c <__sinit_lock_acquire>:
 8008e0c:	4801      	ldr	r0, [pc, #4]	; (8008e14 <__sinit_lock_acquire+0x8>)
 8008e0e:	f000 b8a7 	b.w	8008f60 <__retarget_lock_acquire_recursive>
 8008e12:	bf00      	nop
 8008e14:	20000542 	.word	0x20000542

08008e18 <__sinit_lock_release>:
 8008e18:	4801      	ldr	r0, [pc, #4]	; (8008e20 <__sinit_lock_release+0x8>)
 8008e1a:	f000 b8a2 	b.w	8008f62 <__retarget_lock_release_recursive>
 8008e1e:	bf00      	nop
 8008e20:	20000542 	.word	0x20000542

08008e24 <__sinit>:
 8008e24:	b510      	push	{r4, lr}
 8008e26:	4604      	mov	r4, r0
 8008e28:	f7ff fff0 	bl	8008e0c <__sinit_lock_acquire>
 8008e2c:	69a3      	ldr	r3, [r4, #24]
 8008e2e:	b11b      	cbz	r3, 8008e38 <__sinit+0x14>
 8008e30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008e34:	f7ff bff0 	b.w	8008e18 <__sinit_lock_release>
 8008e38:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008e3c:	6523      	str	r3, [r4, #80]	; 0x50
 8008e3e:	4b13      	ldr	r3, [pc, #76]	; (8008e8c <__sinit+0x68>)
 8008e40:	4a13      	ldr	r2, [pc, #76]	; (8008e90 <__sinit+0x6c>)
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	62a2      	str	r2, [r4, #40]	; 0x28
 8008e46:	42a3      	cmp	r3, r4
 8008e48:	bf04      	itt	eq
 8008e4a:	2301      	moveq	r3, #1
 8008e4c:	61a3      	streq	r3, [r4, #24]
 8008e4e:	4620      	mov	r0, r4
 8008e50:	f000 f820 	bl	8008e94 <__sfp>
 8008e54:	6060      	str	r0, [r4, #4]
 8008e56:	4620      	mov	r0, r4
 8008e58:	f000 f81c 	bl	8008e94 <__sfp>
 8008e5c:	60a0      	str	r0, [r4, #8]
 8008e5e:	4620      	mov	r0, r4
 8008e60:	f000 f818 	bl	8008e94 <__sfp>
 8008e64:	2200      	movs	r2, #0
 8008e66:	60e0      	str	r0, [r4, #12]
 8008e68:	2104      	movs	r1, #4
 8008e6a:	6860      	ldr	r0, [r4, #4]
 8008e6c:	f7ff ff82 	bl	8008d74 <std>
 8008e70:	68a0      	ldr	r0, [r4, #8]
 8008e72:	2201      	movs	r2, #1
 8008e74:	2109      	movs	r1, #9
 8008e76:	f7ff ff7d 	bl	8008d74 <std>
 8008e7a:	68e0      	ldr	r0, [r4, #12]
 8008e7c:	2202      	movs	r2, #2
 8008e7e:	2112      	movs	r1, #18
 8008e80:	f7ff ff78 	bl	8008d74 <std>
 8008e84:	2301      	movs	r3, #1
 8008e86:	61a3      	str	r3, [r4, #24]
 8008e88:	e7d2      	b.n	8008e30 <__sinit+0xc>
 8008e8a:	bf00      	nop
 8008e8c:	080092bc 	.word	0x080092bc
 8008e90:	08008dbd 	.word	0x08008dbd

08008e94 <__sfp>:
 8008e94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e96:	4607      	mov	r7, r0
 8008e98:	f7ff ffac 	bl	8008df4 <__sfp_lock_acquire>
 8008e9c:	4b1e      	ldr	r3, [pc, #120]	; (8008f18 <__sfp+0x84>)
 8008e9e:	681e      	ldr	r6, [r3, #0]
 8008ea0:	69b3      	ldr	r3, [r6, #24]
 8008ea2:	b913      	cbnz	r3, 8008eaa <__sfp+0x16>
 8008ea4:	4630      	mov	r0, r6
 8008ea6:	f7ff ffbd 	bl	8008e24 <__sinit>
 8008eaa:	3648      	adds	r6, #72	; 0x48
 8008eac:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008eb0:	3b01      	subs	r3, #1
 8008eb2:	d503      	bpl.n	8008ebc <__sfp+0x28>
 8008eb4:	6833      	ldr	r3, [r6, #0]
 8008eb6:	b30b      	cbz	r3, 8008efc <__sfp+0x68>
 8008eb8:	6836      	ldr	r6, [r6, #0]
 8008eba:	e7f7      	b.n	8008eac <__sfp+0x18>
 8008ebc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008ec0:	b9d5      	cbnz	r5, 8008ef8 <__sfp+0x64>
 8008ec2:	4b16      	ldr	r3, [pc, #88]	; (8008f1c <__sfp+0x88>)
 8008ec4:	60e3      	str	r3, [r4, #12]
 8008ec6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008eca:	6665      	str	r5, [r4, #100]	; 0x64
 8008ecc:	f000 f847 	bl	8008f5e <__retarget_lock_init_recursive>
 8008ed0:	f7ff ff96 	bl	8008e00 <__sfp_lock_release>
 8008ed4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008ed8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008edc:	6025      	str	r5, [r4, #0]
 8008ede:	61a5      	str	r5, [r4, #24]
 8008ee0:	2208      	movs	r2, #8
 8008ee2:	4629      	mov	r1, r5
 8008ee4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008ee8:	f7fd fab0 	bl	800644c <memset>
 8008eec:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008ef0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008ef4:	4620      	mov	r0, r4
 8008ef6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008ef8:	3468      	adds	r4, #104	; 0x68
 8008efa:	e7d9      	b.n	8008eb0 <__sfp+0x1c>
 8008efc:	2104      	movs	r1, #4
 8008efe:	4638      	mov	r0, r7
 8008f00:	f7ff ff62 	bl	8008dc8 <__sfmoreglue>
 8008f04:	4604      	mov	r4, r0
 8008f06:	6030      	str	r0, [r6, #0]
 8008f08:	2800      	cmp	r0, #0
 8008f0a:	d1d5      	bne.n	8008eb8 <__sfp+0x24>
 8008f0c:	f7ff ff78 	bl	8008e00 <__sfp_lock_release>
 8008f10:	230c      	movs	r3, #12
 8008f12:	603b      	str	r3, [r7, #0]
 8008f14:	e7ee      	b.n	8008ef4 <__sfp+0x60>
 8008f16:	bf00      	nop
 8008f18:	080092bc 	.word	0x080092bc
 8008f1c:	ffff0001 	.word	0xffff0001

08008f20 <_fwalk_reent>:
 8008f20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008f24:	4606      	mov	r6, r0
 8008f26:	4688      	mov	r8, r1
 8008f28:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008f2c:	2700      	movs	r7, #0
 8008f2e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008f32:	f1b9 0901 	subs.w	r9, r9, #1
 8008f36:	d505      	bpl.n	8008f44 <_fwalk_reent+0x24>
 8008f38:	6824      	ldr	r4, [r4, #0]
 8008f3a:	2c00      	cmp	r4, #0
 8008f3c:	d1f7      	bne.n	8008f2e <_fwalk_reent+0xe>
 8008f3e:	4638      	mov	r0, r7
 8008f40:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008f44:	89ab      	ldrh	r3, [r5, #12]
 8008f46:	2b01      	cmp	r3, #1
 8008f48:	d907      	bls.n	8008f5a <_fwalk_reent+0x3a>
 8008f4a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008f4e:	3301      	adds	r3, #1
 8008f50:	d003      	beq.n	8008f5a <_fwalk_reent+0x3a>
 8008f52:	4629      	mov	r1, r5
 8008f54:	4630      	mov	r0, r6
 8008f56:	47c0      	blx	r8
 8008f58:	4307      	orrs	r7, r0
 8008f5a:	3568      	adds	r5, #104	; 0x68
 8008f5c:	e7e9      	b.n	8008f32 <_fwalk_reent+0x12>

08008f5e <__retarget_lock_init_recursive>:
 8008f5e:	4770      	bx	lr

08008f60 <__retarget_lock_acquire_recursive>:
 8008f60:	4770      	bx	lr

08008f62 <__retarget_lock_release_recursive>:
 8008f62:	4770      	bx	lr

08008f64 <__swhatbuf_r>:
 8008f64:	b570      	push	{r4, r5, r6, lr}
 8008f66:	460e      	mov	r6, r1
 8008f68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f6c:	2900      	cmp	r1, #0
 8008f6e:	b096      	sub	sp, #88	; 0x58
 8008f70:	4614      	mov	r4, r2
 8008f72:	461d      	mov	r5, r3
 8008f74:	da08      	bge.n	8008f88 <__swhatbuf_r+0x24>
 8008f76:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008f7a:	2200      	movs	r2, #0
 8008f7c:	602a      	str	r2, [r5, #0]
 8008f7e:	061a      	lsls	r2, r3, #24
 8008f80:	d410      	bmi.n	8008fa4 <__swhatbuf_r+0x40>
 8008f82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008f86:	e00e      	b.n	8008fa6 <__swhatbuf_r+0x42>
 8008f88:	466a      	mov	r2, sp
 8008f8a:	f000 f903 	bl	8009194 <_fstat_r>
 8008f8e:	2800      	cmp	r0, #0
 8008f90:	dbf1      	blt.n	8008f76 <__swhatbuf_r+0x12>
 8008f92:	9a01      	ldr	r2, [sp, #4]
 8008f94:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008f98:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008f9c:	425a      	negs	r2, r3
 8008f9e:	415a      	adcs	r2, r3
 8008fa0:	602a      	str	r2, [r5, #0]
 8008fa2:	e7ee      	b.n	8008f82 <__swhatbuf_r+0x1e>
 8008fa4:	2340      	movs	r3, #64	; 0x40
 8008fa6:	2000      	movs	r0, #0
 8008fa8:	6023      	str	r3, [r4, #0]
 8008faa:	b016      	add	sp, #88	; 0x58
 8008fac:	bd70      	pop	{r4, r5, r6, pc}
	...

08008fb0 <__smakebuf_r>:
 8008fb0:	898b      	ldrh	r3, [r1, #12]
 8008fb2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008fb4:	079d      	lsls	r5, r3, #30
 8008fb6:	4606      	mov	r6, r0
 8008fb8:	460c      	mov	r4, r1
 8008fba:	d507      	bpl.n	8008fcc <__smakebuf_r+0x1c>
 8008fbc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008fc0:	6023      	str	r3, [r4, #0]
 8008fc2:	6123      	str	r3, [r4, #16]
 8008fc4:	2301      	movs	r3, #1
 8008fc6:	6163      	str	r3, [r4, #20]
 8008fc8:	b002      	add	sp, #8
 8008fca:	bd70      	pop	{r4, r5, r6, pc}
 8008fcc:	ab01      	add	r3, sp, #4
 8008fce:	466a      	mov	r2, sp
 8008fd0:	f7ff ffc8 	bl	8008f64 <__swhatbuf_r>
 8008fd4:	9900      	ldr	r1, [sp, #0]
 8008fd6:	4605      	mov	r5, r0
 8008fd8:	4630      	mov	r0, r6
 8008fda:	f7ff f963 	bl	80082a4 <_malloc_r>
 8008fde:	b948      	cbnz	r0, 8008ff4 <__smakebuf_r+0x44>
 8008fe0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008fe4:	059a      	lsls	r2, r3, #22
 8008fe6:	d4ef      	bmi.n	8008fc8 <__smakebuf_r+0x18>
 8008fe8:	f023 0303 	bic.w	r3, r3, #3
 8008fec:	f043 0302 	orr.w	r3, r3, #2
 8008ff0:	81a3      	strh	r3, [r4, #12]
 8008ff2:	e7e3      	b.n	8008fbc <__smakebuf_r+0xc>
 8008ff4:	4b0d      	ldr	r3, [pc, #52]	; (800902c <__smakebuf_r+0x7c>)
 8008ff6:	62b3      	str	r3, [r6, #40]	; 0x28
 8008ff8:	89a3      	ldrh	r3, [r4, #12]
 8008ffa:	6020      	str	r0, [r4, #0]
 8008ffc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009000:	81a3      	strh	r3, [r4, #12]
 8009002:	9b00      	ldr	r3, [sp, #0]
 8009004:	6163      	str	r3, [r4, #20]
 8009006:	9b01      	ldr	r3, [sp, #4]
 8009008:	6120      	str	r0, [r4, #16]
 800900a:	b15b      	cbz	r3, 8009024 <__smakebuf_r+0x74>
 800900c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009010:	4630      	mov	r0, r6
 8009012:	f000 f8d1 	bl	80091b8 <_isatty_r>
 8009016:	b128      	cbz	r0, 8009024 <__smakebuf_r+0x74>
 8009018:	89a3      	ldrh	r3, [r4, #12]
 800901a:	f023 0303 	bic.w	r3, r3, #3
 800901e:	f043 0301 	orr.w	r3, r3, #1
 8009022:	81a3      	strh	r3, [r4, #12]
 8009024:	89a0      	ldrh	r0, [r4, #12]
 8009026:	4305      	orrs	r5, r0
 8009028:	81a5      	strh	r5, [r4, #12]
 800902a:	e7cd      	b.n	8008fc8 <__smakebuf_r+0x18>
 800902c:	08008dbd 	.word	0x08008dbd

08009030 <_malloc_usable_size_r>:
 8009030:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009034:	1f18      	subs	r0, r3, #4
 8009036:	2b00      	cmp	r3, #0
 8009038:	bfbc      	itt	lt
 800903a:	580b      	ldrlt	r3, [r1, r0]
 800903c:	18c0      	addlt	r0, r0, r3
 800903e:	4770      	bx	lr

08009040 <_raise_r>:
 8009040:	291f      	cmp	r1, #31
 8009042:	b538      	push	{r3, r4, r5, lr}
 8009044:	4604      	mov	r4, r0
 8009046:	460d      	mov	r5, r1
 8009048:	d904      	bls.n	8009054 <_raise_r+0x14>
 800904a:	2316      	movs	r3, #22
 800904c:	6003      	str	r3, [r0, #0]
 800904e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009052:	bd38      	pop	{r3, r4, r5, pc}
 8009054:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009056:	b112      	cbz	r2, 800905e <_raise_r+0x1e>
 8009058:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800905c:	b94b      	cbnz	r3, 8009072 <_raise_r+0x32>
 800905e:	4620      	mov	r0, r4
 8009060:	f000 f830 	bl	80090c4 <_getpid_r>
 8009064:	462a      	mov	r2, r5
 8009066:	4601      	mov	r1, r0
 8009068:	4620      	mov	r0, r4
 800906a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800906e:	f000 b817 	b.w	80090a0 <_kill_r>
 8009072:	2b01      	cmp	r3, #1
 8009074:	d00a      	beq.n	800908c <_raise_r+0x4c>
 8009076:	1c59      	adds	r1, r3, #1
 8009078:	d103      	bne.n	8009082 <_raise_r+0x42>
 800907a:	2316      	movs	r3, #22
 800907c:	6003      	str	r3, [r0, #0]
 800907e:	2001      	movs	r0, #1
 8009080:	e7e7      	b.n	8009052 <_raise_r+0x12>
 8009082:	2400      	movs	r4, #0
 8009084:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009088:	4628      	mov	r0, r5
 800908a:	4798      	blx	r3
 800908c:	2000      	movs	r0, #0
 800908e:	e7e0      	b.n	8009052 <_raise_r+0x12>

08009090 <raise>:
 8009090:	4b02      	ldr	r3, [pc, #8]	; (800909c <raise+0xc>)
 8009092:	4601      	mov	r1, r0
 8009094:	6818      	ldr	r0, [r3, #0]
 8009096:	f7ff bfd3 	b.w	8009040 <_raise_r>
 800909a:	bf00      	nop
 800909c:	2000000c 	.word	0x2000000c

080090a0 <_kill_r>:
 80090a0:	b538      	push	{r3, r4, r5, lr}
 80090a2:	4d07      	ldr	r5, [pc, #28]	; (80090c0 <_kill_r+0x20>)
 80090a4:	2300      	movs	r3, #0
 80090a6:	4604      	mov	r4, r0
 80090a8:	4608      	mov	r0, r1
 80090aa:	4611      	mov	r1, r2
 80090ac:	602b      	str	r3, [r5, #0]
 80090ae:	f7f8 fe07 	bl	8001cc0 <_kill>
 80090b2:	1c43      	adds	r3, r0, #1
 80090b4:	d102      	bne.n	80090bc <_kill_r+0x1c>
 80090b6:	682b      	ldr	r3, [r5, #0]
 80090b8:	b103      	cbz	r3, 80090bc <_kill_r+0x1c>
 80090ba:	6023      	str	r3, [r4, #0]
 80090bc:	bd38      	pop	{r3, r4, r5, pc}
 80090be:	bf00      	nop
 80090c0:	2000053c 	.word	0x2000053c

080090c4 <_getpid_r>:
 80090c4:	f7f8 bdf4 	b.w	8001cb0 <_getpid>

080090c8 <__sread>:
 80090c8:	b510      	push	{r4, lr}
 80090ca:	460c      	mov	r4, r1
 80090cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80090d0:	f000 f894 	bl	80091fc <_read_r>
 80090d4:	2800      	cmp	r0, #0
 80090d6:	bfab      	itete	ge
 80090d8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80090da:	89a3      	ldrhlt	r3, [r4, #12]
 80090dc:	181b      	addge	r3, r3, r0
 80090de:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80090e2:	bfac      	ite	ge
 80090e4:	6563      	strge	r3, [r4, #84]	; 0x54
 80090e6:	81a3      	strhlt	r3, [r4, #12]
 80090e8:	bd10      	pop	{r4, pc}

080090ea <__swrite>:
 80090ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80090ee:	461f      	mov	r7, r3
 80090f0:	898b      	ldrh	r3, [r1, #12]
 80090f2:	05db      	lsls	r3, r3, #23
 80090f4:	4605      	mov	r5, r0
 80090f6:	460c      	mov	r4, r1
 80090f8:	4616      	mov	r6, r2
 80090fa:	d505      	bpl.n	8009108 <__swrite+0x1e>
 80090fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009100:	2302      	movs	r3, #2
 8009102:	2200      	movs	r2, #0
 8009104:	f000 f868 	bl	80091d8 <_lseek_r>
 8009108:	89a3      	ldrh	r3, [r4, #12]
 800910a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800910e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009112:	81a3      	strh	r3, [r4, #12]
 8009114:	4632      	mov	r2, r6
 8009116:	463b      	mov	r3, r7
 8009118:	4628      	mov	r0, r5
 800911a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800911e:	f000 b817 	b.w	8009150 <_write_r>

08009122 <__sseek>:
 8009122:	b510      	push	{r4, lr}
 8009124:	460c      	mov	r4, r1
 8009126:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800912a:	f000 f855 	bl	80091d8 <_lseek_r>
 800912e:	1c43      	adds	r3, r0, #1
 8009130:	89a3      	ldrh	r3, [r4, #12]
 8009132:	bf15      	itete	ne
 8009134:	6560      	strne	r0, [r4, #84]	; 0x54
 8009136:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800913a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800913e:	81a3      	strheq	r3, [r4, #12]
 8009140:	bf18      	it	ne
 8009142:	81a3      	strhne	r3, [r4, #12]
 8009144:	bd10      	pop	{r4, pc}

08009146 <__sclose>:
 8009146:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800914a:	f000 b813 	b.w	8009174 <_close_r>
	...

08009150 <_write_r>:
 8009150:	b538      	push	{r3, r4, r5, lr}
 8009152:	4d07      	ldr	r5, [pc, #28]	; (8009170 <_write_r+0x20>)
 8009154:	4604      	mov	r4, r0
 8009156:	4608      	mov	r0, r1
 8009158:	4611      	mov	r1, r2
 800915a:	2200      	movs	r2, #0
 800915c:	602a      	str	r2, [r5, #0]
 800915e:	461a      	mov	r2, r3
 8009160:	f7f8 fde5 	bl	8001d2e <_write>
 8009164:	1c43      	adds	r3, r0, #1
 8009166:	d102      	bne.n	800916e <_write_r+0x1e>
 8009168:	682b      	ldr	r3, [r5, #0]
 800916a:	b103      	cbz	r3, 800916e <_write_r+0x1e>
 800916c:	6023      	str	r3, [r4, #0]
 800916e:	bd38      	pop	{r3, r4, r5, pc}
 8009170:	2000053c 	.word	0x2000053c

08009174 <_close_r>:
 8009174:	b538      	push	{r3, r4, r5, lr}
 8009176:	4d06      	ldr	r5, [pc, #24]	; (8009190 <_close_r+0x1c>)
 8009178:	2300      	movs	r3, #0
 800917a:	4604      	mov	r4, r0
 800917c:	4608      	mov	r0, r1
 800917e:	602b      	str	r3, [r5, #0]
 8009180:	f7f8 fdf1 	bl	8001d66 <_close>
 8009184:	1c43      	adds	r3, r0, #1
 8009186:	d102      	bne.n	800918e <_close_r+0x1a>
 8009188:	682b      	ldr	r3, [r5, #0]
 800918a:	b103      	cbz	r3, 800918e <_close_r+0x1a>
 800918c:	6023      	str	r3, [r4, #0]
 800918e:	bd38      	pop	{r3, r4, r5, pc}
 8009190:	2000053c 	.word	0x2000053c

08009194 <_fstat_r>:
 8009194:	b538      	push	{r3, r4, r5, lr}
 8009196:	4d07      	ldr	r5, [pc, #28]	; (80091b4 <_fstat_r+0x20>)
 8009198:	2300      	movs	r3, #0
 800919a:	4604      	mov	r4, r0
 800919c:	4608      	mov	r0, r1
 800919e:	4611      	mov	r1, r2
 80091a0:	602b      	str	r3, [r5, #0]
 80091a2:	f7f8 fdec 	bl	8001d7e <_fstat>
 80091a6:	1c43      	adds	r3, r0, #1
 80091a8:	d102      	bne.n	80091b0 <_fstat_r+0x1c>
 80091aa:	682b      	ldr	r3, [r5, #0]
 80091ac:	b103      	cbz	r3, 80091b0 <_fstat_r+0x1c>
 80091ae:	6023      	str	r3, [r4, #0]
 80091b0:	bd38      	pop	{r3, r4, r5, pc}
 80091b2:	bf00      	nop
 80091b4:	2000053c 	.word	0x2000053c

080091b8 <_isatty_r>:
 80091b8:	b538      	push	{r3, r4, r5, lr}
 80091ba:	4d06      	ldr	r5, [pc, #24]	; (80091d4 <_isatty_r+0x1c>)
 80091bc:	2300      	movs	r3, #0
 80091be:	4604      	mov	r4, r0
 80091c0:	4608      	mov	r0, r1
 80091c2:	602b      	str	r3, [r5, #0]
 80091c4:	f7f8 fdeb 	bl	8001d9e <_isatty>
 80091c8:	1c43      	adds	r3, r0, #1
 80091ca:	d102      	bne.n	80091d2 <_isatty_r+0x1a>
 80091cc:	682b      	ldr	r3, [r5, #0]
 80091ce:	b103      	cbz	r3, 80091d2 <_isatty_r+0x1a>
 80091d0:	6023      	str	r3, [r4, #0]
 80091d2:	bd38      	pop	{r3, r4, r5, pc}
 80091d4:	2000053c 	.word	0x2000053c

080091d8 <_lseek_r>:
 80091d8:	b538      	push	{r3, r4, r5, lr}
 80091da:	4d07      	ldr	r5, [pc, #28]	; (80091f8 <_lseek_r+0x20>)
 80091dc:	4604      	mov	r4, r0
 80091de:	4608      	mov	r0, r1
 80091e0:	4611      	mov	r1, r2
 80091e2:	2200      	movs	r2, #0
 80091e4:	602a      	str	r2, [r5, #0]
 80091e6:	461a      	mov	r2, r3
 80091e8:	f7f8 fde4 	bl	8001db4 <_lseek>
 80091ec:	1c43      	adds	r3, r0, #1
 80091ee:	d102      	bne.n	80091f6 <_lseek_r+0x1e>
 80091f0:	682b      	ldr	r3, [r5, #0]
 80091f2:	b103      	cbz	r3, 80091f6 <_lseek_r+0x1e>
 80091f4:	6023      	str	r3, [r4, #0]
 80091f6:	bd38      	pop	{r3, r4, r5, pc}
 80091f8:	2000053c 	.word	0x2000053c

080091fc <_read_r>:
 80091fc:	b538      	push	{r3, r4, r5, lr}
 80091fe:	4d07      	ldr	r5, [pc, #28]	; (800921c <_read_r+0x20>)
 8009200:	4604      	mov	r4, r0
 8009202:	4608      	mov	r0, r1
 8009204:	4611      	mov	r1, r2
 8009206:	2200      	movs	r2, #0
 8009208:	602a      	str	r2, [r5, #0]
 800920a:	461a      	mov	r2, r3
 800920c:	f7f8 fd72 	bl	8001cf4 <_read>
 8009210:	1c43      	adds	r3, r0, #1
 8009212:	d102      	bne.n	800921a <_read_r+0x1e>
 8009214:	682b      	ldr	r3, [r5, #0]
 8009216:	b103      	cbz	r3, 800921a <_read_r+0x1e>
 8009218:	6023      	str	r3, [r4, #0]
 800921a:	bd38      	pop	{r3, r4, r5, pc}
 800921c:	2000053c 	.word	0x2000053c

08009220 <_init>:
 8009220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009222:	bf00      	nop
 8009224:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009226:	bc08      	pop	{r3}
 8009228:	469e      	mov	lr, r3
 800922a:	4770      	bx	lr

0800922c <_fini>:
 800922c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800922e:	bf00      	nop
 8009230:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009232:	bc08      	pop	{r3}
 8009234:	469e      	mov	lr, r3
 8009236:	4770      	bx	lr
